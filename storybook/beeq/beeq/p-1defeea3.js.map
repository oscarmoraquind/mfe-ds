{"version":3,"names":["setRafTimeout","func","wait","args","invokeFunc","timeoutId","setTimeout","clearTimeout","rafId","currentTime","performance","now","cancel","cancelAnimationFrame","handleRequestAnimationFrame","time","delta","requestAnimationFrame","debounce","immediate","debounceHandler","context","this","timeoutHandler","fn","apply","isNil","Object","assign"],"sources":["../../packages/beeq/src/shared/utils/setRafTimeout.ts","../../packages/beeq/src/shared/utils/debounce.ts"],"sourcesContent":["/**\n * Implements setTimeout using requestAnimationFrame. Uses setTimeout if wait is 0.\n *\n * @param {Function} func - The function to timeout.\n * @param {Number} wait - The number of milliseconds to delay.\n * @param {Any[]} args - The arguments of func.\n * @returns {void}\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const setRafTimeout = <TFunc extends (...args: any[]) => void>(\n  func: TFunc,\n  wait: number,\n  ...args: Parameters<TFunc>\n): (() => void) => {\n  const invokeFunc = () => func(...args);\n\n  if (wait === 0) {\n    const timeoutId = setTimeout(invokeFunc, wait);\n    return () => clearTimeout(timeoutId);\n  } else {\n    let rafId: number;\n    const currentTime = performance.now();\n\n    const cancel = () => cancelAnimationFrame(rafId);\n\n    const handleRequestAnimationFrame: FrameRequestCallback = (time) => {\n      const delta = time - currentTime;\n\n      cancel();\n\n      if (delta < wait) {\n        rafId = requestAnimationFrame(handleRequestAnimationFrame);\n      } else {\n        invokeFunc();\n      }\n    };\n\n    rafId = requestAnimationFrame(handleRequestAnimationFrame);\n\n    return cancel;\n  }\n};\n","import { isNil } from './isNil';\nimport { setRafTimeout } from './setRafTimeout';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type TFunction = (...args: any[]) => unknown;\n\ntype TDebounceFnReturn<T> = T extends unknown[] ? (...params: T) => void : (param: T) => void;\nexport type TDebounce<T> = TDebounceFnReturn<T> & { cancel: () => void } extends infer U ? U : never;\n\n/**\n * Creates a debounced function that delays invoking func until after wait milliseconds have elapsed\n * since the last time the debounced function was invoked.\n *\n * @param {Function} func - The function to debounce.\n * @param {Number} wait - The number of milliseconds to delay.\n * @param {Boolean} immediate - If `true`, the function triggers immediately and then waits for the interval before being called again.\n * @return {Function} The new debounced function.\n */\nexport const debounce = <TFunc extends TFunction>(func: TFunc, wait = 0, immediate = false) => {\n  let cancel: () => void | undefined;\n\n  function debounceHandler(...args: Parameters<typeof func>) {\n    cancel?.();\n\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const context = this;\n\n    function timeoutHandler(fn: TFunc, context: unknown, ...args: Parameters<typeof fn>) {\n      fn.apply(context, args);\n    }\n\n    if (immediate && isNil(cancel)) {\n      func.apply(context, args);\n    }\n\n    cancel = setRafTimeout(timeoutHandler, wait, func, context, ...args);\n  }\n\n  return Object.assign(debounceHandler, {\n    cancel: () => {\n      cancel?.();\n    },\n  });\n};\n"],"mappings":";;;;0CASaA,EAAgB,CAC3BC,EACAC,KACGC,KAEH,MAAMC,EAAa,IAAMH,KAAQE,GAEjC,GAAID,IAAS,EAAG,CACd,MAAMG,EAAYC,WAAWF,EAAYF,GACzC,MAAO,IAAMK,aAAaF,E,KACrB,CACL,IAAIG,EACJ,MAAMC,EAAcC,YAAYC,MAEhC,MAAMC,EAAS,IAAMC,qBAAqBL,GAE1C,MAAMM,EAAqDC,IACzD,MAAMC,EAAQD,EAAON,EAErBG,IAEA,GAAII,EAAQd,EAAM,CAChBM,EAAQS,sBAAsBH,E,KACzB,CACLV,G,GAIJI,EAAQS,sBAAsBH,GAE9B,OAAOF,C,SCrBEM,EAAW,CAA0BjB,EAAaC,EAAO,EAAGiB,EAAY,SACnF,IAAIP,EAEJ,SAASQ,KAAmBjB,GAC1BS,MAGA,MAAMS,EAAUC,KAEhB,SAASC,EAAeC,EAAWH,KAAqBlB,GACtDqB,EAAGC,MAAMJ,EAASlB,E,CAGpB,GAAIgB,GAAaO,EAAMd,GAAS,CAC9BX,EAAKwB,MAAMJ,EAASlB,E,CAGtBS,EAASZ,EAAcuB,EAAgBrB,EAAMD,EAAMoB,KAAYlB,E,CAGjE,OAAOwB,OAAOC,OAAOR,EAAiB,CACpCR,OAAQ,KACNA,KAAU,GAEZ,S","ignoreList":[]}