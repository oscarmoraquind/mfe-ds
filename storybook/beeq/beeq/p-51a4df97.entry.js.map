{"version":3,"names":["bqInputCss","BqInputStyle0","BqInput","helperTextElem","inputElem","labelElem","prefixElem","suffixElem","debounceBqInput","fallbackInputId","internals","hasHelperText","hasLabel","hasPrefix","hasSuffix","hasValue","autocapitalize","autocomplete","autocorrect","autofocus","clearButtonLabel","debounceTime","disabled","disableClear","form","formValidationMessage","inputmode","max","maxlength","min","minlength","name","pattern","placeholder","readonly","required","step","type","validationStatus","value","handleValueChange","this","Array","isArray","some","val","length","setFormValue","join","isDefined","isNil","undefined","bqBlur","bqChange","bqClear","bqFocus","bqInput","componentWillLoad","formAssociatedCallback","toString","updateFormValidity","formResetCallback","handleClear","handleBlur","emit","el","handleFocus","handleInput","ev","cancel","isHTMLElement","target","Number","debounce","handleChange","handleClearClick","stopPropagation","focus","states","clear","trim","add","setValidity","valueMissing","handleLabelSlotChange","hasSlotContent","handlePrefixSlotChange","handleSuffixSlotChange","handleHelperTextSlotChange","render","h","key","class","part","htmlFor","ref","onSlotchange","spanElem","id","autoCapitalize","autoComplete","autoCorrect","inputMode","maxLength","minLength","readOnly","onBlur","onChange","onFocus","onInput","appearance","size","onBqClick","exportparts","divElem"],"sources":["../../packages/beeq/src/components/input/scss/bq-input.scss?tag=bq-input&encapsulation=shadow","../../packages/beeq/src/components/input/bq-input.tsx"],"sourcesContent":["/* -------------------------------------------------------------------------- */\n/*                                Input styles                */\n/* -------------------------------------------------------------------------- */\n\n@import './bq-input.variables';\n\n:host {\n  @apply block is-full;\n}\n\n/* -------------------------------------------------------------------------- */\n/*                            Label and Helper text                           */\n/* -------------------------------------------------------------------------- */\n\n.bq-input--label {\n  @apply flex flex-grow items-center m-be-[--bq-input--label-margin-bottom];\n  @apply text-[length:--bq-input--label-text-size] text-[color:--bq-input--label-text-color];\n}\n\n.bq-input--helper-text {\n  @apply text-[length:--bq-input--helper-text-size] text-[color:--bq-input--helper-text-color] m-bs-[--bq-input--helper-margin-top];\n}\n\n.bq-input--helper-text.validation-error {\n  @apply text-danger;\n}\n\n.bq-input--helper-text.validation-success {\n  @apply text-success;\n}\n\n.bq-input--helper-text.validation-warning {\n  @apply text-warning;\n}\n\n/* -------------------------------------------------------------------------- */\n/*                             Input group control                            */\n/* -------------------------------------------------------------------------- */\n\n.bq-input--control {\n  @apply flex items-center bg-[--bq-input--background-color] transition-[border-color,box-shadow] is-full;\n  // Border\n  @apply rounded-[--bq-input--border-radius] border-[length:--bq-input--border-width] border-[color:--bq-input--border-color];\n  // Padding\n  @apply pe-[--bq-input--padding-end] ps-[--bq-input--padding-start] p-b-[--bq-input--paddingY];\n  // Text\n  @apply text-[length:--bq-input--text-size] text-[color:--bq-input--text-color] placeholder:text-[color:--bq-input--text-placeholder-color];\n  // Hover\n  @apply [&:not(.disabled):not(:focus-within)]:hover:border-hover-brand;\n\n  border-style: var(--bq-input--border-style);\n\n  // Focus\n  &:not(.disabled):focus-within {\n    --bq-ring-width: 1px;\n    --bq-ring-offset-width: 0;\n    --bq-ring-color-focus: var(--bq-input--border-color-focus);\n\n    @apply focus border-[color:--bq-input--border-color-focus];\n  }\n\n  // Enable clear button whenever the input group control is hovered or has focus\n  &:not(.disabled):hover,\n  &:not(.disabled):focus-within {\n    .bq-input--control__clear {\n      @apply inline-block;\n    }\n  }\n}\n\n.bq-input--control.disabled {\n  @apply cursor-not-allowed opacity-60;\n}\n\n/* ------------------------------- Validation ------------------------------- */\n\n.bq-input--control.validation-error {\n  @apply border-danger [&:not(.disabled):not(:focus-within)]:hover:border-hover-danger;\n\n  &:not(.disabled):focus-within {\n    --bq-ring-color-focus: theme(stroke.danger);\n\n    @apply border-active-danger;\n  }\n}\n\n.bq-input--control.validation-success {\n  @apply border-success [&:not(.disabled):not(:focus-within)]:hover:border-hover-success;\n\n  &:not(.disabled):focus-within {\n    --bq-ring-color-focus: theme(stroke.success);\n\n    @apply border-active-success;\n  }\n}\n\n.bq-input--control.validation-warning {\n  @apply border-warning [&:not(.disabled):not(:focus-within)]:hover:border-hover-warning;\n\n  &:not(.disabled):focus-within {\n    --bq-ring-color-focus: theme(stroke.warning);\n\n    @apply border-active-warning;\n  }\n}\n\n/* -------------------------------------------------------------------------- */\n/*                              Native HTML Input                             */\n/* -------------------------------------------------------------------------- */\n\n.bq-input--control__input {\n  @apply flex-auto cursor-inherit appearance-none bg-inherit font-inherit text-[length:inherit] text-inherit;\n  @apply border-none min-bs-[--bq-input--icon-size] min-is-0 p-b-0 p-i-0 m-b-0 m-i-0 focus:outline-none focus-visible:outline-none;\n\n  box-shadow: none;\n  font-weight: inherit;\n}\n\n/* -------------------------------------------------------------------------- */\n/*                                Clear button                                */\n/* -------------------------------------------------------------------------- */\n\n.bq-input--control__clear::part(button) {\n  // Since the clear button is inside the input group control,\n  // we need to reset the focus ring styles\n  --bq-ring-width: initial;\n  --bq-ring-offset-width: initial;\n  --bq-ring-color-focus: initial;\n\n  @apply rounded-xs border-none bs-auto p-b-0 p-i-0;\n}\n\n/* -------------------------------------------------------------------------- */\n/*                              Prefix and suffix                             */\n/* -------------------------------------------------------------------------- */\n\n.bq-input--control__prefix,\n.bq-input--control__suffix {\n  @apply pointer-events-none flex items-center text-[color:--bq-input--text-color];\n}\n\n.bq-input--control__prefix {\n  @apply me-[--bq-input--gap];\n}\n\n.bq-input--control__suffix {\n  @apply ms-[--bq-input--gap];\n}\n\n/* -------------------------------------------------------------------------- */\n/*                         Slotted and internal icons                         */\n/* -------------------------------------------------------------------------- */\n\nbq-icon,\n::slotted(bq-icon) {\n  --bq-icon--size: var(--bq-input--icon-size) !important;\n}\n\n/* -------------------------------------------------------------------------- */\n/*                          Hide webkit clear button                          */\n/* -------------------------------------------------------------------------- */\n\n/* Remove clear controls from search input */\n\n.bq-input--control__input::-moz-search-cancel {\n  @apply hidden appearance-none;\n}\n\n.bq-input--control__input::-webkit-search-decoration,\n.bq-input--control__input::-webkit-search-cancel-button,\n.bq-input--control__input::-webkit-search-results-button,\n.bq-input--control__input::-webkit-search-results-decoration {\n  @apply hidden appearance-none;\n}\n\n/* Remove native control extra padding from input date and datetime */\n\n.bq-input--control__input::-webkit-datetime-edit-fields-wrapper,\n.bq-input--control__input::-webkit-datetime-edit,\n.bq-input--control__input::-webkit-datetime-edit-year-field,\n.bq-input--control__input::-webkit-datetime-edit-month-field,\n.bq-input--control__input::-webkit-datetime-edit-day-field,\n.bq-input--control__input::-webkit-datetime-edit-hour-field,\n.bq-input--control__input::-webkit-datetime-edit-minute-field,\n.bq-input--control__input::-webkit-datetime-edit-second-field,\n.bq-input--control__input::-webkit-datetime-edit-millisecond-field,\n.bq-input--control__input::-webkit-datetime-edit-meridiem-field {\n  @apply p-b-0 p-i-0;\n}\n","import { AttachInternals, Component, Element, Event, EventEmitter, h, Prop, State, Watch } from '@stencil/core';\n\nimport { TInputType, TInputValidation, TInputValue } from './bq-input.types';\nimport { debounce, hasSlotContent, isDefined, isHTMLElement, isNil, TDebounce } from '../../shared/utils';\n\n/**\n * The Input component is a fundamental user interface element that allows users to input data by typing it into a text field.\n * It is commonly used in web and mobile applications for various purposes, such as collecting user information, search inputs, and login forms.\n *\n * @example How to use it\n * ```html\n * <bq-input name=\"username\" label=\"Username\" placeholder=\"Enter your username\"></bq-input>\n * ```\n *\n * @documentation https://www.beeq.design/3d466e231/p/980362-input\n * @status stable\n *\n * @dependency bq-button\n * @dependency bq-icon\n *\n * @attr {string} autocapitalize - Controls whether or not the input field should be capitalized and how.\n * @attr {string} autocomplete - Specifies whether or not the input field should have autocomplete enabled.\n * @attr {string} autocorrect - Controls whether or not the input field should have autocorrect enabled.\n * @attr {boolean} autofocus - If true, the input will be focused on component render.\n * @attr {string} clear-button-label - The clear button aria label.\n * @attr {number} debounce-time - The amount of time, in milliseconds, to wait before emitting the `bqInput` event after the input value changes.\n * @attr {boolean} disabled - Indicates whether the input is disabled or not.\n * @attr {boolean} disable-clear - If true, the clear button won't be displayed.\n * @attr {string} form - The ID of the form that the input field belongs to.\n * @attr {string} form-validation-message - The native form validation message (mandatory if `required` is set).\n * @attr {string} inputmode - The inputmode attribute specifies what kind of input mechanism would be most helpful for users entering content into the input field.\n * @attr {number | string} max - The maximum value that the input field can accept.\n * @attr {number} maxlength - The maximum number of characters that the input field can accept.\n * @attr {number | string} min - The minimum value that the input field can accept.\n * @attr {number} minlength - The minimum number of characters that the input field can accept.\n * @attr {string} name - The input field name.\n * @attr {string} pattern - Specifies a regular expression the form control's value should match.\n * @attr {string} placeholder - The input placeholder text value.\n * @attr {boolean} readonly - If true, the input field cannot be modified.\n * @attr {boolean} required - Indicates whether or not the input field is required to be filled out before submitting the form.\n * @attr {number | 'any'} step - A number that specifies the granularity that the value must adhere to.\n * @attr {string} type - The type attribute specifies the type of input field to display.\n * @attr {'none' | 'error' | 'warning' | 'success'} validation-status - The validation status of the input.\n * @attr {string | number | string[]} value - The input value, it can be used to reset the input to a previous value.\n *\n * @event bqBlur - Callback handler emitted when the input loses focus.\n * @event bqChange - Callback handler emitted when the input value has changed and the input loses focus.\n * @event bqClear - Callback handler emitted when the input value has been cleared.\n * @event bqFocus - Callback handler emitted when the input has received focus.\n * @event bqInput - Callback handler emitted when the input value changes.\n *\n * @slot label - The label slot container.\n * @slot prefix - The prefix slot container.\n * @slot suffix - The suffix slot container.\n * @slot helper-text - The helper text slot container.\n * @slot clear-icon - The clear icon slot container.\n *\n * @part base - The component's base wrapper.\n * @part button - The native HTML button used under the hood in the clear button.\n * @part clear-btn - The clear button.\n * @part control - The input control wrapper.\n * @part helper-text - The helper text slot container.\n * @part label - The label slot container.\n * @part input - The native HTML input element used under the hood.\n * @part prefix - The prefix slot container.\n * @part suffix - The suffix slot container.\n *\n * @cssprop --bq-input--background-color - Input background color\n * @cssprop --bq-input--border-color - Input border color\n * @cssprop --bq-input--border-color-focus - Input border color on focus\n * @cssprop --bq-input--border-radius - Input border radius\n * @cssprop --bq-input--border-width - Input border width\n * @cssprop --bq-input--border-style - Input border style\n * @cssprop --bq-input--gap - Gap between input content and prefix/suffix\n * @cssprop --bq-input--helper-margin-top - Helper text margin top\n * @cssprop --bq-input--helper-text-color - Helper text color\n * @cssprop --bq-input--helper-text-size - Helper text size\n * @cssprop --bq-input--icon-size - Icon size to use in prefix/suffix and clear button\n * @cssprop --bq-input--label-margin-bottom - Input label margin bottom\n * @cssprop --bq-input--label-text-color - Input label text color\n * @cssprop --bq-input--label-text-size - Input label text size\n * @cssprop --bq-input--padding-start - Input padding start\n * @cssprop --bq-input--padding-end - Input padding end\n * @cssprop --bq-input--paddingY - Input padding top and bottom\n * @cssprop --bq-input--text-color - Input text color\n * @cssprop --bq-input--text-size - Input text size\n * @cssprop --bq-input--text-placeholder-color - Input placeholder text color\n */\n@Component({\n  tag: 'bq-input',\n  styleUrl: './scss/bq-input.scss',\n  formAssociated: true,\n  shadow: {\n    delegatesFocus: true,\n  },\n})\nexport class BqInput {\n  // Own Properties\n  // ====================\n\n  private helperTextElem?: HTMLElement;\n  private inputElem?: HTMLInputElement;\n  private labelElem?: HTMLElement;\n  private prefixElem?: HTMLElement;\n  private suffixElem?: HTMLElement;\n\n  private debounceBqInput: TDebounce<void>;\n  private fallbackInputId = 'input';\n\n  // Reference to host HTML element\n  // ===================================\n\n  @Element() el!: HTMLBqInputElement;\n  @AttachInternals() internals!: ElementInternals;\n\n  // State() variables\n  // Inlined decorator, alphabetical order\n  // =======================================\n\n  @State() hasHelperText = false;\n  @State() hasLabel = false;\n  @State() hasPrefix = false;\n  @State() hasSuffix = false;\n  @State() hasValue = false;\n\n  // Public Property API\n  // ========================\n\n  /**\n   * Controls whether or not the input field should be capitalized and how.\n   * Possible values are 'off', 'none', 'on', 'sentences', 'words', and 'characters'.\n   * See: https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize\n   */\n  @Prop({ reflect: true }) autocapitalize: string = 'off';\n\n  /**\n   * Specifies whether or not the input field should have autocomplete enabled.\n   * See: https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete#values\n   */\n  @Prop({ reflect: true }) autocomplete: string = 'off';\n\n  /**\n   * Controls whether or not the input field should have autocorrect enabled.\n   * Possible values are 'on' and 'off'.\n   */\n  @Prop({ reflect: true }) autocorrect: 'on' | 'off' = 'off';\n\n  /** If true, the input will be focused on component render */\n  @Prop({ reflect: true }) autofocus: boolean;\n\n  /** The clear button aria label */\n  @Prop({ reflect: true }) clearButtonLabel? = 'Clear value';\n\n  /**\n   * The amount of time, in milliseconds, to wait before emitting the `bqInput` event after the input value changes.\n   * A value of 0 means no debouncing will occur.\n   */\n  @Prop({ reflect: true, mutable: true }) debounceTime? = 0;\n\n  /**\n   * Indicates whether the input is disabled or not.\n   * If `true`, the input is disabled and cannot be interacted with.\n   */\n  @Prop({ mutable: true }) disabled?: boolean = false;\n\n  /** If true, the clear button won't be displayed */\n  @Prop({ reflect: true }) disableClear? = false;\n\n  /** The ID of the form that the input field belongs to. */\n  @Prop({ reflect: true }) form?: string;\n\n  /** The native form validation message (mandatory if `required` is set) */\n  @Prop({ mutable: true }) formValidationMessage?: string;\n\n  /**\n   * The inputmode attribute specifies what kind of input mechanism would be most helpful for users entering content into the input field.\n   * This allows a browser to display an appropriate virtual keyboard while editing.\n   * Possible values are 'none', 'text', 'decimal', 'numeric', 'tel', 'search', 'email', 'url', and 'date'.\n   */\n  @Prop() inputmode?: string;\n\n  /**\n   * The maximum value that the input field can accept.\n   * Only applies to date and number input types.\n   */\n  @Prop({ reflect: true }) max?: number | string;\n\n  /** The maximum number of characters that the input field can accept. */\n  @Prop({ reflect: true }) maxlength: number;\n\n  /**\n   * The minimum value that the input field can accept.\n   * Only applies to date and number input types.\n   */\n  @Prop({ reflect: true }) min?: number | string;\n\n  /** The minimum number of characters that the input field can accept. */\n  @Prop({ reflect: true }) minlength: number;\n\n  /** The input field name. */\n  @Prop({ reflect: true }) name!: string;\n\n  /**\n   * Specifies a regular expression the form control's value should match.\n   * See: https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/pattern\n   */\n  @Prop({ reflect: true }) pattern?: string;\n\n  /** The input placeholder text value */\n  @Prop({ reflect: true }) placeholder?: string;\n\n  /** If true, the input field cannot be modified. */\n  @Prop({ reflect: true }) readonly?: boolean;\n\n  /** Indicates whether or not the input field is required to be filled out before submitting the form. */\n  @Prop({ reflect: true }) required?: boolean;\n\n  /**\n   * A number that specifies the granularity that the value must adhere to.\n   * Valid for date, month, week, time, datetime-local, number, and range.\n   * See: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#step\n   */\n  @Prop({ reflect: true }) step: number | 'any';\n\n  /**\n   * The type attribute specifies the type of input field to display.\n   * Possible values are 'text', 'password', 'email', 'number', 'tel', 'search', 'url', and more.\n   * See: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#input_types\n   */\n  @Prop({ reflect: true }) type: TInputType = 'text';\n\n  /**\n   * The validation status of the input.\n   *\n   * @remarks\n   * This property is used to indicate the validation status of the input. It can be set to one of the following values:\n   * - `'none'`: No validation status is set.\n   * - `'error'`: The input has a validation error.\n   * - `'warning'`: The input has a validation warning.\n   * - `'success'`: The input has passed validation.\n   */\n  @Prop({ reflect: true }) validationStatus: TInputValidation = 'none';\n\n  /** The input value, it can be used to reset the input to a previous value */\n  @Prop({ reflect: true, mutable: true }) value: TInputValue;\n\n  // Prop lifecycle events\n  // =======================\n\n  @Watch('value')\n  handleValueChange() {\n    const { internals, value } = this;\n    if (Array.isArray(value)) {\n      this.hasValue = value.some((val) => val.length > 0);\n      this.internals.setFormValue(value.join(','));\n      return;\n    }\n\n    this.hasValue = isDefined(value);\n    internals.setFormValue(!isNil(value) ? `${value}` : undefined);\n  }\n\n  // Events section\n  // Requires JSDocs for public API documentation\n  // ==============================================\n\n  /** Callback handler emitted when the input loses focus */\n  @Event() bqBlur!: EventEmitter<HTMLBqInputElement>;\n\n  /**\n   * Callback handler emitted when the input value has changed and the input loses focus.\n   * This handler is called whenever the user finishes typing or pasting text into the input field and then clicks outside of the input field.\n   */\n  @Event() bqChange!: EventEmitter<{ value: string | number | string[]; el: HTMLBqInputElement }>;\n\n  /** Callback handler emitted when the input value has been cleared */\n  @Event() bqClear!: EventEmitter<HTMLBqInputElement>;\n\n  /** Callback handler emitted when the input has received focus */\n  @Event() bqFocus!: EventEmitter<HTMLBqInputElement>;\n\n  /**\n   * Callback handler emitted when the input value changes.\n   * This handler is called whenever the user types or pastes text into the input field.\n   */\n  @Event() bqInput!: EventEmitter<{ value: string | number | string[]; el: HTMLBqInputElement }>;\n\n  // Component lifecycle events\n  // Ordered by their natural call order\n  // =====================================\n\n  componentWillLoad() {\n    this.handleValueChange();\n  }\n\n  formAssociatedCallback() {\n    this.setFormValue(this.value?.toString());\n    this.updateFormValidity();\n  }\n\n  formResetCallback() {\n    if (isNil(this.value)) return;\n\n    this.handleClear();\n  }\n\n  // Listeners\n  // ==============\n\n  // Public methods API\n  // These methods are exposed on the host element.\n  // Always use two lines.\n  // Public Methods must be async.\n  // Requires JSDocs for public API documentation.\n  // ===============================================\n\n  // Local methods\n  // Internal business logic.\n  // These methods cannot be called from the host element.\n  // =======================================================\n\n  private handleBlur = () => {\n    if (this.disabled) return;\n\n    this.bqBlur.emit(this.el);\n  };\n\n  private handleFocus = () => {\n    if (this.disabled) return;\n\n    this.bqFocus.emit(this.el);\n  };\n\n  private handleInput = (ev: Event) => {\n    if (this.disabled) return;\n\n    this.debounceBqInput?.cancel();\n\n    if (!isHTMLElement(ev.target, 'input')) return;\n    this.value = this.type === 'number' ? Number(ev.target.value) : ev.target.value;\n\n    this.debounceBqInput = debounce(() => {\n      this.bqInput.emit({ value: this.value, el: this.el });\n    }, this.debounceTime);\n    this.debounceBqInput();\n  };\n\n  private handleChange = (ev: Event) => {\n    if (this.disabled) return;\n\n    if (!isHTMLElement(ev.target, 'input')) return;\n    this.value = this.type === 'number' ? Number(ev.target.value) : ev.target.value;\n    // Update form value and validity\n    this.setFormValue(`${this.value}`);\n    this.updateFormValidity();\n\n    this.bqChange.emit({ value: this.value, el: this.el });\n  };\n\n  private handleClear = () => {\n    if (this.disabled) return;\n\n    const { inputElem, setFormValue, updateFormValidity } = this;\n    // Clear input element value\n    inputElem.value = '';\n    this.value = inputElem.value;\n    // Set form value to empty string abd update validity\n    setFormValue(this.value);\n    updateFormValidity();\n  };\n\n  private handleClearClick = (ev: CustomEvent) => {\n    ev.stopPropagation();\n    this.handleClear();\n\n    const { bqClear, bqChange, bqInput, el, inputElem } = this;\n    // Emit events\n    bqClear.emit(el);\n    bqInput.emit({ value: this.value, el });\n    bqChange.emit({ value: this.value, el });\n    // Refocus input element\n    inputElem.focus();\n  };\n\n  private setFormValue = (value?: string) => {\n    this.internals.setFormValue(!isNil(value) ? `${value}` : undefined);\n  };\n\n  private updateFormValidity = () => {\n    const { formValidationMessage, internals, required, value, inputElem } = this;\n\n    // Clear the validity state\n    internals?.states.clear();\n\n    if (required && (!value || value.toString().trim() === '')) {\n      // Set validity state to invalid\n      internals?.states.add('invalid');\n      internals?.setValidity({ valueMissing: true }, formValidationMessage, inputElem);\n      return;\n    }\n\n    // Set validity state to valid if textarea has value or is not required\n    internals?.states.add('valid');\n    internals?.setValidity({});\n  };\n\n  private handleLabelSlotChange = () => {\n    this.hasLabel = hasSlotContent(this.labelElem);\n  };\n\n  private handlePrefixSlotChange = () => {\n    this.hasPrefix = hasSlotContent(this.prefixElem);\n  };\n\n  private handleSuffixSlotChange = () => {\n    this.hasSuffix = hasSlotContent(this.suffixElem);\n  };\n\n  private handleHelperTextSlotChange = () => {\n    this.hasHelperText = hasSlotContent(this.helperTextElem);\n  };\n\n  // render() function\n  // Always the last one in the class.\n  // ===================================\n\n  render() {\n    return (\n      <div class=\"bq-input\" part=\"base\">\n        {/* Label */}\n        <label\n          class={{ 'bq-input--label': true, '!hidden': !this.hasLabel }}\n          aria-label={this.name || this.fallbackInputId}\n          htmlFor={this.name || this.fallbackInputId}\n          ref={(labelElem) => (this.labelElem = labelElem)}\n          part=\"label\"\n        >\n          <slot name=\"label\" onSlotchange={this.handleLabelSlotChange} />\n        </label>\n        {/* Input control group */}\n        <div\n          class={{\n            'bq-input--control': true,\n            [`validation-${this.validationStatus}`]: true,\n            disabled: this.disabled,\n          }}\n          part=\"control\"\n        >\n          {/* Prefix */}\n          <span\n            class={{ 'bq-input--control__prefix': true, '!hidden': !this.hasPrefix }}\n            ref={(spanElem) => (this.prefixElem = spanElem)}\n            part=\"prefix\"\n          >\n            <slot name=\"prefix\" onSlotchange={this.handlePrefixSlotChange} />\n          </span>\n          {/* HTML Input */}\n          <input\n            id={this.name || this.fallbackInputId}\n            class=\"bq-input--control__input\"\n            aria-disabled={this.disabled ? 'true' : 'false'}\n            autoCapitalize={this.autocapitalize}\n            autoComplete={this.autocomplete}\n            autoCorrect={this.autocorrect}\n            disabled={this.disabled}\n            form={this.form}\n            inputMode={this.inputmode}\n            max={this.max}\n            maxLength={this.maxlength}\n            min={this.min}\n            minLength={this.minlength}\n            name={this.name}\n            pattern={this.pattern}\n            placeholder={this.placeholder}\n            ref={(inputElem) => (this.inputElem = inputElem)}\n            readOnly={this.readonly}\n            required={this.required}\n            step={this.step}\n            type={this.type}\n            value={this.value}\n            part=\"input\"\n            // Events\n            onBlur={this.handleBlur}\n            onChange={this.handleChange}\n            onFocus={this.handleFocus}\n            onInput={this.handleInput}\n          />\n          {/* Clear Button */}\n          {this.hasValue && !this.disabled && !this.disableClear && (\n            // The clear button will be visible as long as the input has a value\n            // and the parent group is hovered or has focus-within\n            <bq-button\n              class=\"bq-input--control__clear ms-[--bq-input--gap] hidden\"\n              appearance=\"text\"\n              aria-label={this.clearButtonLabel}\n              size=\"small\"\n              onBqClick={this.handleClearClick}\n              part=\"clear-btn\"\n              exportparts=\"button\"\n            >\n              <slot name=\"clear-icon\">\n                <bq-icon name=\"x-circle\" class=\"flex\" />\n              </slot>\n            </bq-button>\n          )}\n          {/* Suffix */}\n          <span\n            class={{ 'bq-input--control__suffix': true, '!hidden': !this.hasSuffix }}\n            ref={(spanElem) => (this.suffixElem = spanElem)}\n            part=\"suffix\"\n          >\n            <slot name=\"suffix\" onSlotchange={this.handleSuffixSlotChange} />\n          </span>\n        </div>\n        {/* Helper text */}\n        <div\n          class={{\n            [`bq-input--helper-text validation-${this.validationStatus}`]: true,\n            '!hidden': !this.hasHelperText,\n          }}\n          ref={(divElem) => (this.helperTextElem = divElem)}\n          part=\"helper-text\"\n        >\n          <slot name=\"helper-text\" onSlotchange={this.handleHelperTextSlotChange} />\n        </div>\n      </div>\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]}