{"version":3,"names":["getNextElement","elements","startAt","direction","elementIndex","getNextIndex","length","disabled","currentIndex","nextIndex"],"sources":["../../packages/beeq/src/shared/utils/getNextElement.ts"],"sourcesContent":["/**\n * Gets the next element that is not disabled\n *\n * @param {Array} elements - The array to search in\n * @param {Numebr} startAt - Position to start at\n * @param {String} direction - The direction to look on\n * @returns {Element} Next available element\n */\n\nexport const getNextElement = <T extends { disabled: boolean }>(\n  elements: T[],\n  startAt = 0,\n  direction: 'forward' | 'backward' = 'forward',\n): T => {\n  let elementIndex = startAt;\n\n  do {\n    elementIndex = getNextIndex(elementIndex, elements.length, direction);\n    if (elementIndex === startAt) {\n      break;\n    }\n  } while (elements[elementIndex].disabled);\n\n  return elements[elementIndex];\n};\n\nconst getNextIndex = (currentIndex: number, length: number, direction: 'forward' | 'backward'): number => {\n  const nextIndex = currentIndex + (direction === 'forward' ? 1 : -1);\n  return (length + nextIndex) % length;\n};\n"],"mappings":";;;;MASaA,EAAiB,CAC5BC,EACAC,EAAU,EACVC,EAAoC,aAEpC,IAAIC,EAAeF,EAEnB,EAAG,CACDE,EAAeC,EAAaD,EAAcH,EAASK,OAAQH,GAC3D,GAAIC,IAAiBF,EAAS,CAC5B,K,QAEKD,EAASG,GAAcG,UAEhC,OAAON,EAASG,EAAa,EAG/B,MAAMC,EAAe,CAACG,EAAsBF,EAAgBH,KAC1D,MAAMM,EAAYD,GAAgBL,IAAc,UAAY,GAAK,GACjE,OAAQG,EAASG,GAAaH,CAAM,S","ignoreList":[]}