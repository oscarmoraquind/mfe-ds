{"version":3,"names":["bqRadioCss","BqRadioStyle0","BqRadio","inputElement","checked","disabled","backgroundOnHover","formId","name","required","value","bqClick","bqFocus","bqBlur","bqKeyDown","vClick","this","click","vFocus","focus","vBlur","blur","getNativeInput","handleClick","emit","el","handleOnFocus","handleOnBlur","handleOnKeyDown","event","tabindex","render","h","key","class","part","ref","element","type","form","onBlur","onClick","onFocus","onKeyDown","id"],"sources":["../../packages/beeq/src/components/radio/scss/bq-radio.scss?tag=bq-radio&encapsulation=shadow","../../packages/beeq/src/components/radio/bq-radio.tsx"],"sourcesContent":["/* -------------------------------------------------------------------------- */\n/*                                Radio styles                               */\n/* -------------------------------------------------------------------------- */\n\n@import './bq-radio.variables';\n\n:host {\n  @apply inline-block;\n}\n\n.bq-radio {\n  @apply box-border inline-flex cursor-pointer items-center justify-center gap-2 transition-[background-color] duration-300;\n  @apply rounded-s p-b-xs p-i-xs;\n\n  &.is-disabled {\n    .bq-radio__circle {\n      @apply opacity-60;\n    }\n\n    &.is-checked .bq-radio__circle {\n      @apply border-icon-brand;\n    }\n\n    &.is-checked .bq-radio__checked {\n      @apply bg-ui-brand;\n    }\n  }\n\n  &.has-background:not(.is-disabled):hover {\n    @apply bg-hover-ui-primary;\n  }\n\n  &.is-checked:not(.is-disabled) {\n    .bq-radio__circle {\n      @apply border-icon-brand;\n    }\n\n    .bq-radio__checked {\n      @apply bg-ui-brand;\n    }\n  }\n\n  &:not(.is-disabled):hover .bq-radio__circle {\n    @apply border-hover-icon-brand;\n  }\n\n  &.is-checked:not(.is-disabled):hover {\n    .bq-radio__checked,\n    .bq-radio__circle {\n      @apply border-hover-icon-brand;\n    }\n  }\n}\n\n.bq-radio__input {\n  @apply sr-only;\n\n  &:focus-visible {\n    ~ .bq-radio__circle {\n      @apply focus;\n    }\n  }\n}\n\n.bq-radio__control {\n  @apply box-border flex items-center justify-center rounded-full bs-[--bq-radio--size] is-[--bq-radio--size] p-b-[2px] p-i-[2px];\n}\n\n.bq-radio__circle {\n  @apply relative box-border flex items-center justify-center rounded-full border-[length:--bq-radio--border-width] border-solid border-hover-icon-primary bs-full is-full p-b-[3px] p-i-[3px];\n}\n\n.bq-radio__checked {\n  @apply rounded-full bs-full is-full;\n}\n\n.bq-radio__label {\n  @apply font-medium leading-regular text-primary;\n}\n\n.bq-radio__circle,\n.bq-radio__checked,\n.bq-radio__label {\n  @apply transition-[color,background-color,border-color,box-shadow] duration-300;\n}\n","import { Component, Element, Event, EventEmitter, h, Method, Prop } from '@stencil/core';\n\n/**\n * The radio button is a user interface element that allows users to select a single option.\n *\n * @example How to use it\n * ```html\n * <bq-radio value=\"option1\">Radio option 1</bq-radio>\n * ```\n *\n * @documentation https://www.beeq.design/3d466e231/p/9718e1-radio-button/b/09d7b1\n * @status stable\n *\n * @attr {boolean} background-on-hover - If `true`, the radio displays background on hover\n * @attr {boolean} checked - If `true` radio input is checked\n * @attr {boolean} disabled - If `true` radio input is disabled\n * @attr {string} form-id - The form ID that the radio input is associated with\n * @attr {string} name - Name of the HTML input form control. Submitted with the form as part of a name/value pair\n * @attr {boolean} required - IfÂ `true`, it will indicate that the user must specify a value for the radio before the owning form can be submitted\n * @attr {boolean} value - A string representing the value of the radio\n *\n * @method vClick - Simulate a click event on the native `<input>` HTML element used under the hood\n * @method vFocus - Sets focus on the native `<input>` HTML element used under the hood\n * @method vBlur - Remove focus from the native `<input>` HTML element used under the hood\n * @method getNativeInput - Returns the native `<input>` HTML element used under the hood\n *\n * @event bqBlur - Handler to be called when the radio loses focus\n * @event bqClick - Handler to be called when the radio state changes\n * @event bqFocus - Handler to be called when the radio gets focused\n * @event bqKeyDown - The handler is to be called when the radio key is pressed\n *\n * @slot - The bq-radio item\n *\n * @part base - The component's internal wrapper of the radio component.\n * @part input - The native HTML `<input type=\"radio\">` used under the hood.\n * @part radio - The component's internal wrapper of the radio component.\n * @part label - The `<span>` element that holds the text content.\n *\n * @cssprop --bq-radio--size - Radio size\n * @cssprop --bq-radio--border-width - Radio border width\n */\n@Component({\n  tag: 'bq-radio',\n  styleUrl: './scss/bq-radio.scss',\n  shadow: {\n    delegatesFocus: true,\n  },\n})\nexport class BqRadio {\n  // Own Properties\n  // ====================\n  private inputElement: HTMLInputElement;\n\n  // Reference to host HTML element\n  // ===================================\n\n  @Element() el!: HTMLBqRadioElement;\n\n  // State() variables\n  // Inlined decorator, alphabetical order\n  // =======================================\n\n  // Public Property API\n  // ========================\n\n  /** If true radio input is checked */\n  @Prop({ reflect: true, mutable: true }) checked?: boolean;\n\n  /** If true radio input is disabled */\n  @Prop({ reflect: true }) disabled? = false;\n\n  /** If true radio displays background on hover */\n  @Prop({ reflect: true }) backgroundOnHover? = false;\n\n  /** The form ID that the radio input is associated with */\n  @Prop({ reflect: true }) formId?: string;\n\n  /** Name of the HTML input form control. Submitted with the form as part of a name/value pair.  */\n  @Prop({ reflect: true }) name!: string;\n\n  /** If `true`, it will indicate that the user must specify a value for the radio before the owning form can be submitted */\n  @Prop({ reflect: true }) required?: boolean;\n\n  /** A string representing the value of the radio. */\n  @Prop({ reflect: true }) value!: string;\n\n  // Prop lifecycle events\n  // =======================\n\n  // Events section\n  // Requires JSDocs for public API documentation\n  // ==============================================\n\n  /** Handler to be called when the radio state changes */\n  @Event() bqClick: EventEmitter<HTMLBqRadioElement>;\n\n  /** Handler to be called when the radio gets focus */\n  @Event() bqFocus: EventEmitter<HTMLBqRadioElement>;\n\n  /** Handler to be called when the radio loses focus */\n  @Event() bqBlur: EventEmitter<HTMLBqRadioElement>;\n\n  /** Handler to be called when the radio key is pressed */\n  @Event() bqKeyDown: EventEmitter<KeyboardEvent>;\n\n  // Component lifecycle events\n  // Ordered by their natural call order\n  // =====================================\n\n  // Listeners\n  // ==============\n\n  // Public methods API\n  // These methods are exposed on the host element.\n  // Always use two lines.\n  // Public Methods must be async.\n  // Requires JSDocs for public API documentation.\n  // ===============================================\n\n  /**\n   * Simulate a click event on the native `<input>` HTML element used under the hood.\n   * Use this method instead of the global `element.click()`.\n   */\n  @Method()\n  async vClick() {\n    this.inputElement?.click();\n  }\n\n  /**\n   * Sets focus on the native `<input>` HTML element used under the hood.\n   * Use this method instead of the global `element.focus()`.\n   */\n  @Method()\n  async vFocus() {\n    this.inputElement?.focus();\n  }\n\n  /**\n   * Remove focus from the native `<input>` HTML element used under the hood.\n   * Use this method instead of the global `element.blur()`.\n   */\n  @Method()\n  async vBlur() {\n    this.inputElement?.blur();\n  }\n\n  /**\n   * Returns the native `<input>` HTML element used under the hood.\n   */\n  @Method()\n  async getNativeInput() {\n    return this.inputElement;\n  }\n\n  // Local methods\n  // Internal business logic.\n  // These methods cannot be called from the host element.\n  // =======================================================\n\n  private handleClick = () => {\n    this.checked = true;\n    this.bqClick.emit(this.el);\n  };\n\n  private handleOnFocus = () => {\n    this.bqFocus.emit(this.el);\n  };\n\n  private handleOnBlur = () => {\n    this.bqBlur.emit(this.el);\n  };\n\n  private handleOnKeyDown = (event: KeyboardEvent) => {\n    this.bqKeyDown.emit(event);\n  };\n\n  private get tabindex(): string {\n    // NOTE: this.checked is undefined when is not part of bq-radio-group\n    return `${-1 + +(this.checked ?? 1)}`;\n  }\n\n  // render() function\n  // Always the last one in the class.\n  // ===================================\n\n  render() {\n    return (\n      <label\n        class={{\n          'bq-radio group': true,\n          'is-disabled !cursor-not-allowed': this.disabled,\n          'is-checked': this.checked,\n          'has-background': this.backgroundOnHover,\n        }}\n        part=\"base\"\n      >\n        <div class=\"bq-radio__control\">\n          <input\n            class=\"bq-radio__input\"\n            ref={(element) => (this.inputElement = element)}\n            type=\"radio\"\n            form={this.formId}\n            name={this.name}\n            value={this.value}\n            required={this.required}\n            disabled={this.disabled}\n            onBlur={this.handleOnBlur}\n            onClick={this.handleClick}\n            onFocus={this.handleOnFocus}\n            onKeyDown={this.handleOnKeyDown}\n            aria-checked={this.checked ? 'true' : 'false'}\n            aria-disabled={this.disabled ? 'true' : 'false'}\n            aria-labelledby=\"bq-radio__label\"\n            tabindex={this.tabindex}\n            part=\"input\"\n          />\n          <div class=\"bq-radio__circle\" part=\"radio\">\n            <div class=\"bq-radio__checked\" />\n          </div>\n        </div>\n        <span\n          class=\"bq-radio__label group-hover:text-text-primary-hover group-[.is-disabled]:text-text-primary-disabled\"\n          part=\"label\"\n        >\n          <slot id=\"bq-radio__label\"></slot>\n        </span>\n      </label>\n    );\n  }\n}\n"],"mappings":";;;;yDAAA,MAAMA,EAAa,m0gCACnB,MAAAC,EAAeD,E,MC+CFE,EAAO,M,+JAGVC,a,wBAegCC,QAGfC,SAAY,MAGZC,kBAAqB,MAGrBC,OAGAC,KAGAC,SAGAC,MAUhBC,QAGAC,QAGAC,OAGAC,UAqBT,YAAMC,GACJC,KAAKb,cAAcc,O,CAQrB,YAAMC,GACJF,KAAKb,cAAcgB,O,CAQrB,WAAMC,GACJJ,KAAKb,cAAckB,M,CAOrB,oBAAMC,GACJ,OAAON,KAAKb,Y,CAQNoB,YAAc,KACpBP,KAAKZ,QAAU,KACfY,KAAKL,QAAQa,KAAKR,KAAKS,GAAG,EAGpBC,cAAgB,KACtBV,KAAKJ,QAAQY,KAAKR,KAAKS,GAAG,EAGpBE,aAAe,KACrBX,KAAKH,OAAOW,KAAKR,KAAKS,GAAG,EAGnBG,gBAAmBC,IACzBb,KAAKF,UAAUU,KAAKK,EAAM,EAG5B,YAAYC,GAEV,MAAO,IAAI,KAAMd,KAAKZ,SAAW,I,CAOnC,MAAA2B,GACE,OACEC,EAAA,SAAAC,IAAA,2CACEC,MAAO,CACL,iBAAkB,KAClB,kCAAmClB,KAAKX,SACxC,aAAcW,KAAKZ,QACnB,iBAAkBY,KAAKV,mBAEzB6B,KAAK,QAELH,EAAA,OAAAC,IAAA,2CAAKC,MAAM,qBACTF,EAAA,SAAAC,IAAA,2CACEC,MAAM,kBACNE,IAAMC,GAAarB,KAAKb,aAAekC,EACvCC,KAAK,QACLC,KAAMvB,KAAKT,OACXC,KAAMQ,KAAKR,KACXE,MAAOM,KAAKN,MACZD,SAAUO,KAAKP,SACfJ,SAAUW,KAAKX,SACfmC,OAAQxB,KAAKW,aACbc,QAASzB,KAAKO,YACdmB,QAAS1B,KAAKU,cACdiB,UAAW3B,KAAKY,gBAAe,eACjBZ,KAAKZ,QAAU,OAAS,QAAO,gBAC9BY,KAAKX,SAAW,OAAS,QAAO,kBAC/B,kBAChByB,SAAUd,KAAKc,SACfK,KAAK,UAEPH,EAAA,OAAAC,IAAA,2CAAKC,MAAM,mBAAmBC,KAAK,SACjCH,EAAA,OAAAC,IAAA,2CAAKC,MAAM,wBAGfF,EAAA,QAAAC,IAAA,2CACEC,MAAM,sGACNC,KAAK,SAELH,EAAA,QAAAC,IAAA,2CAAMW,GAAG,qB","ignoreList":[]}