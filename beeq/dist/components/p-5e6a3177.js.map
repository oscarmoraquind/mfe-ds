{"version":3,"names":["bqPanelCss","BqPanelStyle0","BqPanel","proxyCustomElement","H","panel","floatingUI","trigger","distance","placement","open","sameWidth","skidding","strategy","handleOpenChange","this","hidePanel","showPanel","onPropChange","init","options","componentDidLoad","parentTrigger","el","parentElement","querySelector","getBoundingClientRect","contextElement","FloatingUI","disconnectedCallback","destroy","update","render","h","key","class","ref","hidden","part"],"sources":["../../packages/beeq/src/components/panel/scss/bq-panel.scss?tag=bq-panel&encapsulation=shadow","../../packages/beeq/src/components/panel/bq-panel.tsx"],"sourcesContent":["/* -------------------------------------------------------------------------- */\n/*                                Panel styles                */\n/* -------------------------------------------------------------------------- */\n\n@import './bq-panel.variables';\n\n:host {\n  @apply block;\n}\n\n.bq-panel {\n  @include animation-fade-in;\n  @apply fixed z-[--bq-panel-z-index] overflow-y-auto overflow-x-hidden is-[--bq-panel--width] max-bs-[--bq-panel--height];\n  @apply rounded-[--bq-panel--border-radius] bg-[--bq-panel--background] shadow-[shadow:--bq-panel--box-shadow];\n  @apply pe-[--bq-panel--padding-end] ps-[--bq-panel--padding-start] p-b-[--bq-panel--paddingY];\n  @apply border-[length:--bq-panel--border-width] border-[color:--bq-panel--border-color];\n\n  border-style: var(--bq-panel--border-style);\n}\n","import { ReferenceElement } from '@floating-ui/dom';\nimport { Component, Element, h, Prop, Watch } from '@stencil/core';\n\nimport { Placement } from '../../services/interfaces';\nimport { FloatingUI } from '../../services/libraries';\n\n/**\n * The Panel component is a versatile and essential element used to wrap and display content in a floating panel.\n *\n * @example How to use it\n * ```html\n * <bq-panel open>\n *   <div>Panel content</div>\n * </bq-panel>\n * ```\n *\n * @status stable\n *\n * @attr {number} distance - Represents the distance (gutter or margin) between the panel and the trigger element.\n * @attr {\"top\" | \"bottom\" | \"left\" | \"right\" | \"top-start\" | \"top-end\" | \"bottom-start\" | \"bottom-end\" | \"left-start\" | \"left-end\" | \"right-start\" | \"right-end\"} placement - Position of the panel.\n * @attr {boolean} open - If true, the panel will be visible.\n * @attr {boolean} same-width - Whether the panel should have the same width as the trigger element.\n * @attr {number} skidding - Represents the skidding between the panel and the trigger element.\n * @attr {\"fixed\" | \"absolute\"} strategy - Defines the strategy to position the panel.\n *\n * @slot - The content of the panel.\n *\n * @part panel - The `<div>` element used to display and style the panel\n *\n * @prop --bq-panel--background - Panel background color\n * @prop --bq-panel--border-color - Panel border color\n * @prop --bq-panel--border-radius - Panel border radius\n * @prop --bq-panel--border-style - Panel border style\n * @prop --bq-panel--border-width - Panel border width\n * @prop --bq-panel--box-shadow - Panel box shadow\n * @prop --bq-panel--padding - Panel padding\n * @prop --bq-panel--height - Panel height\n * @prop --bq-panel--width - Panel width\n * @prop --bq-panel-z-index - Panel z-index applied when opened\n */\n@Component({\n  tag: 'bq-panel',\n  styleUrl: './scss/bq-panel.scss',\n  shadow: true,\n})\nexport class BqPanel {\n  // Own Properties\n  // ====================\n\n  private panel: HTMLElement;\n  private floatingUI: FloatingUI;\n  private trigger: ReferenceElement;\n\n  // Reference to host HTML element\n  // ===================================\n\n  @Element() el!: HTMLBqPanelElement;\n\n  // State() variables\n  // Inlined decorator, alphabetical order\n  // =======================================\n\n  // Public Property API\n  // ========================\n\n  /** Represents the distance (gutter or margin) between the panel and the trigger element. */\n  @Prop({ reflect: true }) distance?: number = 4;\n\n  /** Position of the panel */\n  @Prop({ reflect: true }) placement?: Placement = 'bottom-start';\n\n  /** If true, the panel will be visible. */\n  @Prop({ reflect: true, mutable: true }) open?: boolean = false;\n\n  /** Whether the panel should have the same width as the trigger element */\n  @Prop({ reflect: true }) sameWidth?: boolean = false;\n\n  /**  Represents the skidding between the panel and the trigger element. */\n  @Prop({ reflect: true }) skidding?: number = 0;\n\n  /** Defines the strategy to position the panel */\n  @Prop({ reflect: true }) strategy?: 'fixed' | 'absolute' = 'fixed';\n\n  // Prop lifecycle events\n  // =======================\n\n  @Watch('open')\n  handleOpenChange() {\n    if (!this.open) {\n      this.hidePanel();\n      return;\n    }\n\n    this.showPanel();\n  }\n\n  @Watch('distance')\n  @Watch('placement')\n  @Watch('sameWidth')\n  @Watch('skidding')\n  @Watch('strategy')\n  onPropChange() {\n    this.floatingUI?.init({ ...this.options });\n  }\n\n  // Events section\n  // Requires JSDocs for public API documentation\n  // ==============================================\n\n  // Component lifecycle events\n  // Ordered by their natural call order\n  // =====================================\n\n  componentDidLoad() {\n    // We need to find the trigger element from the parent to position the panel relative to it.\n    const parentTrigger = this.el.parentElement.querySelector('div[part=\"trigger\"]');\n    if (!parentTrigger) return;\n\n    this.trigger = {\n      getBoundingClientRect: () => parentTrigger.getBoundingClientRect(),\n      contextElement: parentTrigger,\n    };\n\n    this.floatingUI = new FloatingUI(this.trigger, this.panel, { ...this.options });\n    this.handleOpenChange();\n  }\n\n  disconnectedCallback() {\n    this.floatingUI?.destroy();\n  }\n\n  // Listeners\n  // ==============\n\n  // Public methods API\n  // These methods are exposed on the host element.\n  // Always use two lines.\n  // Public Methods must be async.\n  // Requires JSDocs for public API documentation.\n  // ===============================================\n\n  // Local methods\n  // Internal business logic.\n  // These methods cannot be called from the host element.\n  // =======================================================\n\n  private showPanel() {\n    this.floatingUI?.update();\n  }\n\n  private async hidePanel() {\n    this.open = false;\n  }\n\n  private get options() {\n    return {\n      distance: this.distance,\n      placement: this.placement,\n      sameWidth: this.sameWidth,\n      skidding: this.skidding,\n      strategy: this.strategy,\n    };\n  }\n\n  // render() function\n  // Always the last one in the class.\n  // ===================================\n\n  render() {\n    return (\n      <div\n        class=\"bq-panel\"\n        ref={(el) => (this.panel = el)}\n        aria-hidden={!this.open ? 'true' : 'false'}\n        hidden={!this.open}\n        part=\"panel\"\n      >\n        <slot />\n      </div>\n    );\n  }\n}\n"],"mappings":";;;;sFAAA,MAAMA,EAAa,mn8BACnB,MAAAC,EAAeD,E,MC4CFE,EAAOC,EAAA,MAAAD,UAAAE,E,kEAIVC,MACAC,WACAC,Q,qBAeiBC,SAAoB,EAGpBC,UAAwB,eAGTC,KAAiB,MAGhCC,UAAsB,MAGtBC,SAAoB,EAGpBC,SAAkC,QAM3D,gBAAAC,GACE,IAAKC,KAAKL,KAAM,CACdK,KAAKC,YACL,M,CAGFD,KAAKE,W,CAQP,YAAAC,GACEH,KAAKT,YAAYa,KAAK,IAAKJ,KAAKK,S,CAWlC,gBAAAC,GAEE,MAAMC,EAAgBP,KAAKQ,GAAGC,cAAcC,cAAc,uBAC1D,IAAKH,EAAe,OAEpBP,KAAKR,QAAU,CACbmB,sBAAuB,IAAMJ,EAAcI,wBAC3CC,eAAgBL,GAGlBP,KAAKT,WAAa,IAAIsB,EAAWb,KAAKR,QAASQ,KAAKV,MAAO,IAAKU,KAAKK,UACrEL,KAAKD,kB,CAGP,oBAAAe,GACEd,KAAKT,YAAYwB,S,CAkBX,SAAAb,GACNF,KAAKT,YAAYyB,Q,CAGX,eAAMf,GACZD,KAAKL,KAAO,K,CAGd,WAAYU,GACV,MAAO,CACLZ,SAAUO,KAAKP,SACfC,UAAWM,KAAKN,UAChBE,UAAWI,KAAKJ,UAChBC,SAAUG,KAAKH,SACfC,SAAUE,KAAKF,S,CAQnB,MAAAmB,GACE,OACEC,EAAA,OAAAC,IAAA,2CACEC,MAAM,WACNC,IAAMb,GAAQR,KAAKV,MAAQkB,EAAG,eAChBR,KAAKL,KAAO,OAAS,QACnC2B,QAAStB,KAAKL,KACd4B,KAAK,SAELL,EAAA,QAAAC,IAAA,6C","ignoreList":[]}