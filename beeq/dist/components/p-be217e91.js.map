{"version":3,"names":["beeqBasePath","DATA_BEEQ_ATTRIBUTE","DEFAULT_SVG_PATH","setBasePath","path","getBasePath","subpath","configScript","findConfigScript","fallbackScript","findFallbackScript","script","getAttribute","getScriptPath","formattedSubpath","replace","isClient","document","querySelector","src","substring","lastIndexOf","requests","Map","iconContent","fetchSvg","async","url","sanitize","isNil","fetch","window","has","get","response","ok","set","svgContent","text","validateContent","error","console","getSvgContent","req","svgTag","iconCssClass","div","createElement","innerHTML","svgElm","existingClasses","setAttribute","trim","removeAttribute","isValid","elm","nodeType","Node","ELEMENT_NODE","nodeName","toLowerCase","attribute","Array","from","attributes","isString","value","startsWith","childNode","children","bqIconCss","BqIconStyle0","BqIcon","proxyCustomElement","H","_svgContent","label","color","name","size","weight","undefined","handlePropsChange","this","loadIcon","handleWeightChange","includes","warn","REGULAR","isWeightedIcon","weightSuffix","iconName","svgLoaded","connectedCallback","setupIconComponent","componentWillLoad","getIconSource","SVG_EXTENSION","iconFileName","then","emit","render","styles","getColorCSSVariable","h","Host","key","style","class","part","role"],"sources":["../../packages/beeq/src/shared/utils/assetsPath.ts","../../packages/beeq/src/components/icon/helper/request.ts","../../packages/beeq/src/components/icon/scss/bq-icon.scss?tag=bq-icon&encapsulation=shadow","../../packages/beeq/src/components/icon/bq-icon.tsx"],"sourcesContent":["/**\n * Inspired by Shoelace's `getBasePath` and `setBasePath` functions.\n * https://github.com/shoelace-style/shoelace/blob/next/src/utilities/base-path.ts\n */\nimport { Env } from '@stencil/core';\n\nimport { isClient } from './isClient';\n\nlet beeqBasePath: string | undefined;\nconst DATA_BEEQ_ATTRIBUTE = 'data-beeq';\nconst DEFAULT_SVG_PATH = 'svg';\n\n/**\n * Sets the base path for the assets.\n * @param {string} path - The base path to set.\n */\nexport const setBasePath = (path: string): void => {\n  beeqBasePath = path;\n};\n\n/**\n * Gets the base path for the assets.\n * @param {string} subpath - An optional subpath to append to the base path.\n * @returns {string} The base path of the assets.\n */\nexport const getBasePath = (subpath: string = ''): string => {\n  if (!beeqBasePath) {\n    const configScript = findConfigScript();\n    const fallbackScript = configScript ? null : findFallbackScript();\n\n    const script = configScript || fallbackScript;\n    if (script) {\n      const path = configScript ? script.getAttribute(DATA_BEEQ_ATTRIBUTE) : getScriptPath(script);\n      setBasePath(`${path}/${DEFAULT_SVG_PATH}`);\n    } else {\n      // Fallback: use an environment variable (if set) or the default path\n      setBasePath(Env.BEEQ_ASSETS_BASE_PATH || `./${DEFAULT_SVG_PATH}`);\n    }\n  }\n\n  // Return the base path without a trailing slash. If one exists, append the subpath separated by a slash.\n  const formattedSubpath = subpath ? `/${subpath.replace(/^\\//, '')}` : '';\n  return beeqBasePath.replace(/\\/$/, '') + formattedSubpath;\n};\n\n/**\n * Finds the configuration script element.\n * @returns The configuration script element or null if not found.\n */\nconst findConfigScript = (): HTMLScriptElement | null => {\n  if (!isClient()) return null;\n\n  return document.querySelector(`script[${DATA_BEEQ_ATTRIBUTE}]`);\n};\n\n/**\n * Finds the fallback script element.\n * @returns The fallback script element or null if not found.\n */\nconst findFallbackScript = (): HTMLScriptElement | null => {\n  if (!isClient()) return null;\n\n  return document.querySelector(`script[src*=\"beeq\"]`);\n};\n\n/**\n * Gets the path of a script element.\n * @param {HTMLScriptElement} script - The script element.\n * @returns The path of the script element.\n */\nconst getScriptPath = (script: HTMLScriptElement): string => {\n  if (!isClient()) return '';\n\n  const src = script.getAttribute('src');\n  return src ? src.substring(0, src.lastIndexOf('/')) : '';\n};\n","/* -------------------------------------------------------------------------- */\n/*                             Icon request helper                            */\n/* -------------------------------------------------------------------------- */\n\nimport { isNil, isString } from '../../../shared/utils';\n\nconst requests = new Map<string, Promise<unknown>>();\nexport const iconContent = new Map<string, string>();\n\n/**\n * Fetches SVG content from a given URL and optionally sanitizes it.\n * @param {string} url - The URL to fetch the SVG from.\n * @param {boolean} sanitize - Whether to sanitize the SVG content.\n * @returns {Promise<unknown>} - A promise that resolves to the SVG content.\n */\nconst fetchSvg = async (url: string, sanitize: boolean): Promise<unknown> => {\n  if (isNil(url) || typeof fetch === 'undefined' || typeof window === 'undefined') {\n    return;\n  }\n\n  if (requests.has(url)) return requests.get(url);\n\n  try {\n    const response = await fetch(url);\n\n    if (!response.ok) {\n      iconContent.set(url, '');\n      return;\n    }\n\n    let svgContent = await response.text();\n\n    if (sanitize !== false) {\n      svgContent = validateContent(svgContent);\n    }\n\n    iconContent.set(url, svgContent);\n    return svgContent;\n  } catch (error) {\n    console.error(`[BqIcon] Failed to fetch SVG from ${url}:`, error);\n    iconContent.set(url, '');\n  }\n};\n\n/**\n * Retrieves the SVG content for a given URL, fetching and caching it if necessary.\n * @param {string} url - The URL to fetch the SVG from.\n * @param {boolean} sanitize - Whether to sanitize the SVG content.\n * @returns {Promise<unknown>} - A promise that resolves to the SVG content.\n */\nexport const getSvgContent = async (url: string, sanitize: boolean): Promise<unknown> => {\n  if (isNil(url)) return;\n\n  let req = requests.get(url);\n\n  if (isNil(req)) {\n    req = fetchSvg(url, sanitize);\n    requests.set(url, req);\n  }\n  return req;\n};\n\n/**\n * Validates and sanitizes the SVG content.\n * @param {string} svgContent - The SVG content to validate.\n * @returns {string} - The sanitized SVG content.\n */\nexport const validateContent = (svgContent: string): string => {\n  if (typeof window === 'undefined' || isNil(svgContent)) return '';\n\n  const svgTag = 'svg';\n  const iconCssClass = 'bq-icon__svg';\n  const div = document.createElement('div');\n  div.innerHTML = svgContent;\n\n  const svgElm = div.querySelector(svgTag);\n\n  if (svgElm) {\n    const existingClasses = svgElm.getAttribute('class') || '';\n    svgElm.setAttribute('class', `${existingClasses} ${iconCssClass}`.trim());\n    svgElm.setAttribute('part', svgTag);\n    svgElm.removeAttribute('height');\n    svgElm.removeAttribute('width');\n\n    if (isValid(svgElm)) {\n      return div.innerHTML;\n    }\n  }\n\n  return '';\n};\n\n/**\n * Checks if an HTML element is valid (i.e., does not contain scripts or event handlers).\n * @param {HTMLElement} elm - The element to check.\n * @returns {boolean} - True if the element is valid, false otherwise.\n */\nexport const isValid = (elm: Element): boolean => {\n  if (!elm) return false;\n  if (elm.nodeType !== Node.ELEMENT_NODE) return false;\n  if (elm.nodeName.toLowerCase() === 'script') return false;\n\n  for (const attribute of Array.from(elm.attributes)) {\n    if (isString(attribute.value) && attribute.value.toLowerCase().startsWith('on')) {\n      return false;\n    }\n  }\n\n  for (const childNode of Array.from(elm.children) as HTMLElement[]) {\n    if (!isValid(childNode)) return false;\n  }\n\n  return true;\n};\n","/* -------------------------------------------------------------------------- */\n/*                                 Icon styles                                */\n/* -------------------------------------------------------------------------- */\n\n@import './bq-icon.variables';\n\n:host {\n  @apply inline-block;\n}\n\n/**\n * This class is added on packages/beeq/src/components/icon/helper/request.ts\n * See lines 42 and 58 for details.\n */\n.bq-icon__svg {\n  @apply scale-x-[--bq-icon--direction];\n}\n","import { Component, Event, EventEmitter, h, Host, Prop, State, Watch } from '@stencil/core';\n\nimport { TIconWeight } from './bq-icon.types';\nimport { getSvgContent, iconContent } from './helper/request';\nimport { getBasePath, getColorCSSVariable, isNil } from '../../shared/utils';\n\n/**\n * The Icon component is an image that provides a visual representation of an object, action, or concept displayed on the screen.\n * It is a small graphical element that is used to enhance the user interface and improve user experience.\n *\n * @example How to use it\n * ```html\n * <bq-icon color=\"text--brand\" name=\"bell-ringing\" size=\"24\"></bq-icon>\n * ```\n *\n * @documentation https://www.beeq.design/3d466e231/p/675fad-icon\n * @status stable\n *\n * @attr {string} color - Set the stroke color of the SVG. The value should be a valid value of the palette color.\n * @attr {string} label - Label for the icon, used for accessibility.\n * @attr {string} name - Icon name to load. Please check all available icons [here](https://phosphoricons.com/).\n * @attr {string | number} size - Set the size of the SVG.\n * @attr {string} src - Set the source of the SVG. If the source is set, the name property will be ignored.\n *\n * @event svgLoaded - Callback handler to be called when the SVG has loaded.\n *\n * @part base - The component's internal wrapper that holds the icon SVG content.\n * @part svg - The `<svg>` tag element inside the component.\n *\n * @cssprop --bq-icon--color - The stroke color of the SVG.\n * @cssprop --bq-icon--size - The size of the SVG.\n */\n@Component({\n  assetsDirs: ['svg'],\n  tag: 'bq-icon',\n  styleUrl: './scss/bq-icon.scss',\n  shadow: true,\n})\nexport class BqIcon {\n  // Own Properties\n  // ====================\n\n  // Reference to host HTML element\n  // ===================================\n\n  // State() variables\n  // Inlined decorator, alphabetical order\n  // =======================================\n\n  @State() private _svgContent: string;\n\n  // Public Property API\n  // ========================\n\n  /** Label for the icon, used for accessibility */\n  @Prop({ reflect: true }) label?: string;\n\n  /** Set the stroke color of the SVG. The value should be a valid value of the palette color */\n  @Prop({ reflect: true }) color?: string;\n\n  /** Icon name to load. Please check all available icons [here](https://phosphoricons.com/) */\n  @Prop({ reflect: true }) name?: string;\n\n  /** Set the size of the SVG */\n  @Prop({ reflect: true }) size?: string | number = 24;\n\n  /** Set the source of the SVG. If the source is set, the name property will be ignored */\n  @Prop({ reflect: true }) src?: string;\n\n  /** @deprecated It set the icon weight/style */\n  @Prop({ reflect: true }) weight?: TIconWeight = undefined;\n\n  // Prop lifecycle events\n  // =======================\n\n  @Watch('color')\n  @Watch('name')\n  @Watch('size')\n  handlePropsChange() {\n    this.loadIcon(this.name);\n  }\n\n  /**\n   * !TO BE REMOVED: Delete this `@Watch()` once the deprecated `weight` property is removed\n   * We need to maintain retro-compatibility until the next major release\n   */\n  @Watch('weight')\n  handleWeightChange() {\n    if (this.name.includes(this.weight)) return;\n\n    console.warn(\n      `❗️ [bq-icon]: the 'weight' property is deprecated, you should add the weight to the icon name.\\n\n       For example, '<bq-icon name=\"bell-fill\"></bq-icon>' instead of '<bq-icon name=\"bell\" weight=\"fill\"></bq-icon>'`,\n    );\n    // Check if the icon is weighted. An icon is considered weighted if its weight is not 'regular' and ENV_SVG_PATH is not set.\n    // Eg: if the weight is 'bold' and ENV_SVG_PATH is not set, isWeightedIcon will be true.\n    const REGULAR = 'regular';\n    const isWeightedIcon = !isNil(this.weight) && this.weight !== REGULAR;\n    // If the icon is weighted, append the weight to the icon name. Otherwise, append nothing.\n    // Eg: if isWeightedIcon is true and the weight is 'bold', weightSuffix will be '-bold'.\n    const weightSuffix = isWeightedIcon ? `-${this.weight}` : '';\n    // Construct the icon name by appending the weight suffix (if any) and the file extension.\n    // Eg: if the name is 'my-icon' and weightSuffix is '-bold', iconName will be 'my-icon-bold.svg'.\n    const iconName = `${this.name}${weightSuffix}`;\n    this.loadIcon(iconName);\n  }\n\n  // Events section\n  // Requires JSDocs for public API documentation\n  // ==============================================\n\n  /** Callback handler to be called when the SVG has loaded */\n  @Event() svgLoaded: EventEmitter;\n\n  // Component lifecycle events\n  // Ordered by their natural call order\n  // =====================================\n\n  connectedCallback() {\n    this.setupIconComponent();\n  }\n\n  componentWillLoad() {\n    this.setupIconComponent();\n  }\n\n  // Listeners\n  // ==============\n\n  // Public methods API\n  // These methods are exposed on the host element.\n  // Always use two lines.\n  // Public Methods must be async.\n  // Requires JSDocs for public API documentation.\n  // ===============================================\n\n  // Local methods\n  // Internal business logic.\n  // These methods cannot be called from the host element.\n  // =======================================================\n\n  private setupIconComponent = () => {\n    this.loadIcon(this.name);\n    // !TO BE REMOVED: Delete this once the deprecated `weight` property is removed\n    if (!isNil(this.weight)) this.handleWeightChange();\n  };\n\n  private getIconSource = (name: string) => {\n    if (!this.name && !this.src) return;\n    // Return the src if it is set\n    if (this.src) return this.src;\n\n    const SVG_EXTENSION = '.svg';\n    const iconFileName = `${name}${SVG_EXTENSION}`;\n\n    return getBasePath(iconFileName);\n  };\n\n  private loadIcon = (name: string) => {\n    const url = this.getIconSource(name);\n    getSvgContent(url, true).then(() => {\n      this._svgContent = iconContent.get(url);\n      this.svgLoaded.emit(this._svgContent);\n    });\n  };\n\n  // render() function\n  // Always the last one in the class.\n  // ===================================\n\n  render() {\n    const styles = {\n      ...(this.color && { '--bq-icon--color': getColorCSSVariable(this.color) }),\n      ...(this.size && { '--bq-icon--size': `${this.size}px` }),\n    };\n\n    return (\n      <Host style={styles}>\n        <div\n          aria-label={this.label ?? `${this.name} icon`}\n          class={`flex text-[color:--bq-icon--color] ${(this.size && 'bs-[--bq-icon--size] is-[--bq-icon--size]') || ''}`}\n          innerHTML={this._svgContent}\n          part=\"base\"\n          role=\"img\"\n        />\n      </Host>\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]}