{"version":3,"names":["bqTextareaCss","BqTextareaStyle0","BqTextarea","proxyCustomElement","H","debounceBqInput","fallbackId","helperTextElem","labelElem","textarea","internals","hasHelperText","hasLabel","autocapitalize","autocomplete","autocorrect","autofocus","autoGrow","debounceTime","disabled","disableResize","form","formValidationMessage","maxlength","name","placeholder","readonly","required","rows","spellcheck","validationStatus","value","wrap","handleValueChange","this","length","substring","handleRequiredPropChange","updateFormValidity","bqBlur","bqChange","bqClear","bqFocus","bqInput","componentDidLoad","formAssociatedCallback","setFormValue","formResetCallback","clearSelection","numberOfCharacters","handleBlur","emit","el","handleFocus","handleChange","ev","isHTMLElement","target","handleInput","cancel","debounce","autoResize","inputElem","style","height","scrollHeight","handleLabelSlotChange","hasSlotContent","handleHelperTextSlotChange","isNil","undefined","states","clear","trim","add","setValidity","valueMissing","render","h","key","class","part","htmlFor","ref","label","onSlotchange","id","maxLength","readOnly","elem","onBlur","onChange","onFocus","onInput","span"],"sources":["../../packages/beeq/src/components/textarea/scss/bq-textarea.scss?tag=bq-textarea&encapsulation=shadow","../../packages/beeq/src/components/textarea/bq-textarea.tsx"],"sourcesContent":["/* -------------------------------------------------------------------------- */\n/*                                Textarea styles                */\n/* -------------------------------------------------------------------------- */\n\n@import './bq-textarea.variables';\n\n:host {\n  @apply block is-full;\n}\n\n/* -------------------------------------------------------------------------- */\n/*                                    Label                                   */\n/* -------------------------------------------------------------------------- */\n\n.bq-textarea__label {\n  @apply text-[length:--bq-textarea--label-text-size] text-[color:--bq-textarea--label-text-color] m-be-[--bq-textarea--label-margin-bottom];\n}\n\n/* -------------------------------------------------------------------------- */\n/*                        Native HTML Textarea control                        */\n/* -------------------------------------------------------------------------- */\n\n.bq-textarea__input {\n  @apply flex-auto resize-y bg-[--bq-textarea--background-color] bs-[inherit];\n  // Border\n  @apply rounded-[--bq-textarea--border-radius] border-[length:--bq-textarea--border-width] border-[color:--bq-textarea--border-color];\n  // Padding\n  @apply pe-[--bq-textarea--padding-end] ps-[--bq-textarea--padding-start] p-b-[--bq-textarea--paddingY];\n  // Text\n  @apply text-[length:--bq-textarea--text-size] text-[color:--bq-textarea--text-color] placeholder:text-[color:--bq-textarea--text-placeholder-color];\n  // Transition\n  @apply transition-colors ease-in-out;\n  // Hover\n  @apply [&:not([disabled]):not(:focus-within)]:hover:border-hover-brand;\n  // Disabled\n  @apply disabled:cursor-not-allowed disabled:opacity-60;\n  // Focus\n  &:not([disabled]):focus-within {\n    --bq-ring-width: 1px;\n    --bq-ring-offset-width: 0;\n    --bq-ring-color-focus: var(--bq-textarea--border-color-focus);\n\n    @apply focus border-[color:--bq-ring-color-focus];\n  }\n}\n\n/* ------------------------------- Validations ------------------------------- */\n\n.bq-textarea__input.validation-error {\n  @apply border-danger [&:not(.disabled):not(:focus-within)]:hover:border-hover-danger;\n\n  &:not(.disabled):focus-within {\n    --bq-ring-color-focus: theme(stroke.danger);\n\n    @apply border-active-danger;\n  }\n}\n\n.bq-textarea__input.validation-success {\n  @apply border-success [&:not(.disabled):not(:focus-within)]:hover:border-hover-success;\n\n  &:not(.disabled):focus-within {\n    --bq-ring-color-focus: theme(stroke.success);\n\n    @apply border-active-success;\n  }\n}\n\n.bq-textarea__input.validation-warning {\n  @apply border-warning [&:not(.disabled):not(:focus-within)]:hover:border-hover-warning;\n\n  &:not(.disabled):focus-within {\n    --bq-ring-color-focus: theme(stroke.warning);\n\n    @apply border-active-warning;\n  }\n}\n\n/* -------------------------------------------------------------------------- */\n/*                                 Helper text                                */\n/* -------------------------------------------------------------------------- */\n\n.bq-textarea__helper {\n  @apply text-[length:--bq-textarea--helper-text-size] text-[color:--bq-textarea--helper-text-color] m-bs-[--bq-textarea--helper-margin-top];\n}\n\n/* ------------------------------- Validations ------------------------------ */\n\n.bq-textarea__helper.validation-error {\n  @apply text-danger;\n}\n\n.bq-textarea__helper.validation-success {\n  @apply text-success;\n}\n\n.bq-textarea__helper.validation-warning {\n  @apply text-warning;\n}\n\n/* ----------------------------- Helper counter ----------------------------- */\n\n/** Apply a disabled text color style to the textarea counter when the validation is none. */\n.bq-textarea__helper[class~='validation-none'] {\n  .bq-textarea__helper--counter {\n    @apply opacity-60;\n  }\n}\n","import { AttachInternals, Component, Element, Event, EventEmitter, h, Prop, State, Watch } from '@stencil/core';\n\nimport { TTextareaAutoCapitalize, TTextareaWrap } from './bq-textarea.types';\nimport { debounce, hasSlotContent, isHTMLElement, isNil, TDebounce } from '../../shared/utils';\nimport { TInputValidation } from '../input/bq-input.types';\n\n/**\n * The Textarea component is a multi-line text input control that is often used in a form to collect user inputs like comments or reviews.\n *\n * @example How to use it\n * ```html\n * <bq-textarea maxlength=\"0\" name=\"textarea\" placeholder=\"Placeholder...\" rows=\"5\">\n *   <label slot=\"label\">Label</label>\n *   <span class=\"flex items-center gap-xs\" slot=\"helper-text\">\n *     <bq-icon name=\"star\"></bq-icon>\n *     Helper text\n *   </span>\n * </bq-textarea>\n * ```\n *\n * @documentation https://www.beeq.design/3d466e231/p/16792c-textarea\n * @status stable\n *\n * @attr {string} autocapitalize - Controls whether or not the textarea field should be capitalized and how.\n * @attr {string} autocomplete - Specifies whether or not the textarea field should have autocomplete enabled.\n * @attr {string} autocorrect - Controls whether or not the textarea field should have autocorrect enabled.\n * @attr {boolean} autofocus - If `true`, the textarea will be focused on component render.\n * @attr {boolean} auto-grow - If `true`, the textarea will automatically grow and shrink to fit its contents.\n * @attr {number} debounce-time - The amount of time, in milliseconds, to wait before emitting the `bqInput` event after the textarea value changes.\n * @attr {boolean} disabled - If `true`, the user cannot interact with the textarea.\n * @attr {boolean} disable-resize - If `true`, it will block the user's ability to resize the textarea.\n * @attr {string} form - The ID of the form that the textarea field belongs to.\n * @attr {string} form-validation-message - The native form validation message.\n * @attr {number} maxlength - The maximum number of characters that can be entered into the textarea (`0`: no limit).\n * @attr {string} name - The name of the textarea element.\n * @attr {string} placeholder - The placeholder text to show when there is no value.\n * @attr {boolean} readonly - If `true`, the textarea field cannot be modified.\n * @attr {boolean} required - Indicates whether or not the textarea field is required to be filled out before submitting the form.\n * @attr {number} rows - The number of visible text lines for the control. It must be a positive integer.\n * @attr {boolean} spellcheck - If `true`, the textarea content may be checked for spelling errors.\n * @attr {\"error\" | \"none\" | \"success\" | \"warning\"} validation-status - The validation status of the textarea.\n * @attr {string} value - The value of the textarea. It can be used to reset the textarea to a previous value.\n * @attr {\"soft\" | \"hard\"} wrap - Specifies how the text in a text area is to be wrapped when submitted in a form.\n *\n * @event bqBlur - Handler to be called when the textarea loses focus.\n * @event bqChange - Handler to be called when the textarea value has changed and the textarea loses focus.\n * @event bqClear - Handler to be called when the textarea value has been cleared.\n * @event bqFocus - Handler to be called when the textarea has received focus.\n * @event bqInput - Handler to be called when the textarea value changes.\n *\n * @slot label - The textarea label.\n * @slot helper-text - The helper text.\n *\n * @part base - The component's base wrapper.\n * @part input - The textarea element.\n * @part label - The textarea label.\n * @part helper-info - The helper info container.\n * @part helper-text - The helper text.\n * @part helper-counter - The helper counter.\n *\n * @cssprop --bq-textarea--background-color - Textarea background color\n * @cssprop --bq-textarea--border-color - Textarea border color\n * @cssprop --bq-textarea--border-color-focus - Textarea border color on focus\n * @cssprop --bq-textarea--border-radius - Textarea border radius\n * @cssprop --bq-textarea--border-width - Textarea border width\n * @cssprop --bq-textarea--border-style - Textarea border style\n * @cssprop --bq-textarea--helper-margin-top - Textarea helper text margin top\n * @cssprop --bq-textarea--helper-text-color - Textarea helper text color\n * @cssprop --bq-textarea--helper-text-size - Textarea helper text size\n * @cssprop --bq-textarea--label-margin-bottom - Textarea label margin bottom\n * @cssprop --bq-textarea--label-text-color - Textarea label text color\n * @cssprop --bq-textarea--label-text-size - Textarea label text size\n * @cssprop --bq-textarea--paddingY - Textarea padding top and bottom\n * @cssprop --bq-textarea--padding-start - Textarea padding start\n * @cssprop --bq-textarea--padding-end - Textarea padding end\n * @cssprop --bq-textarea--text-color - Textarea text color\n * @cssprop --bq-textarea--text-size - Textarea text size\n * @cssprop --bq-textarea--text-placeholder-color - Textarea placeholder text color\n */\n@Component({\n  tag: 'bq-textarea',\n  styleUrl: './scss/bq-textarea.scss',\n  formAssociated: true,\n  shadow: {\n    delegatesFocus: true,\n  },\n})\nexport class BqTextarea {\n  // Own Properties\n  // ====================\n\n  private debounceBqInput: TDebounce<void>;\n  private fallbackId = 'textarea';\n\n  private helperTextElem?: HTMLElement;\n  private labelElem?: HTMLLabelElement;\n  private textarea: HTMLTextAreaElement;\n\n  // Reference to host HTML element\n  // ===================================\n\n  @AttachInternals() internals!: ElementInternals;\n  @Element() el!: HTMLBqTextareaElement;\n\n  // State() variables\n  // Inlined decorator, alphabetical order\n  // =======================================\n\n  @State() private hasHelperText = false;\n  @State() private hasLabel = false;\n\n  // Public Property API\n  // ========================\n\n  /**\n   * Controls whether or not the textarea field should be capitalized and how.\n   * Possible values are 'off', 'none', 'on', 'sentences', 'words', and 'characters'.\n   * See: https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize\n   */\n  @Prop({ reflect: true }) autocapitalize: TTextareaAutoCapitalize = 'off';\n\n  /**\n   * Specifies whether or not the textarea field should have autocomplete enabled.\n   * See: https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete#values\n   */\n  @Prop({ reflect: true }) autocomplete: string = 'off';\n\n  /**\n   * Controls whether or not the textarea field should have autocorrect enabled.\n   * Possible values are 'on' and 'off'.\n   */\n  @Prop({ reflect: true }) autocorrect: 'on' | 'off' = 'off';\n\n  /** If true, the textarea will be focused on component render */\n  @Prop({ reflect: true }) autofocus: boolean;\n\n  /**\n   * If `true`, the textarea will automatically grow and shrink to fit its contents.\n   * If `false`, the textarea will have a fixed height specified by the `rows` property.\n   */\n  @Prop({ reflect: true }) autoGrow: boolean = false;\n\n  /**\n   * The amount of time, in milliseconds, to wait before emitting the `bqInput` event after the textarea value changes.\n   * A value of 0 means no debouncing will occur.\n   */\n  @Prop({ reflect: true, mutable: true }) debounceTime? = 0;\n\n  /** If `true`, the user cannot interact with the textarea. */\n  @Prop({ reflect: true }) disabled: boolean = false;\n\n  /** If `true`, it will block the user's ability to resize the textarea. */\n  @Prop({ reflect: true }) disableResize?: boolean = false;\n\n  /** The ID of the form that the textarea field belongs to. */\n  @Prop({ reflect: true }) form?: string;\n\n  /** The native form validation message */\n  @Prop({ mutable: true }) formValidationMessage?: string;\n\n  /**\n   * The maximum number of characters that can be entered into the textarea (`0`: no limit).\n   * When enabled, a character counter will be shown underneath the textarea.\n   */\n  @Prop({ reflect: true }) maxlength: number;\n\n  /** The name of the textarea element. */\n  @Prop({ reflect: true }) name!: string;\n\n  /** The placeholder text to show when there is no value. */\n  @Prop({ reflect: true }) placeholder!: string;\n\n  /** If true, the textarea field cannot be modified. */\n  @Prop({ reflect: true }) readonly?: boolean = false;\n\n  /** Indicates whether or not the textarea field is required to be filled out before submitting the form. */\n  @Prop({ reflect: true }) required?: boolean = false;\n\n  /** The number of visible text lines for the control. It must be a positive integer. */\n  @Prop({ reflect: true }) rows: number = 5;\n\n  /** If true, the textarea content may be checked for spelling errors. */\n  @Prop({ reflect: true }) spellcheck: boolean = false;\n  /**\n   * The validation status of the textarea.\n   *\n   * @remarks\n   * This property is used to indicate the validation status of the textarea. It can be set to one of the following values:\n   * - `'none'`: No validation status is set.\n   * - `'error'`: The textarea has a validation error.\n   * - `'warning'`: The textarea has a validation warning.\n   * - `'success'`: The textarea has passed validation.\n   */\n  @Prop({ reflect: true, mutable: true }) validationStatus: TInputValidation = 'none';\n\n  /** The value of the textarea. It can be used to reset the textarea to a previous value. */\n  @Prop({ mutable: true }) value: string;\n\n  /** Specifies how the text in a text area is to be wrapped when submitted in a form */\n  @Prop({ reflect: true }) wrap: TTextareaWrap = 'soft';\n\n  // Prop lifecycle events\n  // =======================\n\n  @Watch('value')\n  handleValueChange() {\n    if (!this.textarea) return;\n    if (!this.maxlength || this.value?.length < this.maxlength) return;\n    // If the value is longer than the maxlength, we need to truncate it\n    this.value = this.value?.substring(0, this.maxlength);\n    this.textarea.value = this.value ?? '';\n  }\n\n  @Watch('required')\n  handleRequiredPropChange() {\n    this.updateFormValidity();\n  }\n\n  // Events section\n  // Requires JSDocs for public API documentation\n  // ==============================================\n\n  /** Callback handler emitted when the textarea loses focus */\n  @Event() bqBlur!: EventEmitter<HTMLBqTextareaElement>;\n\n  /**\n   * Callback handler emitted when the textarea value has changed and the textarea loses focus.\n   * This handler is called whenever the user finishes typing or pasting text into the textarea field and then clicks outside of the textarea field.\n   */\n  @Event() bqChange!: EventEmitter<{ value: string; el: HTMLBqTextareaElement }>;\n\n  /** Callback handler emitted when the textarea value has been cleared */\n  @Event() bqClear!: EventEmitter<HTMLBqTextareaElement>;\n\n  /** Callback handler emitted when the textarea has received focus */\n  @Event() bqFocus!: EventEmitter<HTMLBqTextareaElement>;\n\n  /**\n   * Callback handler emitted when the textarea value changes.\n   * This handler is called whenever the user types or pastes text into the textarea field.\n   */\n  @Event() bqInput!: EventEmitter<{ value: string; el: HTMLBqTextareaElement }>;\n\n  // Component lifecycle events\n  // Ordered by their natural call order\n  // =====================================\n\n  componentDidLoad() {\n    this.handleValueChange();\n  }\n\n  formAssociatedCallback() {\n    this.setFormValue(this.value);\n    this.updateFormValidity();\n  }\n\n  formResetCallback() {\n    this.clearSelection();\n    // Reset the form validity state\n    this.setFormValue();\n    this.updateFormValidity();\n  }\n\n  // Listeners\n  // ==============\n\n  // Public methods API\n  // These methods are exposed on the host element.\n  // Always use two lines.\n  // Public Methods must be async.\n  // Requires JSDocs for public API documentation.\n  // ===============================================\n\n  // Local methods\n  // Internal business logic.\n  // These methods cannot be called from the host element.\n  // =======================================================\n\n  private get numberOfCharacters() {\n    if (!this.maxlength || !this.textarea) return 0;\n\n    return this.value?.length;\n  }\n\n  private handleBlur = () => {\n    if (this.disabled) return;\n\n    this.bqBlur.emit(this.el);\n  };\n\n  private handleFocus = () => {\n    if (this.disabled) return;\n\n    this.bqFocus.emit(this.el);\n  };\n\n  private handleChange = (ev: Event) => {\n    if (this.disabled) return;\n\n    if (!isHTMLElement(ev.target, 'textarea')) return;\n    this.value = ev.target.value;\n    this.setFormValue(this.value);\n    this.updateFormValidity();\n\n    this.bqChange.emit({ value: this.value, el: this.el });\n  };\n\n  private handleInput = (ev: Event) => {\n    if (this.disabled) return;\n\n    this.debounceBqInput?.cancel();\n\n    if (!isHTMLElement(ev.target, 'textarea')) return;\n    this.value = ev.target.value;\n\n    this.debounceBqInput = debounce(() => {\n      this.bqInput.emit({ value: this.value, el: this.el });\n    }, this.debounceTime);\n    this.debounceBqInput();\n\n    this.autoResize();\n  };\n\n  private autoResize = () => {\n    if (!this.autoGrow) return;\n\n    const inputElem = this.textarea;\n    if (!inputElem) return;\n\n    inputElem.style.height = 'auto';\n    inputElem.style.height = `${inputElem.scrollHeight}px`;\n  };\n\n  private handleLabelSlotChange = () => {\n    this.hasLabel = hasSlotContent(this.labelElem);\n  };\n\n  private handleHelperTextSlotChange = () => {\n    this.hasHelperText = hasSlotContent(this.helperTextElem);\n  };\n\n  private setFormValue = (value?: string) => {\n    this.internals.setFormValue(!isNil(value) ? `${value}` : undefined);\n  };\n\n  private updateFormValidity = () => {\n    const { formValidationMessage, internals, required, value, textarea } = this;\n\n    // Clear the validity state\n    internals?.states.clear();\n\n    if (required && (!value || value.trim() === '')) {\n      // Set validity state to invalid\n      internals?.states.add('invalid');\n      internals?.setValidity({ valueMissing: true }, formValidationMessage, textarea);\n      return;\n    }\n\n    // Set validity state to valid if textarea has value or is not required\n    internals?.states.add('valid');\n    internals?.setValidity({});\n  };\n\n  private clearSelection = () => {\n    this.value = '';\n    this.textarea.value = this.value;\n  };\n\n  // render() function\n  // Always the last one in the class.\n  // ===================================\n\n  render() {\n    return (\n      <div class=\"bq-textarea flex flex-auto flex-col\" part=\"base\">\n        <label\n          class={{ 'bq-textarea__label': true, '!hidden': !this.hasLabel }}\n          htmlFor={this.name ?? this.fallbackId}\n          aria-label={this.name ?? this.fallbackId}\n          ref={(label: HTMLLabelElement) => (this.labelElem = label)}\n          part=\"label\"\n        >\n          <slot name=\"label\" onSlotchange={this.handleLabelSlotChange} />\n        </label>\n        <textarea\n          id={this.name ?? this.fallbackId}\n          class={{\n            'bq-textarea__input': true,\n            'resize-none': this.disableResize,\n            [`validation-${this.validationStatus}`]: true,\n          }}\n          autocapitalize={this.autocapitalize}\n          autocomplete={this.autocomplete}\n          autocorrect={this.autocorrect}\n          autofocus={this.autofocus}\n          disabled={this.disabled}\n          form={this.form}\n          maxLength={this.maxlength > 0 ? this.maxlength : undefined}\n          name={this.name}\n          placeholder={this.placeholder}\n          readOnly={this.readonly}\n          required={this.required}\n          rows={this.rows}\n          spellcheck={this.spellcheck}\n          wrap={this.wrap}\n          ref={(elem: HTMLTextAreaElement) => (this.textarea = elem)}\n          onBlur={this.handleBlur}\n          onChange={this.handleChange}\n          onFocus={this.handleFocus}\n          onInput={this.handleInput}\n          part=\"input\"\n        >\n          {this.value}\n        </textarea>\n        <div\n          class={{\n            'bq-textarea__helper flex items-center justify-between': true,\n            [`validation-${this.validationStatus}`]: true,\n            '!hidden': !this.hasHelperText && !this.maxlength,\n          }}\n          part=\"helper-info\"\n        >\n          <span\n            class=\"bq-textarea__helper--text\"\n            ref={(span: HTMLElement) => (this.helperTextElem = span)}\n            part=\"helper-text\"\n          >\n            <slot name=\"helper-text\" onSlotchange={this.handleHelperTextSlotChange} />\n          </span>\n          <span\n            class={{ 'bq-textarea__helper--counter [fontVariant:tabular-nums]': true, '!hidden': !this.maxlength }}\n            part=\"helper-counter\"\n          >\n            {this.numberOfCharacters ?? 0}/{this.maxlength}\n          </span>\n        </div>\n      </div>\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]}