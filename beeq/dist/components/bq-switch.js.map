{"file":"bq-switch.js","mappings":"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","names":["BqSwitch"],"sources":["../../packages/beeq/src/components/switch/scss/bq-switch.scss?tag=bq-switch&encapsulation=shadow","../../packages/beeq/src/components/switch/bq-switch.tsx"],"sourcesContent":["/* -------------------------------------------------------------------------- */\n/*                                Switch styles                               */\n/* -------------------------------------------------------------------------- */\n\n@import './bq-switch.variables';\n\n:host {\n  @apply inline-block;\n}\n\n:host(.full-width) {\n  @apply is-full;\n}\n\n.bq-switch {\n  @apply flex cursor-pointer select-none items-center rounded-s transition-colors duration-300 p-b-2 p-i-2;\n\n  justify-content: var(--bq-switch--justify-content);\n\n  // Display background on hover (if enabled)\n  &.has-background:not(.is-disabled):hover {\n    @apply bg-hover-ui-primary;\n  }\n\n  &.is-disabled {\n    @apply cursor-not-allowed opacity-60;\n  }\n}\n\n.bq-switch--input:not(:disabled):focus,\n.bq-switch--input:not(:disabled):focus-visible {\n  ~ .bq-switch--control {\n    @apply focus;\n  }\n}\n\n.bq-switch--control__dot {\n  @apply absolute start-xs2 rounded-full bg-ui-primary bs-[--bq-switch--dot-size] is-[--bq-switch--dot-size];\n  @apply group-[&.is-checked]:start-[calc(100%_-_var(--bq-switch--dot-size)_-_var(--bq-spacing-xs2))] group-[&.is-checked]:bg-[--bq-icon--alt];\n  @apply transition-all duration-300;\n}\n\n.bq-switch--control__icon {\n  --bq-icon--size: var(--bq-switch--dot-size) !important;\n\n  &::part(base) {\n    @apply flex;\n  }\n}\n","import {\n  AttachInternals,\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Method,\n  Prop,\n  State,\n  Watch,\n} from '@stencil/core';\n\nimport { TSwitchInnerLabel, TSwitchJustifyContent } from './bq-switch.types';\nimport { getTextContent, isNil } from '../../shared/utils';\n\n/**\n * Toggle switches are digital on/off switches.\n * They should provide immediate results, giving users the freedom to control their preferences as needed.\n *\n * @example How to use it\n * ```html\n * <bq-switch inner-label=\"default\" justify-content=\"start\" name=\"bq-switch\" value=\"Switch value\">\n *   Toggle me!\n * </bq-switch>\n * ```\n *\n * @documentation https://www.beeq.design/3d466e231/p/49d9c9-switch\n * @status stable\n *\n * @dependency bq-icon\n *\n * @attr {boolean} background-on-hover - If `true`, a background will be displayed on hover\n * @attr {boolean} checked - It indicates whether if the switch is `ON` by default (when the page loads)\n * @attr {boolean} disabled - If `true`, the switch control will be disabled and no interaction will be allowed\n * @attr {string} form-validation-message - The native form validation message\n * @attr {boolean} full-width - If `true`, the component will take the full width space available on the parent container\n * @attr {\"default\" | \"icon\"} inner-label - It indicates how to to display the on/off marks inside the control, with icons or none (default)\n * @attr {\"start\" | \"end\" | \"center\" | \"space-between\" | \"space-around\" | \"space-evenly\"} justify-content - It defines how to distribute the space between and around the control and the label text\n * @attr {string} name - Name of the form control. Submitted with the form as part of a name/value pair\n * @attr {boolean} required - If `true`, it will indicate that the user must switch `ON` the element before the owning form can be submitted\n * @attr {boolean} reverse-order - If `true`, the order of the control and the label text will be changed\n * @attr {string} value - The input control's value, submitted as a name/value pair with form data\n *\n * @event bqChange - Handler to be called when the switch state changes\n * @event bqFocus - Handler to be called when the switch gets focus\n * @event bqBlur - Handler to be called when the switch loses focus\n *\n * @slot - The switch label text\n *\n * @part base - HTML `<label>` root container\n * @part control - HTML `<div>` element for the custom control\n * @part dot - HTML `<div>` element that acts as changing dot\n * @part icon-off - HTMLBqIcon `<pk-icon>` element used as the `OFF` mark inner label\n * @part icon-on - HTMLBqIcon `<pk-icon>` element used as the `ON` mark inner label\n * @part label - HTML `<span>` element that holds the label text\n *\n * @cssprop --bq-switch--height - Switch height\n * @cssprop --bq-switch--justify-content - Switch justify content\n * @cssprop --bq-switch--width - Switch width\n * @cssprop --bq-switch--dot-size - Switch dot size\n */\n@Component({\n  tag: 'bq-switch',\n  styleUrl: './scss/bq-switch.scss',\n  formAssociated: true,\n  shadow: {\n    delegatesFocus: true,\n  },\n})\nexport class BqSwitch {\n  // Own Properties\n  // ====================\n\n  private labelElem: HTMLSpanElement;\n  private inputElem: HTMLInputElement;\n  private prevCheckedValue: boolean;\n\n  // Reference to host HTML element\n  // ===================================\n\n  @AttachInternals() internals!: ElementInternals;\n  @Element() el!: HTMLBqSwitchElement;\n\n  // State() variables\n  // Inlined decorator, alphabetical order\n  // =======================================\n\n  @State() hasLabel = false;\n\n  // Public Property API\n  // ========================\n\n  /** If true, a background will be displayed on hover */\n  @Prop({ reflect: true }) backgroundOnHover?: boolean = false;\n\n  /** It indicates whether if the switch is `ON` by default (when the page loads) */\n  @Prop({ reflect: true, mutable: true }) checked?: boolean = false;\n\n  /** If true, the switch control will be disabled and no interaction will be allowed */\n  @Prop({ reflect: true }) disabled?: boolean = false;\n\n  /** The native form validation message */\n  @Prop({ mutable: true }) formValidationMessage?: string;\n\n  /** If true, the component will take the full width space available on the parent container */\n  @Prop({ reflect: true }) fullWidth?: boolean = false;\n\n  /** It indicates how to to display the on/off marks inside the control, with icons or none (default)  */\n  @Prop({ reflect: true }) innerLabel?: TSwitchInnerLabel = 'default';\n\n  /**\n   * It defines how to distribute the space between and around the control and the label text\n   * (https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content)\n   */\n  @Prop({ reflect: true }) justifyContent?: TSwitchJustifyContent = 'start';\n\n  /** Name of the form control. Submitted with the form as part of a name/value pair */\n  @Prop({ reflect: true }) name!: string;\n\n  /** If `true`, it will indicate that the user must switch `ON` the element before the owning form can be submitted */\n  @Prop({ reflect: true }) required?: boolean = false;\n\n  /** If true, the order of the control and the label text will be changed  */\n  @Prop({ reflect: true }) reverseOrder?: boolean = false;\n\n  /** The input control's value, submitted as a name/value pair with form data. */\n  @Prop({ reflect: true }) value?: string;\n\n  // Prop lifecycle events\n  // =======================\n\n  @Watch('required')\n  handleRequiredChange() {\n    this.updateFormValidity();\n  }\n\n  // Events section\n  // Requires JSDocs for public API documentation\n  // ==============================================\n\n  /** Handler to be called when the switch state changes */\n  @Event() bqChange: EventEmitter<{ checked: boolean }>;\n\n  /** Handler to be called when the switch gets focus */\n  @Event() bqFocus: EventEmitter<HTMLBqSwitchElement>;\n\n  /** Handler to be called when the switch loses focus */\n  @Event() bqBlur: EventEmitter<HTMLBqSwitchElement>;\n\n  // Component lifecycle events\n  // Ordered by their natural call order\n  // =====================================\n\n  componentWillLoad() {\n    this.prevCheckedValue = this.checked;\n  }\n\n  componentDidLoad() {\n    this.handleSlotChange();\n  }\n\n  componentDidUpdate() {\n    /**\n     * We need to trigger the `bqChange` immediately after the first update happens\n     * so the checked attribute get applied, otherwise, a delay will happen\n     * between the event emits and when the checked attribute value gets reflected in the element host.\n     */\n    if (this.checked !== this.prevCheckedValue) {\n      this.bqChange.emit({ checked: this.checked });\n      this.prevCheckedValue = this.checked;\n    }\n  }\n\n  formAssociatedCallback() {\n    this.setFormValue(this.checked);\n    this.updateFormValidity();\n  }\n\n  formResetCallback() {\n    // Reset the form value and validity state\n    this.checked = false;\n    this.inputElem.removeAttribute('checked');\n    this.internals?.setFormValue(undefined);\n    this.updateFormValidity();\n  }\n\n  // Listeners\n  // ==============\n\n  // Public methods API\n  // These methods are exposed on the host element.\n  // Always use two lines.\n  // Public Methods must be async.\n  // Requires JSDocs for public API documentation.\n  // ===============================================\n\n  /**\n   * Simulate a click event on the native `<input>` HTML element used under the hood.\n   * Use this method instead of the global `element.click()`.\n   */\n  @Method()\n  async vClick() {\n    this.inputElem?.click();\n  }\n\n  /**\n   * Sets focus on the native `<input>` HTML element used under the hood.\n   * Use this method instead of the global `element.focus()`.\n   */\n  @Method()\n  async vFocus() {\n    this.inputElem?.focus();\n  }\n\n  /**\n   * Remove focus from the native `<input>` HTML element used under the hood.\n   * Use this method instead of the global `element.blur()`.\n   */\n  @Method()\n  async vBlur() {\n    this.inputElem?.blur();\n  }\n\n  // Local methods\n  // Internal business logic.\n  // These methods cannot be called from the host element.\n  // =======================================================\n\n  private handleChange = () => {\n    this.checked = !this.checked;\n    this.inputElem.setAttribute('checked', `${this.checked}`);\n    this.setFormValue(this.checked);\n    this.updateFormValidity();\n  };\n\n  private handleOnFocus = () => {\n    this.bqFocus.emit(this.el);\n  };\n\n  private handleOnBlur = () => {\n    this.bqBlur.emit(this.el);\n  };\n\n  private handleSlotChange = () => {\n    const slot = this.labelElem?.querySelector('slot') ?? null;\n    if (isNil(slot)) return;\n\n    this.hasLabel = !!getTextContent(slot, { recurse: true }).length;\n  };\n\n  private setFormValue = (checked: boolean) => {\n    const value = checked ? 'on' : undefined;\n    // Set form value based on the checked state\n    // Here we also pass the state of the component (2nd argument) as the state of the form control\n    // Details: https://developer.mozilla.org/en-US/docs/Web/API/ElementInternals/setFormValue\n    this.internals?.setFormValue(value, `${this.checked}`);\n  };\n\n  private updateFormValidity = () => {\n    const { formValidationMessage, internals, required, checked, inputElem } = this;\n    // Clear the validity state\n    internals?.states.clear();\n\n    if (!(required && !checked)) {\n      // If the switch component is not required or is checked, set the validity state to valid\n      internals?.states.add('valid');\n      internals?.setValidity({});\n      return;\n    }\n\n    // Set validity state based on the required property and checked state\n    internals?.states.add('invalid');\n    internals?.setValidity({ valueMissing: true }, formValidationMessage, inputElem);\n  };\n\n  // render() function\n  // Always the last one in the class.\n  // ===================================\n\n  render() {\n    const hostStyle = {\n      ...(this.justifyContent && { '--bq-switch--justify-content': this.justifyContent }),\n    };\n\n    const labelCssClasses = {\n      'has-background': this.backgroundOnHover,\n      'is-checked': this.checked,\n      'is-disabled': this.disabled,\n      'flex-row-reverse': this.reverseOrder,\n    };\n\n    return (\n      <Host class={{ 'full-width': this.fullWidth }} style={hostStyle}>\n        <label class={{ 'bq-switch group': true, ...labelCssClasses }} part=\"base\">\n          {/* Hidden native HTML input */}\n          <input\n            class=\"bq-switch--input peer sr-only !bs-[--bq-switch--dot-size] !is-[--bq-switch--width] peer-checked:invisible\"\n            type=\"checkbox\"\n            checked={this.checked}\n            disabled={this.disabled}\n            required={this.required}\n            name={!isNil(this.name) ? this.name : undefined}\n            aria-label={this.name}\n            aria-checked={this.checked ? 'true' : 'false'}\n            aria-disabled={this.disabled ? 'true' : 'false'}\n            onBlur={this.handleOnBlur}\n            onChange={this.handleChange}\n            onFocus={this.handleOnFocus}\n            ref={(input) => (this.inputElem = input)}\n            role=\"switch\"\n            value={this.value}\n          />\n          {/* Control */}\n          <div\n            class=\"bq-switch--control relative box-border flex justify-between rounded-full bg-ui-tertiary transition duration-300 bs-[--bq-switch--height] is-[--bq-switch--width] p-b-xs2 p-i-xs2 group-[&.is-checked]:bg-ui-brand\"\n            part=\"control\"\n          >\n            {this.innerLabel === 'icon' && (\n              <bq-icon\n                class=\"bq-switch--control__icon on\"\n                name=\"check\"\n                color=\"icon--alt\"\n                role=\"img\"\n                title=\"On\"\n                part=\"icon-on\"\n              />\n            )}\n            {this.innerLabel === 'icon' && (\n              <bq-icon\n                class=\"bq-switch--control__icon off\"\n                name=\"x\"\n                color=\"icon--inverse\"\n                role=\"img\"\n                title=\"Off\"\n                part=\"icon-off\"\n              />\n            )}\n            {/* Dot */}\n            <div class=\"bq-switch--control__dot\" part=\"dot\" />\n          </div>\n          {/* Label */}\n          <span\n            class={{\n              'bq-switch--label text-m font-medium leading-regular text-primary transition-colors duration-300': true,\n              'ms-s': this.hasLabel && !this.reverseOrder,\n              'me-s': this.hasLabel && this.reverseOrder,\n            }}\n            ref={(span) => (this.labelElem = span)}\n            part=\"label\"\n          >\n            <slot onSlotchange={this.handleSlotChange} />\n          </span>\n        </label>\n      </Host>\n    );\n  }\n}\n"],"version":3}