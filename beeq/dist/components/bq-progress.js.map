{"version":3,"names":["PROGRESS_BORDER_SHAPE","PROGRESS_THICKNESS","PROGRESS_TYPE","bqProgressCss","BqProgressStyle0","BqProgress","proxyCustomElement","H","borderShape","enableTooltip","indeterminate","label","thickness","type","value","handleTypePropChange","validatePropValue","this","el","handleValuePropChange","newValue","validateValue","componentWillLoad","clampedValue","Math","max","min","render","style","h","Host","key","class","part","undefined","exportparts","alwaysVisible","distance","insetInlineStart","fontVariant","slot"],"sources":["../../packages/beeq/src/components/progress/bq-progress.types.ts","../../packages/beeq/src/components/progress/scss/bq-progress.scss?tag=bq-progress&encapsulation=shadow","../../packages/beeq/src/components/progress/bq-progress.tsx"],"sourcesContent":["export const PROGRESS_BORDER_SHAPE = ['square', 'rounded'] as const;\nexport type TProgressBorderShape = (typeof PROGRESS_BORDER_SHAPE)[number];\n\nexport const PROGRESS_THICKNESS = ['medium', 'large'] as const;\nexport type TProgressThickness = (typeof PROGRESS_THICKNESS)[number];\n\nexport const PROGRESS_TYPE = ['default', 'error'] as const;\nexport type TProgressType = (typeof PROGRESS_TYPE)[number];\n","/* -------------------------------------------------------------------------- */\n/*                        Progress styles                        */\n/* -------------------------------------------------------------------------- */\n\n@import './bq-progress.variables';\n\n@layer component {\n  @keyframes move-indeterminate {\n    0% {\n      inset-inline-start: 0;\n    }\n\n    100% {\n      inset-inline-start: calc(100% - var(--bq-progress-bar--indeterminateWidth));\n    }\n  }\n\n  .animate-indeterminate {\n    animation: move-indeterminate 1s linear 0s infinite alternate-reverse;\n  }\n}\n\n.progress-bar {\n  @apply relative appearance-none bs-[--bq-progress-bar--height] is-full;\n}\n\n.progress-bar::-webkit-progress-bar {\n  @apply bg-[--bq-progress-bar--trackColor];\n}\n\n.progress-bar::-webkit-progress-value {\n  @apply bg-[--bq-progress-bar--indicatorColor];\n}\n\n.progress-bar::-moz-progress-bar {\n  @apply animate-indeterminate bg-[--bq-progress-bar--indicatorColor];\n}\n\n.progress-bar:indeterminate::-moz-progress-bar {\n  @apply bg-[--bq-progress-bar--trackColor];\n}\n\n.progress-bar.progress-bar__border-shape::-webkit-progress-value,\n.progress-bar.progress-bar__border-shape::-webkit-progress-bar {\n  @apply rounded-full;\n}\n\n.progress-bar__indeterminate {\n  @apply animate-indeterminate;\n}\n\n.progress-bar.progress-bar__border-shape::-moz-progress-bar {\n  @apply animate-indeterminate rounded-full;\n}\n","import { Component, Element, h, Host, Prop, Watch } from '@stencil/core';\n\nimport {\n  PROGRESS_BORDER_SHAPE,\n  PROGRESS_THICKNESS,\n  PROGRESS_TYPE,\n  TProgressBorderShape,\n  TProgressThickness,\n  TProgressType,\n} from './bq-progress.types';\nimport { validatePropValue } from '../../shared/utils';\n\n/**\n * The progress bar is a user interface component that visually represents the completion status of a task or process.\n *\n * @example How to use it\n * ```html\n * <bq-progress value=\"50\"></bq-progress>\n * ```\n *\n * @documentation https://www.beeq.design/3d466e231/p/691cb3-progress\n * @status stable\n *\n * @dependency bq-tooltip\n *\n * @attr {\"rounded\" | \"rounded-full\"} border-shape - It will set the border style of the progress bar\n * @attr {boolean} enable-tooltip - If `true`, a tooltip will be shown displaying the progress value\n * @attr {boolean} indeterminate - If `true` the indeterminate state of progress bar is enabled\n * @attr {boolean} label - If `true`, a label text showing the value (in percentage) will be shown\n * @attr {\"small\" | \"medium\" | \"large\"} thickness - Progress bar thickness\n * @attr {\"default\" | \"error\"} type - Progress type\n * @attr {number} value - A number representing the current value of the progress bar\n *\n * @part wrapper - The component wrapper container inside the shadow DOM\n * @part progress - The `<div>` container that holds the native progress element\n * @part progress-bar - The native html for progress element\n * @part label - The `<div>` container that holds the label value (in percentage)\n * @part indeterminate - The `<div>` container that holds the indeterminate progress bar\n * @part base - The base container for the tooltip component inside the shadow DOM when hovering over the progress bar\n * @part trigger - The container holding the element that triggers the tooltip display when hovering over the progress bar\n * @part panel - The container holding the content of the tooltip when hovering over the progress bar\n *\n * @cssprop --bq-progress-bar--height - The progress bars height\n * @cssprop --bq-progress-bar--indeterminateWidth - The progress bar width when its indeterminate\n * @cssprop --bq-progress-bar--indicatorColor - The progress bar color (inside the track area)\n * @cssprop --bq-progress-bar--trackColor - The progress bar track area (the grey one)\n */\n@Component({\n  tag: 'bq-progress',\n  styleUrl: './scss/bq-progress.scss',\n  shadow: true,\n})\nexport class BqProgress {\n  // Own Properties\n  // ====================\n\n  // Reference to host HTML element\n  // ===================================\n\n  @Element() el!: HTMLBqProgressElement;\n\n  // State() variables\n  // Inlined decorator, alphabetical order\n  // =======================================\n\n  // Public Property API\n  // ========================\n\n  /** It will set the border style of the progress bar */\n  @Prop({ reflect: true }) borderShape: TProgressBorderShape = 'rounded';\n\n  /** If `true`, a tooltip will be shown displaying the progress value */\n  @Prop({ reflect: true }) enableTooltip: boolean = false;\n\n  /** If `true` the indeterminate state of progress bar is enabled */\n  @Prop({ reflect: true }) indeterminate: boolean = false;\n\n  /** If `true, a label text showing the value (in percentage) will be shown */\n  @Prop({ reflect: true }) label: boolean = false;\n\n  /** Progress bar thickness */\n  @Prop({ reflect: true }) thickness: TProgressThickness = 'medium';\n\n  /** Progress type */\n  @Prop({ reflect: true }) type: TProgressType = 'default';\n\n  /** A number representing the current value of the progress bar */\n  @Prop({ reflect: true, mutable: true }) value = 0;\n\n  // Prop lifecycle events\n  // =======================\n\n  @Watch('borderShape')\n  @Watch('thickness')\n  @Watch('type')\n  handleTypePropChange() {\n    validatePropValue(PROGRESS_BORDER_SHAPE, 'rounded', this.el, 'borderShape');\n    validatePropValue(PROGRESS_THICKNESS, 'medium', this.el, 'thickness');\n    validatePropValue(PROGRESS_TYPE, 'default', this.el, 'type');\n  }\n\n  @Watch('value')\n  handleValuePropChange(newValue: number) {\n    this.validateValue(newValue);\n  }\n\n  // Events section\n  // Requires JSDocs for public API documentation\n  // ==============================================\n\n  // Component lifecycle events\n  // Ordered by their natural call order\n  // =====================================\n\n  componentWillLoad() {\n    this.handleTypePropChange();\n    this.handleValuePropChange(this.value);\n  }\n\n  // Listeners\n  // ==============\n\n  // Public methods API\n  // These methods are exposed on the host element.\n  // Always use two lines.\n  // Public Methods must be async.\n  // Requires JSDocs for public API documentation.\n  // ===============================================\n\n  // Local methods\n  // Internal business logic.\n  // These methods cannot be called from the host element.\n  // =======================================================\n\n  private validateValue(newValue: number) {\n    const clampedValue = Math.max(0, Math.min(100, newValue));\n    if (newValue !== clampedValue) {\n      this.value = clampedValue;\n    }\n    return this.value;\n  }\n\n  // render() function\n  // Always the last one in the class.\n  // ===================================\n\n  render() {\n    const style = {\n      ...(this.thickness === 'large' && { '--bq-progress-bar--height': 'var(--bq-spacing-xs)' }),\n      ...(this.type === 'error' && { '--bq-progress-bar--indicatorColor': 'var(--bq-ui--danger)' }),\n    };\n\n    return (\n      <Host style={style}>\n        <div class=\"flex items-center\" part=\"wrapper\">\n          <div class=\"relative flex items-center is-full\" part=\"progress\">\n            <progress\n              class={{\n                [`progress-bar progress-bar__${this.type} ${this.thickness}`]: true,\n                'progress-bar__border-shape rounded-full': this.borderShape === 'rounded',\n              }}\n              value={this.indeterminate ? undefined : this.value}\n              max=\"100\"\n              part=\"progress-bar\"\n            />\n            {this.enableTooltip && !this.indeterminate && (\n              <bq-tooltip\n                class=\"absolute [&::part(panel)]:absolute\"\n                exportparts=\"base,trigger,panel\"\n                alwaysVisible={true}\n                distance={16}\n                style={{ insetInlineStart: `${this.value}%`, fontVariant: 'tabular-nums' }}\n              >\n                <div class=\"absolute bs-1 is-1\" slot=\"trigger\"></div>\n                {this.value}\n              </bq-tooltip>\n            )}\n            {this.indeterminate && (\n              <div\n                class={{\n                  'progress-bar__indeterminate absolute bg-[--bq-progress-bar--indicatorColor] bs-[--bq-progress-bar--height] is-[--bq-progress-bar--indeterminateWidth]':\n                    true,\n                  'rounded-full': this.borderShape === 'rounded',\n                }}\n                part=\"indeterminate\"\n              />\n            )}\n          </div>\n          <div\n            aria-hidden={!this.label || this.indeterminate ? 'true' : 'false'}\n            class={{\n              'ms-xs font-medium leading-regular': true,\n              'text-primary': this.type !== 'error',\n              'text-danger': this.type === 'error',\n              'invisible ms-0 is-0': !this.label || this.indeterminate,\n            }}\n            style={{ fontVariant: 'tabular-nums' }}\n            part=\"label\"\n          >\n            <span>{this.value}%</span>\n          </div>\n        </div>\n      </Host>\n    );\n  }\n}\n"],"mappings":";;;;yJAAO,MAAMA,EAAwB,CAAC,SAAU,WAGzC,MAAMC,EAAqB,CAAC,SAAU,SAGtC,MAAMC,EAAgB,CAAC,UAAW,SCNzC,MAAMC,EAAgB,u29BACtB,MAAAC,EAAeD,E,MCmDFE,EAAUC,EAAA,MAAAD,UAAAE,E,uFAiBIC,YAAoC,UAGpCC,cAAyB,MAGzBC,cAAyB,MAGzBC,MAAiB,MAGjBC,UAAgC,SAGhCC,KAAsB,UAGPC,MAAQ,EAQhD,oBAAAC,GACEC,EAAkBhB,EAAuB,UAAWiB,KAAKC,GAAI,eAC7DF,EAAkBf,EAAoB,SAAUgB,KAAKC,GAAI,aACzDF,EAAkBd,EAAe,UAAWe,KAAKC,GAAI,O,CAIvD,qBAAAC,CAAsBC,GACpBH,KAAKI,cAAcD,E,CAWrB,iBAAAE,GACEL,KAAKF,uBACLE,KAAKE,sBAAsBF,KAAKH,M,CAkB1B,aAAAO,CAAcD,GACpB,MAAMG,EAAeC,KAAKC,IAAI,EAAGD,KAAKE,IAAI,IAAKN,IAC/C,GAAIA,IAAaG,EAAc,CAC7BN,KAAKH,MAAQS,C,CAEf,OAAON,KAAKH,K,CAOd,MAAAa,GACE,MAAMC,EAAQ,IACRX,KAAKL,YAAc,SAAW,CAAE,4BAA6B,2BAC7DK,KAAKJ,OAAS,SAAW,CAAE,oCAAqC,yBAGtE,OACEgB,EAACC,EAAI,CAAAC,IAAA,2CAACH,MAAOA,GACXC,EAAA,OAAAE,IAAA,2CAAKC,MAAM,oBAAoBC,KAAK,WAClCJ,EAAA,OAAAE,IAAA,2CAAKC,MAAM,qCAAqCC,KAAK,YACnDJ,EAAA,YAAAE,IAAA,2CACEC,MAAO,CACL,CAAC,8BAA8Bf,KAAKJ,QAAQI,KAAKL,aAAc,KAC/D,0CAA2CK,KAAKT,cAAgB,WAElEM,MAAOG,KAAKP,cAAgBwB,UAAYjB,KAAKH,MAC7CW,IAAI,MACJQ,KAAK,iBAENhB,KAAKR,gBAAkBQ,KAAKP,eAC3BmB,EAAA,cAAAE,IAAA,2CACEC,MAAM,qCACNG,YAAY,qBACZC,cAAe,KACfC,SAAU,GACVT,MAAO,CAAEU,iBAAkB,GAAGrB,KAAKH,SAAUyB,YAAa,iBAE1DV,EAAA,OAAAE,IAAA,2CAAKC,MAAM,qBAAqBQ,KAAK,YACpCvB,KAAKH,OAGTG,KAAKP,eACJmB,EAAA,OAAAE,IAAA,2CACEC,MAAO,CACL,wJACE,KACF,eAAgBf,KAAKT,cAAgB,WAEvCyB,KAAK,mBAIXJ,EAAA,OAAAE,IAAA,0DACgBd,KAAKN,OAASM,KAAKP,cAAgB,OAAS,QAC1DsB,MAAO,CACL,oCAAqC,KACrC,eAAgBf,KAAKJ,OAAS,QAC9B,cAAeI,KAAKJ,OAAS,QAC7B,uBAAwBI,KAAKN,OAASM,KAAKP,eAE7CkB,MAAO,CAAEW,YAAa,gBACtBN,KAAK,SAELJ,EAAA,QAAAE,IAAA,4CAAOd,KAAKH,MAAK,O","ignoreList":[]}