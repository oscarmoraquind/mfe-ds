{"version":3,"names":["enter","async","element","transitionName","classList","remove","transition","leave","add","toggle","contains","direction","animation","dataset","animationClass","transitionKey","charAt","toUpperCase","slice","genesisClasses","getDatasetValueOrDefault","startClasses","endClasses","addClasses","nextFrame","removeClasses","afterTransition","key","defaultValue","split","classes","Promise","resolve","requestAnimationFrame","all","getAnimations","map","finished"],"sources":["../../packages/beeq/src/shared/utils/transition.ts"],"sourcesContent":["/* -------------------------------------------------------------------------- */\n/*            Credits to MikeMcCall for the original implementation           */\n/*            Github: https://github.com/mmccall10/el-transition              */\n/* -------------------------------------------------------------------------- */\n\ninterface HTMLElementWithAnimations extends HTMLElement {\n  getAnimations(): Animation[];\n}\n\n/**\n * Transition an element entry\n *\n * @param element The element to enter\n * @param transitionName The name of the transition\n * @returns A promise that resolves when the transition is complete\n */\nexport const enter = async (element: HTMLElement, transitionName: string | null = null): Promise<void> => {\n  element.classList.remove('hidden');\n  await transition('enter', element, transitionName);\n};\n\n/**\n * Transition an element exit\n *\n * @param element The element to leave\n * @param transitionName The name of the transition\n * @returns A promise that resolves when the transition is complete\n */\nexport const leave = async (element: HTMLElement, transitionName: string | null = null): Promise<void> => {\n  await transition('leave', element, transitionName);\n  element.classList.add('hidden');\n};\n\n/**\n * Toggle an element entry/exit\n *\n * @param element The element to toggle\n * @param transitionName The name of the transition\n * @returns A promise that resolves when the transition is complete\n */\nexport const toggle = async (element: HTMLElement, transitionName: string | null = null): Promise<void> => {\n  if (element.classList.contains('hidden')) {\n    await enter(element, transitionName);\n  } else {\n    await leave(element, transitionName);\n  }\n};\n\n/**\n * Perform a transition on an element\n *\n * @param direction The direction of the transition\n * @param element The element to transition\n * @param animation The animation to use\n * @returns A promise that resolves when the transition is complete\n * @internal\n */\nconst transition = async (direction: string, element: HTMLElement, animation: string | null): Promise<void> => {\n  const { dataset } = element;\n  const animationClass = animation ? `${animation}-${direction}` : direction;\n  const transitionKey = `transition${direction.charAt(0).toUpperCase() + direction.slice(1)}`;\n\n  // Get the genesis, start, and end classes\n  const genesisClasses = getDatasetValueOrDefault(dataset, transitionKey, animationClass);\n  const startClasses = getDatasetValueOrDefault(dataset, `${transitionKey}Start`, `${animationClass}-start`);\n  const endClasses = getDatasetValueOrDefault(dataset, `${transitionKey}End`, `${animationClass}-end`);\n\n  // Add genesis and start classes, then wait for the next frame\n  addClasses(element, genesisClasses);\n  addClasses(element, startClasses);\n  await nextFrame();\n\n  // Replace start classes with end classes, then wait for the transition to finish\n  removeClasses(element, startClasses);\n  addClasses(element, endClasses);\n  await afterTransition(element as HTMLElementWithAnimations);\n\n  // Remove end and genesis classes\n  removeClasses(element, endClasses);\n  removeClasses(element, genesisClasses);\n};\n\n/**\n * Get the value of a dataset key or a default value\n *\n * @param dataset The dataset to get the value from\n * @param key The key to get the value for\n * @param defaultValue The default value to return if the key is not found\n * @returns The value of the dataset key or the default value\n * @internal\n */\nconst getDatasetValueOrDefault = (dataset: DOMStringMap, key: string, defaultValue: string): string[] => {\n  return dataset[key] ? dataset[key].split(' ') : [defaultValue];\n};\n\n/**\n * Add classes to an element\n *\n * @param element The element to add the CSS classes to\n * @param classes The classes to add\n * @internal\n */\nconst addClasses = (element: HTMLElement, classes: string[]): void => {\n  element.classList.add(...classes);\n};\n\n/**\n * Remove classes from an element\n *\n * @param element The element to remove the CSS classes from\n * @param classes The classes to remove\n * @internal\n */\nconst removeClasses = (element: HTMLElement, classes: string[]): void => {\n  element.classList.remove(...classes);\n};\n\n/**\n * Wait for the next frame\n * @returns A promise that resolves when the next frame is available\n * @internal\n */\nconst nextFrame = (): Promise<void> => {\n  return new Promise((resolve) => {\n    requestAnimationFrame(() => {\n      requestAnimationFrame(() => resolve());\n    });\n  });\n};\n\n/**\n * Wait for all animations to finish\n * @param element The element to wait for\n * @returns A promise that resolves when all animations are finished\n * @internal\n */\nconst afterTransition = (element: HTMLElementWithAnimations): Promise<Animation[]> => {\n  return Promise.all(element.getAnimations().map((animation) => animation.finished));\n};\n"],"mappings":";;;;MAgBaA,EAAQC,MAAOC,EAAsBC,EAAgC,QAChFD,EAAQE,UAAUC,OAAO,gBACnBC,EAAW,QAASJ,EAASC,EAAe,E,MAUvCI,EAAQN,MAAOC,EAAsBC,EAAgC,cAC1EG,EAAW,QAASJ,EAASC,GACnCD,EAAQE,UAAUI,IAAI,SAAS,E,MAUpBC,EAASR,MAAOC,EAAsBC,EAAgC,QACjF,GAAID,EAAQE,UAAUM,SAAS,UAAW,OAClCV,EAAME,EAASC,E,KAChB,OACCI,EAAML,EAASC,E,GAazB,MAAMG,EAAaL,MAAOU,EAAmBT,EAAsBU,KACjE,MAAMC,QAAEA,GAAYX,EACpB,MAAMY,EAAiBF,EAAY,GAAGA,KAAaD,IAAcA,EACjE,MAAMI,EAAgB,aAAaJ,EAAUK,OAAO,GAAGC,cAAgBN,EAAUO,MAAM,KAGvF,MAAMC,EAAiBC,EAAyBP,EAASE,EAAeD,GACxE,MAAMO,EAAeD,EAAyBP,EAAS,GAAGE,SAAsB,GAAGD,WACnF,MAAMQ,EAAaF,EAAyBP,EAAS,GAAGE,OAAoB,GAAGD,SAG/ES,EAAWrB,EAASiB,GACpBI,EAAWrB,EAASmB,SACdG,IAGNC,EAAcvB,EAASmB,GACvBE,EAAWrB,EAASoB,SACdI,EAAgBxB,GAGtBuB,EAAcvB,EAASoB,GACvBG,EAAcvB,EAASiB,EAAe,EAYxC,MAAMC,EAA2B,CAACP,EAAuBc,EAAaC,IAC7Df,EAAQc,GAAOd,EAAQc,GAAKE,MAAM,KAAO,CAACD,GAUnD,MAAML,EAAa,CAACrB,EAAsB4B,KACxC5B,EAAQE,UAAUI,OAAOsB,EAAQ,EAUnC,MAAML,EAAgB,CAACvB,EAAsB4B,KAC3C5B,EAAQE,UAAUC,UAAUyB,EAAQ,EAQtC,MAAMN,EAAY,IACT,IAAIO,SAASC,IAClBC,uBAAsB,KACpBA,uBAAsB,IAAMD,KAAU,GACtC,IAUN,MAAMN,EAAmBxB,GAChB6B,QAAQG,IAAIhC,EAAQiC,gBAAgBC,KAAKxB,GAAcA,EAAUyB,mB","ignoreList":[]}