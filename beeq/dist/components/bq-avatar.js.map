{"version":3,"names":["AVATAR_SIZE","AVATAR_SHAPE","bqAvatarCss","BqAvatarStyle0","BqAvatar","proxyCustomElement","H","trimmedInitials","hasError","altText","image","label","initials","shape","size","handleImagePropChange","this","checkPropValues","validatePropValue","el","onInitialsChange","trimInitialsBasedOnSize","componentWillLoad","onImageError","forEach","substring","getIndex","sizeIndexMap","xsmall","small","medium","large","render","h","Host","key","class","role","part","alt","undefined","src","onError","name"],"sources":["../../packages/beeq/src/components/avatar/bq-avatar.types.ts","../../packages/beeq/src/components/avatar/scss/bq-avatar.scss?tag=bq-avatar&encapsulation=shadow","../../packages/beeq/src/components/avatar/bq-avatar.tsx"],"sourcesContent":["export const AVATAR_SIZE = ['xsmall', 'small', 'medium', 'large'] as const;\nexport type TAvatarSize = (typeof AVATAR_SIZE)[number];\n\nexport const AVATAR_SHAPE = ['circle', 'square'] as const;\nexport type TAvatarShape = (typeof AVATAR_SHAPE)[number];\n","/* -------------------------------------------------------------------------- */\n/*                                Avatar styles                               */\n/* -------------------------------------------------------------------------- */\n\n@import './bq-avatar.variables';\n\n:host {\n  @apply relative inline-block;\n}\n\n.bq-avatar {\n  @apply relative overflow-hidden bg-[var(--bq-avatar-background)];\n  @apply border-[length:var(--bq-avatar--border-width)] border-[color:var(--bq-avatar--border-color)];\n\n  border-style: var(--bq-avatar--border-style);\n}\n\n.size {\n  &--xsmall {\n    @apply text-[length:var(--bq-avatar--font-size-xsmall)] bs-[--bq-avatar--size-xsmall] is-[--bq-avatar--size-xsmall];\n  }\n\n  &--small {\n    @apply text-[length:var(--bq-avatar--font-size-small)] bs-[--bq-avatar--size-small] is-[--bq-avatar--size-small];\n  }\n\n  &--medium {\n    @apply text-[length:var(--bq-avatar--font-size-medium)] bs-[--bq-avatar--size-medium] is-[--bq-avatar--size-medium];\n  }\n\n  &--large {\n    @apply text-[length:var(--bq-avatar--font-size-large)] bs-[--bq-avatar--size-large] is-[--bq-avatar--size-large];\n  }\n}\n","import { Component, Element, h, Host, Prop, State, Watch } from '@stencil/core';\n\nimport { AVATAR_SHAPE, AVATAR_SIZE, TAvatarShape, TAvatarSize } from './bq-avatar.types';\nimport { validatePropValue } from '../../shared/utils';\n\n/**\n * The Avatar component is a simple and customizable element that displays an image or initials in a circular or square shape.\n * This component is useful for displaying user profile pictures or any other image that represents a person or an entity.\n *\n * @example How to use it\n * ```html\n * <bq-avatar\n *   alt-text=\"John Doe profile picture\"\n *   image=\"/image/url/photo-1524593689594.jpeg\"\n *   label=\"John Doe profile picture\"\n *   shape=\"circle\"\n *   size=\"medium\"\n * >\n *   <bq-badge slot=\"badge\" text-color=\"#fff\">9</bq-badge>\n * </bq-avatar>\n * ```\n *\n * @documentation https://www.beeq.design/3d466e231/p/148da7-avatar\n * @status stable\n *\n * @attr {string} alt-text - Alternate text for the avatar image if the image cannot be displayed.\n * @attr {string} image - The image source to load on the avatar (this can be also a base64 encoded image).\n * @attr {string} label - A text to use for describing the avatar on assistive devices.\n * @attr {string} initials - The text to display on avatar.\n * @attr {\"circle\" | \"square\"} shape - The shape of the avatar.\n * @attr {\"xsmall\" | \"small\" | \"medium\" | \"large\"} size - The size of the avatar.\n *\n * @slot badge - The badge slot is used to add a badge to the avatar. The badge is a small circle or square that can be used to display a number or a status.\n *\n * @part base - The component's internal wrapper.\n * @part img - The `<image>` tag element that load the image source.\n * @part text - The `<span>` tag element that rendered the `Initials` text string.\n * @part badge - The container that wraps the badge slot element.\n *\n * @cssprop --bq-avatar--background - Avatar background color\n *\n * @cssprop --bq-avatar--border-color - Avatar border color\n * @cssprop --bq-avatar--border-style - Avatar border style\n * @cssprop --bq-avatar--border-width - Avatar border width\n *\n * @cssprop --bq-avatar--border-radius-circle - Avatar border radius for circle & any size\n * @cssprop --bq-avatar--border-radius-squareXs - Avatar border radius for square & size xsmall\n * @cssprop --bq-avatar--border-radius-squareS - Avatar border radius for square & size small\n * @cssprop --bq-avatar--border-radius-squareM - Avatar border radius for square & size medium/large\n *\n * @cssprop --bq-avatar--size-xsmall - Avatar xsmall size\n * @cssprop --bq-avatar--size-small - Avatar small size\n * @cssprop --bq-avatar--size-medium - Avatar medium size\n * @cssprop --bq-avatar--size-large - Avatar large size\n *\n * @cssprop --bq-avatar--badge-top-square - Badge top position shape square\n * @cssprop --bq-avatar--badge-left-square - Badge left position shape square\n * @cssprop --bq-avatar--badge-top-circle - Badge top position shape circle\n * @cssprop --bq-avatar--badge-left-circle - Badge left position shape circle\n */\n@Component({\n  tag: 'bq-avatar',\n  styleUrl: './scss/bq-avatar.scss',\n  shadow: true,\n})\nexport class BqAvatar {\n  // Own Properties\n  // ====================\n\n  trimmedInitials: string;\n\n  // Reference to host HTML element\n  // ===================================\n\n  @Element() el!: HTMLBqAvatarElement;\n\n  // State() variables\n  // Inlined decorator, alphabetical order\n  // =======================================\n\n  @State() hasError: boolean;\n\n  // Public Property API\n  // ========================\n\n  /** Alternate text for the avatar image if the image cannot be displayed */\n  @Prop({ reflect: true }) altText: string;\n\n  /** The image source to load on the avatar (this can be also a base64 encoded image) */\n  @Prop({ reflect: true }) image: string;\n\n  /** A text to use for describing the avatar on assistive devices */\n  @Prop({ reflect: true }) label: string;\n\n  /** The text to display on avatar */\n  @Prop({ reflect: true }) initials: string;\n\n  /** The shape of the avatar */\n  @Prop({ reflect: true }) shape: TAvatarShape = 'circle';\n\n  /** The size of the avatar */\n  @Prop({ reflect: true, mutable: true }) size: TAvatarSize = 'medium';\n\n  // Prop lifecycle events\n  // =======================\n\n  @Watch('image')\n  handleImagePropChange() {\n    // Reset the error when a new image source is provided\n    this.hasError = false;\n  }\n\n  @Watch('shape')\n  @Watch('size')\n  checkPropValues() {\n    validatePropValue(AVATAR_SHAPE, 'circle', this.el, 'shape');\n    validatePropValue(AVATAR_SIZE, 'medium', this.el, 'size');\n  }\n\n  @Watch('initials')\n  @Watch('size')\n  onInitialsChange() {\n    this.trimInitialsBasedOnSize();\n  }\n\n  // Events section\n  // Requires JSDocs for public API documentation\n  // ==============================================\n\n  // Component lifecycle events\n  // Ordered by their natural call order\n  // =====================================\n\n  componentWillLoad() {\n    this.trimInitialsBasedOnSize();\n    this.checkPropValues();\n  }\n\n  // Listeners\n  // ==============\n\n  // Public methods API\n  // These methods are exposed on the host element.\n  // Always use two lines.\n  // Public Methods must be async.\n  // Requires JSDocs for public API documentation.\n  // ===============================================\n\n  // Local methods\n  // Internal business logic.\n  // These methods cannot be called from the host element.\n  // =======================================================\n\n  private onImageError = () => {\n    this.hasError = true;\n  };\n\n  private trimInitialsBasedOnSize = (): void => {\n    if (!this.initials) return;\n\n    AVATAR_SIZE.forEach((size: TAvatarSize) => {\n      if (this.size === size) {\n        this.trimmedInitials = this.initials.substring(0, this.getIndex(size));\n      }\n    });\n  };\n\n  private getIndex = (size: TAvatarSize): number => {\n    const sizeIndexMap = {\n      xsmall: 1,\n      small: 2,\n      medium: 3,\n      large: 4,\n    };\n    return sizeIndexMap[size] ?? sizeIndexMap.xsmall;\n  };\n\n  // render() function\n  // Always the last one in the class.\n  // ===================================\n\n  render() {\n    return (\n      <Host>\n        <div\n          class={{\n            'bq-avatar': true,\n            [`size--${this.size}`]: true,\n            'rounded-[--bq-avatar--border-radius-circle]': this.shape === 'circle',\n            'rounded-[--bq-avatar--border-radius-squareXs]': this.shape === 'square' && this.size === 'xsmall',\n            'rounded-[--bq-avatar--border-radius-squareS]': this.shape === 'square' && this.size === 'small',\n            'rounded-[--bq-avatar--border-radius-squareM]':\n              this.shape === 'square' && (this.size === 'medium' || this.size === 'large'),\n          }}\n          aria-label={this.label}\n          role=\"img\"\n          part=\"base\"\n        >\n          {this.initials && (\n            <span\n              class=\"absolute start-0 inline-flex items-center justify-center font-bold bs-full is-full inset-bs-0\"\n              part=\"text\"\n            >\n              {this.trimmedInitials}\n            </span>\n          )}\n          {this.image && !this.hasError && (\n            <img\n              class=\"absolute start-0 object-cover bs-full is-full inset-bs-0\"\n              alt={this.altText ?? undefined}\n              src={this.image}\n              onError={this.onImageError}\n              part=\"img\"\n            />\n          )}\n        </div>\n        <div\n          class={{\n            'absolute flex items-center justify-center': true,\n            'start-[--bq-avatar--badge-left-square] inset-bs-[--bq-avatar--badge-top-square]': this.shape === 'square',\n            'start-[--bq-avatar--badge-left-circle] inset-bs-[--bq-avatar--badge-top-circle]': this.shape === 'circle',\n          }}\n          part=\"badge\"\n        >\n          <slot name=\"badge\"></slot>\n        </div>\n      </Host>\n    );\n  }\n}\n"],"mappings":";;;;qHAAO,MAAMA,EAAc,CAAC,SAAU,QAAS,SAAU,SAGlD,MAAMC,EAAe,CAAC,SAAU,UCHvC,MAAMC,EAAc,q+/BACpB,MAAAC,EAAeD,E,MCgEFE,EAAQC,EAAA,MAAAD,UAAAE,E,kEAInBC,gB,qBAWSC,SAMgBC,QAGAC,MAGAC,MAGAC,SAGAC,MAAsB,SAGPC,KAAoB,SAM5D,qBAAAC,GAEEC,KAAKR,SAAW,K,CAKlB,eAAAS,GACEC,EAAkBjB,EAAc,SAAUe,KAAKG,GAAI,SACnDD,EAAkBlB,EAAa,SAAUgB,KAAKG,GAAI,O,CAKpD,gBAAAC,GACEJ,KAAKK,yB,CAWP,iBAAAC,GACEN,KAAKK,0BACLL,KAAKC,iB,CAkBCM,aAAe,KACrBP,KAAKR,SAAW,IAAI,EAGda,wBAA0B,KAChC,IAAKL,KAAKJ,SAAU,OAEpBZ,EAAYwB,SAASV,IACnB,GAAIE,KAAKF,OAASA,EAAM,CACtBE,KAAKT,gBAAkBS,KAAKJ,SAASa,UAAU,EAAGT,KAAKU,SAASZ,G,IAElE,EAGIY,SAAYZ,IAClB,MAAMa,EAAe,CACnBC,OAAQ,EACRC,MAAO,EACPC,OAAQ,EACRC,MAAO,GAET,OAAOJ,EAAab,IAASa,EAAaC,MAAM,EAOlD,MAAAI,GACE,OACEC,EAACC,EAAI,CAAAC,IAAA,4CACHF,EAAA,OAAAE,IAAA,2CACEC,MAAO,CACL,YAAa,KACb,CAAC,SAASpB,KAAKF,QAAS,KACxB,8CAA+CE,KAAKH,QAAU,SAC9D,gDAAiDG,KAAKH,QAAU,UAAYG,KAAKF,OAAS,SAC1F,+CAAgDE,KAAKH,QAAU,UAAYG,KAAKF,OAAS,QACzF,+CACEE,KAAKH,QAAU,WAAaG,KAAKF,OAAS,UAAYE,KAAKF,OAAS,UACvE,aACWE,KAAKL,MACjB0B,KAAK,MACLC,KAAK,QAEJtB,KAAKJ,UACJqB,EAAA,QAAAE,IAAA,2CACEC,MAAM,gGACNE,KAAK,QAEJtB,KAAKT,iBAGTS,KAAKN,QAAUM,KAAKR,UACnByB,EAAA,OAAAE,IAAA,2CACEC,MAAM,2DACNG,IAAKvB,KAAKP,SAAW+B,UACrBC,IAAKzB,KAAKN,MACVgC,QAAS1B,KAAKO,aACde,KAAK,SAIXL,EAAA,OAAAE,IAAA,2CACEC,MAAO,CACL,4CAA6C,KAC7C,kFAAmFpB,KAAKH,QAAU,SAClG,kFAAmFG,KAAKH,QAAU,UAEpGyB,KAAK,SAELL,EAAA,QAAAE,IAAA,2CAAMQ,KAAK,W","ignoreList":[]}