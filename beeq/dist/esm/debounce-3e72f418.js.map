{"file":"debounce-3e72f418.js","mappings":";;;;;;AAAA;;;;;;;;AAQA;MACa,aAAa,GAAG,CAC3B,IAAW,EACX,IAAY,EACZ,GAAG,IAAuB;IAE1B,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;IAEvC,IAAI,IAAI,KAAK,CAAC,EAAE;QACd,MAAM,SAAS,GAAG,UAAU,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;QAC/C,OAAO,MAAM,YAAY,CAAC,SAAS,CAAC,CAAC;KACtC;SAAM;QACL,IAAI,KAAa,CAAC;QAClB,MAAM,WAAW,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;QAEtC,MAAM,MAAM,GAAG,MAAM,oBAAoB,CAAC,KAAK,CAAC,CAAC;QAEjD,MAAM,2BAA2B,GAAyB,CAAC,IAAI;YAC7D,MAAM,KAAK,GAAG,IAAI,GAAG,WAAW,CAAC;YAEjC,MAAM,EAAE,CAAC;YAET,IAAI,KAAK,GAAG,IAAI,EAAE;gBAChB,KAAK,GAAG,qBAAqB,CAAC,2BAA2B,CAAC,CAAC;aAC5D;iBAAM;gBACL,UAAU,EAAE,CAAC;aACd;SACF,CAAC;QAEF,KAAK,GAAG,qBAAqB,CAAC,2BAA2B,CAAC,CAAC;QAE3D,OAAO,MAAM,CAAC;KACf;AACH;;AChCA;;;;;;;;;MASa,QAAQ,GAAG,CAA0B,IAAW,EAAE,IAAI,GAAG,CAAC,EAAE,SAAS,GAAG,KAAK;IACxF,IAAI,MAA8B,CAAC;IAEnC,SAAS,eAAe,CAAC,GAAG,IAA6B;QACvD,MAAM,IAAI,CAAC;;QAGX,MAAM,OAAO,GAAG,IAAI,CAAC;QAErB,SAAS,cAAc,CAAC,EAAS,EAAE,OAAgB,EAAE,GAAG,IAA2B;YACjF,EAAE,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;SACzB;QAED,IAAI,SAAS,IAAI,KAAK,CAAC,MAAM,CAAC,EAAE;YAC9B,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;SAC3B;QAED,MAAM,GAAG,aAAa,CAAC,cAAc,EAAE,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC;KACtE;IAED,OAAO,MAAM,CAAC,MAAM,CAAC,eAAe,EAAE;QACpC,MAAM,EAAE;YACN,MAAM,IAAI,CAAC;SACZ;KACF,CAAC,CAAC;AACL;;;;","names":[],"sources":["../../packages/beeq/src/shared/utils/setRafTimeout.ts","../../packages/beeq/src/shared/utils/debounce.ts"],"sourcesContent":["/**\n * Implements setTimeout using requestAnimationFrame. Uses setTimeout if wait is 0.\n *\n * @param {Function} func - The function to timeout.\n * @param {Number} wait - The number of milliseconds to delay.\n * @param {Any[]} args - The arguments of func.\n * @returns {void}\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const setRafTimeout = <TFunc extends (...args: any[]) => void>(\n  func: TFunc,\n  wait: number,\n  ...args: Parameters<TFunc>\n): (() => void) => {\n  const invokeFunc = () => func(...args);\n\n  if (wait === 0) {\n    const timeoutId = setTimeout(invokeFunc, wait);\n    return () => clearTimeout(timeoutId);\n  } else {\n    let rafId: number;\n    const currentTime = performance.now();\n\n    const cancel = () => cancelAnimationFrame(rafId);\n\n    const handleRequestAnimationFrame: FrameRequestCallback = (time) => {\n      const delta = time - currentTime;\n\n      cancel();\n\n      if (delta < wait) {\n        rafId = requestAnimationFrame(handleRequestAnimationFrame);\n      } else {\n        invokeFunc();\n      }\n    };\n\n    rafId = requestAnimationFrame(handleRequestAnimationFrame);\n\n    return cancel;\n  }\n};\n","import { isNil } from './isNil';\nimport { setRafTimeout } from './setRafTimeout';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type TFunction = (...args: any[]) => unknown;\n\ntype TDebounceFnReturn<T> = T extends unknown[] ? (...params: T) => void : (param: T) => void;\nexport type TDebounce<T> = TDebounceFnReturn<T> & { cancel: () => void } extends infer U ? U : never;\n\n/**\n * Creates a debounced function that delays invoking func until after wait milliseconds have elapsed\n * since the last time the debounced function was invoked.\n *\n * @param {Function} func - The function to debounce.\n * @param {Number} wait - The number of milliseconds to delay.\n * @param {Boolean} immediate - If `true`, the function triggers immediately and then waits for the interval before being called again.\n * @return {Function} The new debounced function.\n */\nexport const debounce = <TFunc extends TFunction>(func: TFunc, wait = 0, immediate = false) => {\n  let cancel: () => void | undefined;\n\n  function debounceHandler(...args: Parameters<typeof func>) {\n    cancel?.();\n\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const context = this;\n\n    function timeoutHandler(fn: TFunc, context: unknown, ...args: Parameters<typeof fn>) {\n      fn.apply(context, args);\n    }\n\n    if (immediate && isNil(cancel)) {\n      func.apply(context, args);\n    }\n\n    cancel = setRafTimeout(timeoutHandler, wait, func, context, ...args);\n  }\n\n  return Object.assign(debounceHandler, {\n    cancel: () => {\n      cancel?.();\n    },\n  });\n};\n"],"version":3}