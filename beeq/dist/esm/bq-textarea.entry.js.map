{"file":"bq-textarea.entry.js","mappings":"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","names":[],"sources":["../../packages/beeq/src/components/textarea/scss/bq-textarea.scss?tag=bq-textarea&encapsulation=shadow","../../packages/beeq/src/components/textarea/bq-textarea.tsx"],"sourcesContent":["/* -------------------------------------------------------------------------- */\n/*                                Textarea styles                */\n/* -------------------------------------------------------------------------- */\n\n@import './bq-textarea.variables';\n\n:host {\n  @apply block is-full;\n}\n\n/* -------------------------------------------------------------------------- */\n/*                                    Label                                   */\n/* -------------------------------------------------------------------------- */\n\n.bq-textarea__label {\n  @apply text-[length:--bq-textarea--label-text-size] text-[color:--bq-textarea--label-text-color] m-be-[--bq-textarea--label-margin-bottom];\n}\n\n/* -------------------------------------------------------------------------- */\n/*                        Native HTML Textarea control                        */\n/* -------------------------------------------------------------------------- */\n\n.bq-textarea__input {\n  @apply flex-auto resize-y bg-[--bq-textarea--background-color] bs-[inherit];\n  // Border\n  @apply rounded-[--bq-textarea--border-radius] border-[length:--bq-textarea--border-width] border-[color:--bq-textarea--border-color];\n  // Padding\n  @apply pe-[--bq-textarea--padding-end] ps-[--bq-textarea--padding-start] p-b-[--bq-textarea--paddingY];\n  // Text\n  @apply text-[length:--bq-textarea--text-size] text-[color:--bq-textarea--text-color] placeholder:text-[color:--bq-textarea--text-placeholder-color];\n  // Transition\n  @apply transition-colors ease-in-out;\n  // Hover\n  @apply [&:not([disabled]):not(:focus-within)]:hover:border-hover-brand;\n  // Disabled\n  @apply disabled:cursor-not-allowed disabled:opacity-60;\n  // Focus\n  &:not([disabled]):focus-within {\n    --bq-ring-width: 1px;\n    --bq-ring-offset-width: 0;\n    --bq-ring-color-focus: var(--bq-textarea--border-color-focus);\n\n    @apply focus border-[color:--bq-ring-color-focus];\n  }\n}\n\n/* ------------------------------- Validations ------------------------------- */\n\n.bq-textarea__input.validation-error {\n  @apply border-danger [&:not(.disabled):not(:focus-within)]:hover:border-hover-danger;\n\n  &:not(.disabled):focus-within {\n    --bq-ring-color-focus: theme(stroke.danger);\n\n    @apply border-active-danger;\n  }\n}\n\n.bq-textarea__input.validation-success {\n  @apply border-success [&:not(.disabled):not(:focus-within)]:hover:border-hover-success;\n\n  &:not(.disabled):focus-within {\n    --bq-ring-color-focus: theme(stroke.success);\n\n    @apply border-active-success;\n  }\n}\n\n.bq-textarea__input.validation-warning {\n  @apply border-warning [&:not(.disabled):not(:focus-within)]:hover:border-hover-warning;\n\n  &:not(.disabled):focus-within {\n    --bq-ring-color-focus: theme(stroke.warning);\n\n    @apply border-active-warning;\n  }\n}\n\n/* -------------------------------------------------------------------------- */\n/*                                 Helper text                                */\n/* -------------------------------------------------------------------------- */\n\n.bq-textarea__helper {\n  @apply text-[length:--bq-textarea--helper-text-size] text-[color:--bq-textarea--helper-text-color] m-bs-[--bq-textarea--helper-margin-top];\n}\n\n/* ------------------------------- Validations ------------------------------ */\n\n.bq-textarea__helper.validation-error {\n  @apply text-danger;\n}\n\n.bq-textarea__helper.validation-success {\n  @apply text-success;\n}\n\n.bq-textarea__helper.validation-warning {\n  @apply text-warning;\n}\n\n/* ----------------------------- Helper counter ----------------------------- */\n\n/** Apply a disabled text color style to the textarea counter when the validation is none. */\n.bq-textarea__helper[class~='validation-none'] {\n  .bq-textarea__helper--counter {\n    @apply opacity-60;\n  }\n}\n","import { AttachInternals, Component, Element, Event, EventEmitter, h, Prop, State, Watch } from '@stencil/core';\n\nimport { TTextareaAutoCapitalize, TTextareaWrap } from './bq-textarea.types';\nimport { debounce, hasSlotContent, isHTMLElement, isNil, TDebounce } from '../../shared/utils';\nimport { TInputValidation } from '../input/bq-input.types';\n\n/**\n * The Textarea component is a multi-line text input control that is often used in a form to collect user inputs like comments or reviews.\n *\n * @example How to use it\n * ```html\n * <bq-textarea maxlength=\"0\" name=\"textarea\" placeholder=\"Placeholder...\" rows=\"5\">\n *   <label slot=\"label\">Label</label>\n *   <span class=\"flex items-center gap-xs\" slot=\"helper-text\">\n *     <bq-icon name=\"star\"></bq-icon>\n *     Helper text\n *   </span>\n * </bq-textarea>\n * ```\n *\n * @documentation https://www.beeq.design/3d466e231/p/16792c-textarea\n * @status stable\n *\n * @attr {string} autocapitalize - Controls whether or not the textarea field should be capitalized and how.\n * @attr {string} autocomplete - Specifies whether or not the textarea field should have autocomplete enabled.\n * @attr {string} autocorrect - Controls whether or not the textarea field should have autocorrect enabled.\n * @attr {boolean} autofocus - If `true`, the textarea will be focused on component render.\n * @attr {boolean} auto-grow - If `true`, the textarea will automatically grow and shrink to fit its contents.\n * @attr {number} debounce-time - The amount of time, in milliseconds, to wait before emitting the `bqInput` event after the textarea value changes.\n * @attr {boolean} disabled - If `true`, the user cannot interact with the textarea.\n * @attr {boolean} disable-resize - If `true`, it will block the user's ability to resize the textarea.\n * @attr {string} form - The ID of the form that the textarea field belongs to.\n * @attr {string} form-validation-message - The native form validation message.\n * @attr {number} maxlength - The maximum number of characters that can be entered into the textarea (`0`: no limit).\n * @attr {string} name - The name of the textarea element.\n * @attr {string} placeholder - The placeholder text to show when there is no value.\n * @attr {boolean} readonly - If `true`, the textarea field cannot be modified.\n * @attr {boolean} required - Indicates whether or not the textarea field is required to be filled out before submitting the form.\n * @attr {number} rows - The number of visible text lines for the control. It must be a positive integer.\n * @attr {boolean} spellcheck - If `true`, the textarea content may be checked for spelling errors.\n * @attr {\"error\" | \"none\" | \"success\" | \"warning\"} validation-status - The validation status of the textarea.\n * @attr {string} value - The value of the textarea. It can be used to reset the textarea to a previous value.\n * @attr {\"soft\" | \"hard\"} wrap - Specifies how the text in a text area is to be wrapped when submitted in a form.\n *\n * @event bqBlur - Handler to be called when the textarea loses focus.\n * @event bqChange - Handler to be called when the textarea value has changed and the textarea loses focus.\n * @event bqClear - Handler to be called when the textarea value has been cleared.\n * @event bqFocus - Handler to be called when the textarea has received focus.\n * @event bqInput - Handler to be called when the textarea value changes.\n *\n * @slot label - The textarea label.\n * @slot helper-text - The helper text.\n *\n * @part base - The component's base wrapper.\n * @part input - The textarea element.\n * @part label - The textarea label.\n * @part helper-info - The helper info container.\n * @part helper-text - The helper text.\n * @part helper-counter - The helper counter.\n *\n * @cssprop --bq-textarea--background-color - Textarea background color\n * @cssprop --bq-textarea--border-color - Textarea border color\n * @cssprop --bq-textarea--border-color-focus - Textarea border color on focus\n * @cssprop --bq-textarea--border-radius - Textarea border radius\n * @cssprop --bq-textarea--border-width - Textarea border width\n * @cssprop --bq-textarea--border-style - Textarea border style\n * @cssprop --bq-textarea--helper-margin-top - Textarea helper text margin top\n * @cssprop --bq-textarea--helper-text-color - Textarea helper text color\n * @cssprop --bq-textarea--helper-text-size - Textarea helper text size\n * @cssprop --bq-textarea--label-margin-bottom - Textarea label margin bottom\n * @cssprop --bq-textarea--label-text-color - Textarea label text color\n * @cssprop --bq-textarea--label-text-size - Textarea label text size\n * @cssprop --bq-textarea--paddingY - Textarea padding top and bottom\n * @cssprop --bq-textarea--padding-start - Textarea padding start\n * @cssprop --bq-textarea--padding-end - Textarea padding end\n * @cssprop --bq-textarea--text-color - Textarea text color\n * @cssprop --bq-textarea--text-size - Textarea text size\n * @cssprop --bq-textarea--text-placeholder-color - Textarea placeholder text color\n */\n@Component({\n  tag: 'bq-textarea',\n  styleUrl: './scss/bq-textarea.scss',\n  formAssociated: true,\n  shadow: {\n    delegatesFocus: true,\n  },\n})\nexport class BqTextarea {\n  // Own Properties\n  // ====================\n\n  private debounceBqInput: TDebounce<void>;\n  private fallbackId = 'textarea';\n\n  private helperTextElem?: HTMLElement;\n  private labelElem?: HTMLLabelElement;\n  private textarea: HTMLTextAreaElement;\n\n  // Reference to host HTML element\n  // ===================================\n\n  @AttachInternals() internals!: ElementInternals;\n  @Element() el!: HTMLBqTextareaElement;\n\n  // State() variables\n  // Inlined decorator, alphabetical order\n  // =======================================\n\n  @State() private hasHelperText = false;\n  @State() private hasLabel = false;\n\n  // Public Property API\n  // ========================\n\n  /**\n   * Controls whether or not the textarea field should be capitalized and how.\n   * Possible values are 'off', 'none', 'on', 'sentences', 'words', and 'characters'.\n   * See: https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize\n   */\n  @Prop({ reflect: true }) autocapitalize: TTextareaAutoCapitalize = 'off';\n\n  /**\n   * Specifies whether or not the textarea field should have autocomplete enabled.\n   * See: https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete#values\n   */\n  @Prop({ reflect: true }) autocomplete: string = 'off';\n\n  /**\n   * Controls whether or not the textarea field should have autocorrect enabled.\n   * Possible values are 'on' and 'off'.\n   */\n  @Prop({ reflect: true }) autocorrect: 'on' | 'off' = 'off';\n\n  /** If true, the textarea will be focused on component render */\n  @Prop({ reflect: true }) autofocus: boolean;\n\n  /**\n   * If `true`, the textarea will automatically grow and shrink to fit its contents.\n   * If `false`, the textarea will have a fixed height specified by the `rows` property.\n   */\n  @Prop({ reflect: true }) autoGrow: boolean = false;\n\n  /**\n   * The amount of time, in milliseconds, to wait before emitting the `bqInput` event after the textarea value changes.\n   * A value of 0 means no debouncing will occur.\n   */\n  @Prop({ reflect: true, mutable: true }) debounceTime? = 0;\n\n  /** If `true`, the user cannot interact with the textarea. */\n  @Prop({ reflect: true }) disabled: boolean = false;\n\n  /** If `true`, it will block the user's ability to resize the textarea. */\n  @Prop({ reflect: true }) disableResize?: boolean = false;\n\n  /** The ID of the form that the textarea field belongs to. */\n  @Prop({ reflect: true }) form?: string;\n\n  /** The native form validation message */\n  @Prop({ mutable: true }) formValidationMessage?: string;\n\n  /**\n   * The maximum number of characters that can be entered into the textarea (`0`: no limit).\n   * When enabled, a character counter will be shown underneath the textarea.\n   */\n  @Prop({ reflect: true }) maxlength: number;\n\n  /** The name of the textarea element. */\n  @Prop({ reflect: true }) name!: string;\n\n  /** The placeholder text to show when there is no value. */\n  @Prop({ reflect: true }) placeholder!: string;\n\n  /** If true, the textarea field cannot be modified. */\n  @Prop({ reflect: true }) readonly?: boolean = false;\n\n  /** Indicates whether or not the textarea field is required to be filled out before submitting the form. */\n  @Prop({ reflect: true }) required?: boolean = false;\n\n  /** The number of visible text lines for the control. It must be a positive integer. */\n  @Prop({ reflect: true }) rows: number = 5;\n\n  /** If true, the textarea content may be checked for spelling errors. */\n  @Prop({ reflect: true }) spellcheck: boolean = false;\n  /**\n   * The validation status of the textarea.\n   *\n   * @remarks\n   * This property is used to indicate the validation status of the textarea. It can be set to one of the following values:\n   * - `'none'`: No validation status is set.\n   * - `'error'`: The textarea has a validation error.\n   * - `'warning'`: The textarea has a validation warning.\n   * - `'success'`: The textarea has passed validation.\n   */\n  @Prop({ reflect: true, mutable: true }) validationStatus: TInputValidation = 'none';\n\n  /** The value of the textarea. It can be used to reset the textarea to a previous value. */\n  @Prop({ mutable: true }) value: string;\n\n  /** Specifies how the text in a text area is to be wrapped when submitted in a form */\n  @Prop({ reflect: true }) wrap: TTextareaWrap = 'soft';\n\n  // Prop lifecycle events\n  // =======================\n\n  @Watch('value')\n  handleValueChange() {\n    if (!this.textarea) return;\n    if (!this.maxlength || this.value?.length < this.maxlength) return;\n    // If the value is longer than the maxlength, we need to truncate it\n    this.value = this.value?.substring(0, this.maxlength);\n    this.textarea.value = this.value ?? '';\n  }\n\n  @Watch('required')\n  handleRequiredPropChange() {\n    this.updateFormValidity();\n  }\n\n  // Events section\n  // Requires JSDocs for public API documentation\n  // ==============================================\n\n  /** Callback handler emitted when the textarea loses focus */\n  @Event() bqBlur!: EventEmitter<HTMLBqTextareaElement>;\n\n  /**\n   * Callback handler emitted when the textarea value has changed and the textarea loses focus.\n   * This handler is called whenever the user finishes typing or pasting text into the textarea field and then clicks outside of the textarea field.\n   */\n  @Event() bqChange!: EventEmitter<{ value: string; el: HTMLBqTextareaElement }>;\n\n  /** Callback handler emitted when the textarea value has been cleared */\n  @Event() bqClear!: EventEmitter<HTMLBqTextareaElement>;\n\n  /** Callback handler emitted when the textarea has received focus */\n  @Event() bqFocus!: EventEmitter<HTMLBqTextareaElement>;\n\n  /**\n   * Callback handler emitted when the textarea value changes.\n   * This handler is called whenever the user types or pastes text into the textarea field.\n   */\n  @Event() bqInput!: EventEmitter<{ value: string; el: HTMLBqTextareaElement }>;\n\n  // Component lifecycle events\n  // Ordered by their natural call order\n  // =====================================\n\n  componentDidLoad() {\n    this.handleValueChange();\n  }\n\n  formAssociatedCallback() {\n    this.setFormValue(this.value);\n    this.updateFormValidity();\n  }\n\n  formResetCallback() {\n    this.clearSelection();\n    // Reset the form validity state\n    this.setFormValue();\n    this.updateFormValidity();\n  }\n\n  // Listeners\n  // ==============\n\n  // Public methods API\n  // These methods are exposed on the host element.\n  // Always use two lines.\n  // Public Methods must be async.\n  // Requires JSDocs for public API documentation.\n  // ===============================================\n\n  // Local methods\n  // Internal business logic.\n  // These methods cannot be called from the host element.\n  // =======================================================\n\n  private get numberOfCharacters() {\n    if (!this.maxlength || !this.textarea) return 0;\n\n    return this.value?.length;\n  }\n\n  private handleBlur = () => {\n    if (this.disabled) return;\n\n    this.bqBlur.emit(this.el);\n  };\n\n  private handleFocus = () => {\n    if (this.disabled) return;\n\n    this.bqFocus.emit(this.el);\n  };\n\n  private handleChange = (ev: Event) => {\n    if (this.disabled) return;\n\n    if (!isHTMLElement(ev.target, 'textarea')) return;\n    this.value = ev.target.value;\n    this.setFormValue(this.value);\n    this.updateFormValidity();\n\n    this.bqChange.emit({ value: this.value, el: this.el });\n  };\n\n  private handleInput = (ev: Event) => {\n    if (this.disabled) return;\n\n    this.debounceBqInput?.cancel();\n\n    if (!isHTMLElement(ev.target, 'textarea')) return;\n    this.value = ev.target.value;\n\n    this.debounceBqInput = debounce(() => {\n      this.bqInput.emit({ value: this.value, el: this.el });\n    }, this.debounceTime);\n    this.debounceBqInput();\n\n    this.autoResize();\n  };\n\n  private autoResize = () => {\n    if (!this.autoGrow) return;\n\n    const inputElem = this.textarea;\n    if (!inputElem) return;\n\n    inputElem.style.height = 'auto';\n    inputElem.style.height = `${inputElem.scrollHeight}px`;\n  };\n\n  private handleLabelSlotChange = () => {\n    this.hasLabel = hasSlotContent(this.labelElem);\n  };\n\n  private handleHelperTextSlotChange = () => {\n    this.hasHelperText = hasSlotContent(this.helperTextElem);\n  };\n\n  private setFormValue = (value?: string) => {\n    this.internals.setFormValue(!isNil(value) ? `${value}` : undefined);\n  };\n\n  private updateFormValidity = () => {\n    const { formValidationMessage, internals, required, value, textarea } = this;\n\n    // Clear the validity state\n    internals?.states.clear();\n\n    if (required && (!value || value.trim() === '')) {\n      // Set validity state to invalid\n      internals?.states.add('invalid');\n      internals?.setValidity({ valueMissing: true }, formValidationMessage, textarea);\n      return;\n    }\n\n    // Set validity state to valid if textarea has value or is not required\n    internals?.states.add('valid');\n    internals?.setValidity({});\n  };\n\n  private clearSelection = () => {\n    this.value = '';\n    this.textarea.value = this.value;\n  };\n\n  // render() function\n  // Always the last one in the class.\n  // ===================================\n\n  render() {\n    return (\n      <div class=\"bq-textarea flex flex-auto flex-col\" part=\"base\">\n        <label\n          class={{ 'bq-textarea__label': true, '!hidden': !this.hasLabel }}\n          htmlFor={this.name ?? this.fallbackId}\n          aria-label={this.name ?? this.fallbackId}\n          ref={(label: HTMLLabelElement) => (this.labelElem = label)}\n          part=\"label\"\n        >\n          <slot name=\"label\" onSlotchange={this.handleLabelSlotChange} />\n        </label>\n        <textarea\n          id={this.name ?? this.fallbackId}\n          class={{\n            'bq-textarea__input': true,\n            'resize-none': this.disableResize,\n            [`validation-${this.validationStatus}`]: true,\n          }}\n          autocapitalize={this.autocapitalize}\n          autocomplete={this.autocomplete}\n          autocorrect={this.autocorrect}\n          autofocus={this.autofocus}\n          disabled={this.disabled}\n          form={this.form}\n          maxLength={this.maxlength > 0 ? this.maxlength : undefined}\n          name={this.name}\n          placeholder={this.placeholder}\n          readOnly={this.readonly}\n          required={this.required}\n          rows={this.rows}\n          spellcheck={this.spellcheck}\n          wrap={this.wrap}\n          ref={(elem: HTMLTextAreaElement) => (this.textarea = elem)}\n          onBlur={this.handleBlur}\n          onChange={this.handleChange}\n          onFocus={this.handleFocus}\n          onInput={this.handleInput}\n          part=\"input\"\n        >\n          {this.value}\n        </textarea>\n        <div\n          class={{\n            'bq-textarea__helper flex items-center justify-between': true,\n            [`validation-${this.validationStatus}`]: true,\n            '!hidden': !this.hasHelperText && !this.maxlength,\n          }}\n          part=\"helper-info\"\n        >\n          <span\n            class=\"bq-textarea__helper--text\"\n            ref={(span: HTMLElement) => (this.helperTextElem = span)}\n            part=\"helper-text\"\n          >\n            <slot name=\"helper-text\" onSlotchange={this.handleHelperTextSlotChange} />\n          </span>\n          <span\n            class={{ 'bq-textarea__helper--counter [fontVariant:tabular-nums]': true, '!hidden': !this.maxlength }}\n            part=\"helper-counter\"\n          >\n            {this.numberOfCharacters ?? 0}/{this.maxlength}\n          </span>\n        </div>\n      </div>\n    );\n  }\n}\n"],"version":3}