{"file":"bq-divider.entry.js","mappings":"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","names":[],"sources":["../../packages/beeq/src/components/divider/bq-divider.types.ts","../../packages/beeq/src/components/divider/scss/bq-divider.scss?tag=bq-divider&encapsulation=shadow","../../packages/beeq/src/components/divider/bq-divider.tsx"],"sourcesContent":["export const DIVIDER_ORIENTATION = ['horizontal', 'vertical'] as const;\nexport type TDividerOrientation = (typeof DIVIDER_ORIENTATION)[number];\n\nexport const DIVIDER_ORIENTATION_ENUM = {\n  HORIZONTAL: 'horizontal',\n  VERTICAL: 'vertical',\n} as const;\n\nexport const DIVIDER_TITLE_ALIGNMENT = ['start', 'middle', 'end'] as const;\nexport type TDividerTitleAlignment = (typeof DIVIDER_TITLE_ALIGNMENT)[number];\n\nexport const DIVIDER_STROKE_LINECAP = ['square', 'round', 'butt'] as const;\nexport type TDividerStrokeLinecap = (typeof DIVIDER_STROKE_LINECAP)[number];\n","/* -------------------------------------------------------------------------- */\n/*                                Button styles                               */\n/* -------------------------------------------------------------------------- */\n\n@import './bq-divider.variables';\n\n:host {\n  @apply block is-full;\n}\n\n:host([orientation='vertical']) {\n  @apply flex bs-full;\n}\n\n.bq-divider {\n  @apply flex items-center gap-[--bq-divider--title-marginX];\n}\n\n.bq-divider--stroke {\n  @apply flex-grow stroke-[color:--bq-divider--stroke-color] bs-[--bq-divider--stroke-thickness] is-full;\n\n  &.end {\n    @apply rotate-180;\n  }\n}\n\n.bq-divider--title__start .bq-divider--stroke.start,\n.bq-divider--title__end .bq-divider--stroke.end {\n  @apply flex-grow-0 basis-[--bq-divider--stroke-basis];\n}\n\n.bq-divider--vertical {\n  @apply flex-col items-center gap-[--bq-divider--title-marginX] is-full;\n\n  .bq-divider--stroke {\n    @apply bs-full is-[--bq-divider--stroke-thickness];\n  }\n}\n","import { Component, Element, h, Host, Prop, State, Watch } from '@stencil/core';\n\nimport {\n  DIVIDER_ORIENTATION,\n  DIVIDER_ORIENTATION_ENUM,\n  DIVIDER_STROKE_LINECAP,\n  DIVIDER_TITLE_ALIGNMENT,\n  TDividerOrientation,\n  TDividerStrokeLinecap,\n  TDividerTitleAlignment,\n} from './bq-divider.types';\nimport { getColorCSSVariable, getTextContent, hasSlotContent, isNil, validatePropValue } from '../../shared/utils';\n\n/**\n * The Divider component is used to visually separate content in a layout.\n *\n * @example How to use it\n * ```html\n * <bq-divider orientation=\"horizontal\" stroke-color=\"stroke--primary\" title-alignment=\"middle\">\n *   <span slot=\"title\">Divider Title</span>\n * </bq-divider>\n * ```\n *\n * @documentation https://www.beeq.design/3d466e231/p/53dfe6-divider\n * @status stable\n *\n * @attr {boolean} dashed - If true, the divider has a dashed pattern.\n * @attr {\"horizontal\" | \"vertical\"} orientation - The default orientation of the divider.\n * @attr {string} stroke-color - Set the stroke color of the divider. The value should be a valid value of the palette color.\n * @attr {\"start\" | \"middle\" | \"end\"} title-alignment - Set the alignment of the title on the main axis of the divider (horizontal / vertical).\n * @attr {number} stroke-dash-width - Set the width of each dash of the divider's stroke. This is applicable when the stroke is dashed.\n * @attr {number} stroke-dash-gap - Set the gap of the divider's stroke. This is applicable when the stroke is dashed.\n * @attr {number} stroke-thickness - Set the thickness of the divider's stroke. Value expressed in px.\n * @attr {number} stroke-basis - Set the min width of the divider's stroke when text is not centered. Value expressed in px.\n * @attr {\"square\" | \"round\" | \"butt\"} stroke-linecap - Set the line of the divider's stroke. This is applicable when the stroke is dashed.\n *\n * @slot - The title content of the divider.\n *\n * @part base - The component's internal wrapper.\n * @part dash-start - The component's internal svg wrapper for the start line of the divider's stroke.\n * @part dash-end - The component's internal svg wrapper for the end line of the divider's stroke.\n * @part dash-start-line - The component's internal line component of the divider's stroke.\n * @part dash-end-line - The component's internal line component of the divider's stroke.\n *\n * @cssprop --bq-divider--color - Divider color\n * @cssprop --bq-divider--title-marginX - Divider space between title and delimiters\n */\n@Component({\n  tag: 'bq-divider',\n  styleUrl: './scss/bq-divider.scss',\n  shadow: true,\n})\nexport class BqDivider {\n  // Own Properties\n  // ====================\n\n  private titleElem: HTMLDivElement;\n\n  // Reference to host HTML element\n  // ===================================\n\n  @Element() el!: HTMLBqDividerElement;\n\n  // State() variables\n  // Inlined decorator, alphabetical order\n  // =======================================\n\n  @State() private hasTitle: boolean;\n\n  // Public Property API\n  // ========================\n\n  /** If true, the divider has a dashed pattern */\n  @Prop() dashed = false;\n\n  /** The default orientation of the divider */\n  @Prop({ reflect: true }) orientation: TDividerOrientation = 'horizontal';\n\n  /** Set the stroke color of the divider. The value should be a valid value of the palette color */\n  @Prop({ reflect: true }) strokeColor?: string = 'stroke--primary';\n\n  /** Set the alignment of the title on the main axis of the divider (horizontal / vertical) */\n  @Prop({ reflect: true }) titleAlignment?: TDividerTitleAlignment = 'middle';\n\n  /** Set the width of each dash of the divider's stroke. This is applicable when the stroke is dashed */\n  @Prop({ reflect: true }) strokeDashWidth?: number = 12;\n\n  /** Set the gap of the divider's stroke. This is applicable when the stroke is dashed */\n  @Prop({ reflect: true }) strokeDashGap?: number = 7;\n\n  /** Set the thickness of the divider's stroke. Value expressed in px*/\n  @Prop({ reflect: true }) strokeThickness?: number = 1;\n\n  /** Set the min width of the divider's stroke when text is not centered. Value expressed in px */\n  @Prop({ reflect: true }) strokeBasis?: number = 0;\n\n  /** Set the line of the divider's stroke. This is applicable when the stroke is dashed */\n  @Prop({ reflect: true }) strokeLinecap?: TDividerStrokeLinecap = 'butt';\n\n  // Prop lifecycle events\n  // =======================\n\n  @Watch('orientation')\n  @Watch('titleAlignment')\n  @Watch('strokeLinecap')\n  checkPropValues() {\n    validatePropValue(DIVIDER_ORIENTATION, 'horizontal', this.el, 'orientation');\n    validatePropValue(DIVIDER_TITLE_ALIGNMENT, 'middle', this.el, 'titleAlignment');\n    validatePropValue(DIVIDER_STROKE_LINECAP, 'butt', this.el, 'strokeLinecap');\n  }\n\n  // Events section\n  // Requires JSDocs for public API documentation\n  // ==============================================\n\n  // Component lifecycle events\n  // Ordered by their natural call order\n  // =====================================\n\n  connectedCallback() {\n    this.checkPropValues();\n  }\n\n  componentWillLoad() {\n    this.checkPropValues();\n  }\n\n  componentDidLoad() {\n    this.handleSlotChange();\n  }\n\n  // Listeners\n  // ==============\n\n  // Public methods API\n  // These methods are exposed on the host element.\n  // Always use two lines.\n  // Public Methods must be async.\n  // Requires JSDocs for public API documentation.\n  // ===============================================\n\n  // Local methods\n  // Internal business logic.\n  // These methods cannot be called from the host element.\n  // =======================================================\n\n  private handleSlotChange = () => {\n    this.hasTitle = hasSlotContent(this.titleElem) || !!getTextContent(this.titleElem.querySelector('slot'));\n  };\n\n  private get strokeAttributes() {\n    return {\n      ...this.strokeDrawPositions,\n      ...(this.dashed && { 'stroke-dasharray': this.strokeDasharray }),\n      'stroke-linecap': this.strokeLinecap,\n      'stroke-width': this.strokeThickness,\n    };\n  }\n\n  private get strokeDrawPositions() {\n    const drawOffset = this.strokeThickness / 2;\n    const strokeDrawPositions = {\n      [DIVIDER_ORIENTATION_ENUM.HORIZONTAL]: { x1: drawOffset, x2: '100%', y1: drawOffset, y2: drawOffset },\n      [DIVIDER_ORIENTATION_ENUM.VERTICAL]: { x1: drawOffset, x2: drawOffset, y1: drawOffset, y2: '100%' },\n    };\n    const orientationMap = new Map(Object.entries(strokeDrawPositions));\n\n    return orientationMap.get(this.orientation);\n  }\n\n  private get strokeDasharray() {\n    return `${this.strokeDashWidth}, ${this.strokeDashGap}`;\n  }\n\n  // render() function\n  // Always the last one in the class.\n  // ===================================\n\n  render() {\n    const styles = {\n      ...(this.strokeColor && { '--bq-divider--stroke-color': getColorCSSVariable(this.strokeColor) }),\n      ...(this.strokeThickness && { '--bq-divider--stroke-thickness': `${this.strokeThickness}px` }),\n      ...(!isNil(this.strokeBasis) && { '--bq-divider--stroke-basis': `${this.strokeBasis}px` }),\n    };\n\n    return (\n      <Host style={styles}>\n        <div\n          class={{\n            'bq-divider': true,\n            [`bq-divider--${this.orientation}`]: true,\n            [`bq-divider--title__${this.titleAlignment}`]: true,\n            'gap-0': !this.hasTitle,\n          }}\n          part=\"base\"\n          ref={(div) => (this.titleElem = div)}\n          role=\"separator\"\n          aria-orientation={this.orientation}\n        >\n          <svg\n            class={{\n              'bq-divider--stroke start': true,\n              '!hidden': this.strokeBasis === 0 && this.titleAlignment === 'start',\n            }}\n            part=\"dash-start\"\n          >\n            <line {...this.strokeAttributes} part=\"dash-start-line\" />\n          </svg>\n          <slot onSlotchange={this.handleSlotChange} />\n          <svg\n            class={{\n              'bq-divider--stroke end': true,\n              '!hidden': !this.hasTitle || (this.strokeBasis === 0 && this.titleAlignment === 'end'),\n            }}\n            part=\"dash-end\"\n          >\n            <line {...this.strokeAttributes} part=\"dash-end-line\" />\n          </svg>\n        </div>\n      </Host>\n    );\n  }\n}\n"],"version":3}