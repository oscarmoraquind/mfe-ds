{"file":"index.cjs.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;MAOa,kBAAkB,GAAG,CAAI,GAAQ,EAAE,CAAS;IACvD,IAAI,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC;IACxB,MAAM,MAAM,GAAG,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;IAC5B,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,MAAM,CAAC,CAAC;IAEhC,IAAI,CAAC,GAAG,MAAM;QAAE,MAAM,IAAI,UAAU,CAAC,+CAA+C,CAAC,CAAC;IAEtF,OAAO,CAAC,EAAE,EAAE;QACV,MAAM,CAAC,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,MAAM,CAAC;QAC9B,MAAM,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,IAAI,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QAC3C,KAAK,CAAC,CAAC,CAAC,GAAG,EAAE,MAAM,IAAI,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,GAAG,MAAM,CAAC;KACvD;IACD,OAAO,MAAM,CAAC;AAChB;;AChBA;;;;;MAKa,OAAO,GAAG,CAAwB,KAAQ;IACrD,IAAIA,WAAK,CAAC,KAAK,CAAC,EAAE;QAChB,OAAO,IAAI,CAAC;KACb;SAAM,IAAI,MAAM,IAAI,KAAK,EAAE;QAC1B,OAAO,CAACC,mBAAS,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;KAC/B;SAAM;QACL,OAAO,CAACA,mBAAS,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,CAAC;KAChD;AACH;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":["isNil","isDefined"],"sources":["../../packages/beeq/src/shared/utils/getRandom.ts","../../packages/beeq/src/shared/utils/isEmpty.ts"],"sourcesContent":["/**\n * Get a number of randoms items from Array\n *\n * @param {Array} arr - The array where to look\n * @param {Number} n - The number of random items to take\n * @returns {Array} An array with the number of random items specified\n */\nexport const getRandomFromArray = <T>(arr: T[], n: number): T[] => {\n  let length = arr.length;\n  const result = new Array(n);\n  const taken = new Array(length);\n\n  if (n > length) throw new RangeError('getRandom: more elements taken than available');\n\n  while (n--) {\n    const x = Date.now() % length;\n    result[n] = arr[x in taken ? taken[x] : x];\n    taken[x] = --length in taken ? taken[length] : length;\n  }\n  return result;\n};\n","import { isDefined, isNil } from '.';\n\ntype TCollection = Map<unknown, unknown> | Array<unknown> | Record<string, unknown> | Set<unknown> | null | undefined;\n\n/**\n * Check if the value is an empty array, object, set, map\n * @param value the value to be checked\n * @returns {boolean} true if value is empty\n */\nexport const isEmpty = <T extends TCollection>(value: T): boolean => {\n  if (isNil(value)) {\n    return true;\n  } else if ('size' in value) {\n    return !isDefined(value.size);\n  } else {\n    return !isDefined(Object.values(value).length);\n  }\n};\n"],"version":3}