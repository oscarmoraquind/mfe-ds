{"file":"bq-status.entry.cjs.js","mappings":";;;;;;;;;;;AAAO,MAAM,WAAW,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,MAAM,EAAE,SAAS,EAAE,SAAS,CAAU;;ACArF,MAAM,WAAW,GAAG,sy6BAAsy6B;;MCiC7y6B,QAAQ;;;;;;;;;;;IAgBM,IAAI,GAAgB,SAAS,CAAC;;;IAKvD,eAAe;QACbA,yBAAiB,CAAC,WAAW,EAAE,SAAS,EAAE,IAAI,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;KAC5D;;;;;;;IASD,iBAAiB;QACf,IAAI,CAAC,eAAe,EAAE,CAAC;KACxB;;;;;;;;;;;;;;;;IAmBD,MAAM;QACJ,QACEC,kEAAK,KAAK,EAAC,2CAA2C,EAAC,IAAI,EAAC,MAAM,EAAC,IAAI,EAAC,QAAQ,IAC9EA,uEAAU,KAAK,EAAE,kCAAkC,IAAI,CAAC,IAAI,EAAE,EAAE,IAAI,EAAC,QAAQ,EAAC,IAAI,EAAC,QAAQ,EAAC,IAAI,EAAC,KAAK,GAAG,EACzGA,kEACE,KAAK,EAAC,uGAAuG,EAC7G,IAAI,EAAC,MAAM,IAEXA,oEAAQ,CACJ,CACF,EACN;KACH;;;;;;;;;","names":["validatePropValue","h"],"sources":["../../packages/beeq/src/components/status/bq-status.types.ts","../../packages/beeq/src/components/status/scss/bq-status.scss?tag=bq-status&encapsulation=shadow","../../packages/beeq/src/components/status/bq-status.tsx"],"sourcesContent":["export const STATUS_TYPE = ['alert', 'danger', 'info', 'neutral', 'success'] as const;\nexport type TStatusType = (typeof STATUS_TYPE)[number];\n","@import './bq-status.variables';\n\n.bq-status__circle {\n  &::part(base) {\n    --bq-badge--size-medium: var(--bq-status-circle--size);\n  }\n\n  &.success::part(base) {\n    --bq-badge--background-color: theme(backgroundColor.ui.success);\n  }\n\n  &.danger::part(base) {\n    --bq-badge--background-color: theme(backgroundColor.ui.danger);\n  }\n\n  &.neutral::part(base) {\n    --bq-badge--background-color: theme(backgroundColor.ui.secondary);\n  }\n\n  &.alert::part(base) {\n    --bq-badge--background-color: theme(backgroundColor.ui.warning);\n  }\n\n  &.info::part(base) {\n    --bq-badge--background-color: theme(backgroundColor.ui.brand);\n  }\n}\n\n.bq-status__text ::slotted(*) {\n  @apply text-s font-medium leading-regular text-primary p-b-0 p-i-0 m-b-0 m-i-0;\n}\n","import { Component, Element, h, Prop, Watch } from '@stencil/core';\n\nimport { STATUS_TYPE, TStatusType } from './bq-status.types';\nimport { validatePropValue } from '../../shared/utils';\n\n/**\n * The Status Component is a UI element that represents the current state or condition of an item, task, or process.\n *\n * @example How to use it\n * ```html\n * <bq-status type=\"alert\">Alert status</bq-status>\n * ```\n *\n * @documentation https://www.beeq.design/3d466e231/p/46c8d5-status/b/09d7b1\n * @status stable\n *\n * @dependency bq-badge\n *\n * @attr {\"alert\" | \"danger\" | \"info\" | \"neutral\" | \"success\"} type - It defines the type of status to display.\n *\n * @slot The content of the status component.\n *\n * @part base - The component's internal wrapper of the status component.\n * @part circle - The colored circle that marks the status type.\n * @part text - The `<div>` container that holds the text label of the status component.\n *\n * @cssprop --bq-status-circ - Status circle size.\n */\n@Component({\n  tag: 'bq-status',\n  styleUrl: './scss/bq-status.scss',\n  shadow: true,\n})\nexport class BqStatus {\n  // Own Properties\n  // ====================\n\n  // Reference to host HTML element\n  // ===================================\n  @Element() el!: HTMLBqStatusElement;\n\n  // State() variables\n  // Inlined decorator, alphabetical order\n  // =======================================\n\n  // Public Property API\n  // ========================\n\n  /** It defines the type of status to display  */\n  @Prop({ reflect: true }) type: TStatusType = 'neutral';\n\n  // Prop lifecycle events\n  // =======================\n  @Watch('type')\n  checkPropValues() {\n    validatePropValue(STATUS_TYPE, 'neutral', this.el, 'type');\n  }\n  // Events section\n  // Requires JSDocs for public API documentation\n  // ==============================================\n\n  // Component lifecycle events\n  // Ordered by their natural call order\n  // =====================================\n\n  componentWillLoad() {\n    this.checkPropValues();\n  }\n  // Listeners\n  // ==============\n\n  // Public methods API\n  // These methods are exposed on the host element.\n  // Always use two lines.\n  // Public Methods must be async.\n  // Requires JSDocs for public API documentation.\n  // ===============================================\n\n  // Local methods\n  // Internal business logic.\n  // These methods cannot be called from the host element.\n  // =======================================================\n\n  // render() function\n  // Always the last one in the class.\n  // ===================================\n  render() {\n    return (\n      <div class=\"bq-status inline-flex items-center gap-xs\" part=\"base\" role=\"status\">\n        <bq-badge class={`bq-status__circle rounded-full ${this.type}`} size=\"medium\" part=\"circle\" role=\"img\" />\n        <div\n          class=\"bq-status__text text-s font-medium leading-regular text-primary max-bs-[20px] p-b-0 p-i-0 m-b-0 m-i-0\"\n          part=\"text\"\n        >\n          <slot />\n        </div>\n      </div>\n    );\n  }\n}\n"],"version":3}