{"version":3,"file":"bq-dropdown.js","sourceRoot":"","sources":["../../../../../../src/components/dropdown/bq-dropdown.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Element, Event, EventEmitter, h, Listen, Prop, Watch } from '@stencil/core';\n\nimport { Placement } from '../../services/interfaces';\n\nlet id = 0;\n\n/**\n * The Dropdown Component is commonly used when presenting a list of selectable options that are too numerous to fit comfortably on the screen.\n * They provide an efficient way to save space and present a long list of options in a compact and organized manner.\n *\n * @example How to use it\n * ```html\n * <bq-dropdown placement=\"bottom-start\">\n *   <bq-button slot=\"trigger\">Dropdown</bq-button>\n *   <bq-option-list>\n *     <bq-option value=\"users\">...</bq-option>\n *     <bq-option value=\"user\">...</bq-option>\n *     <bq-option value=\"dashboard\">...</bq-option>\n *     <bq-option value=\"settings\">...</bq-option>\n *     <bq-option value=\"logout\">...</bq-option>\n *   </bq-option-list>\n * </bq-dropdown>\n * ```\n *\n * @documentation https://www.beeq.design/3d466e231/p/47ff4b-dropdown\n * @status stable\n *\n * @dependency bq-panel\n *\n * @attr {boolean} disabled - If true, the dropdown panel will be visible and won't be shown.\n * @attr {number} distance - Represents the distance (gutter or margin) between the panel and the trigger element.\n * @attr {boolean} keep-open-on-select - If true, the panel will remain open after a selection is made.\n * @attr {\"top\" | \"bottom\" | \"left\" | \"right\" | \"top-start\" | \"top-end\" | \"bottom-start\" | \"bottom-end\" | \"left-start\" | \"left-end\" | \"right-start\" | \"right-end\"} placement - Position of the panel.\n * @attr {boolean} open - If true, the panel will be visible.\n * @attr {string} panel-height - When set, it will override the height of the dropdown panel.\n * @attr {boolean} same-width - Whether the panel should have the same width as the trigger element.\n * @attr {number} skidding - Represents the skidding between the panel and the trigger element.\n * @attr {\"fixed\" | \"absolute\"} strategy - Defines the strategy to position the panel.\n *\n * @event bqOpen - Callback handler to be called when the dropdown panel is opened or closed.\n *\n * @slot trigger - The trigger element that opens the dropdown panel.\n * @slot - The content of the dropdown panel.\n *\n * @part base - The component's internal wrapper.\n * @part dropdown - The `<bq-panel>` element used under the hood to display the dropdown panel.\n * @part panel - The `<div>` element used to display and style the panel inside the `<bq-panel>` element.\n * @part trigger - The `<div>` element that hosts the trigger element.\n *\n * @cssprop --bq-panel--background - Panel background color\n * @cssprop --bq-panel--border-color - Panel border color\n * @cssprop --bq-panel--border-radius - Panel border radius\n * @cssprop --bq-panel--border-style - Panel border style\n * @cssprop --bq-panel--border-width - Panel border width\n * @cssprop --bq-panel--box-shadow - Panel box shadow\n * @cssprop --bq-panel--padding - Panel padding\n * @cssprop --bq-panel--height - Panel height\n * @cssprop --bq-panel--width - Panel width\n * @cssprop --bq-panel-z-index - Panel z-index applied when opened\n */\n@Component({\n  tag: 'bq-dropdown',\n  styleUrl: './scss/bq-dropdown.scss',\n  shadow: true,\n})\nexport class BqDropdown {\n  // Own Properties\n  // ====================\n\n  private dropdownPanelId = `bq-dropdown-panel-${++id}`;\n  private triggerElem: HTMLElement;\n\n  // Reference to host HTML element\n  // ===================================\n\n  @Element() el!: HTMLBqDropdownElement;\n\n  // State() variables\n  // Inlined decorator, alphabetical order\n  // =======================================\n\n  // Public Property API\n  // ========================\n\n  /** If true, the dropdown panel will be visible and won't be shown. */\n  @Prop({ reflect: true }) disabled?: boolean = false;\n\n  /** Represents the distance (gutter or margin) between the panel and the trigger element. */\n  @Prop({ reflect: true }) distance?: number = 4;\n\n  /** If true, the panel will remain open after a selection is made. */\n  @Prop({ reflect: true }) keepOpenOnSelect?: boolean = false;\n\n  /** Position of the panel */\n  @Prop({ reflect: true }) placement?: Placement = 'bottom-start';\n\n  /** If true, the panel will be visible. */\n  @Prop({ reflect: true, mutable: true }) open?: boolean = false;\n\n  /** When set, it will override the height of the dropdown panel */\n  @Prop({ reflect: true }) panelHeight?: string;\n\n  /** Whether the panel should have the same width as the trigger element */\n  @Prop({ reflect: true }) sameWidth?: boolean = false;\n\n  /**  Represents the skidding between the panel and the trigger element. */\n  @Prop({ reflect: true }) skidding?: number = 0;\n\n  /** Defines the strategy to position the panel */\n  @Prop({ reflect: true }) strategy?: 'fixed' | 'absolute' = 'fixed';\n\n  // Prop lifecycle events\n  // =======================\n\n  @Watch('open')\n  onOpenChange() {\n    this.bqOpen.emit({ open: this.open });\n  }\n\n  @Watch('disabled')\n  handleDisabledChange() {\n    if (!this.triggerElem) return;\n\n    // set 'disabled' attribute based on 'this.disabled' value, ensuring consistent state handling\n    if (!this.disabled) {\n      this.triggerElem?.removeAttribute('disabled');\n      return;\n    }\n    this.triggerElem?.setAttribute('disabled', 'true');\n  }\n\n  // Events section\n  // Requires JSDocs for public API documentation\n  // ==============================================\n\n  /** Callback handler to be called when the dropdown panel is opened or closed. */\n  @Event() bqOpen: EventEmitter<{ open: boolean }>;\n\n  // Component lifecycle events\n  // Ordered by their natural call order\n  // =====================================\n\n  componentDidLoad() {\n    this.triggerElem = this.el.querySelector('[slot=\"trigger\"]');\n    this.handleDisabledChange();\n  }\n\n  // Listeners\n  // ==============\n\n  /** Listens for the 'click' event on the document object\n   * and closes the dropdown panel if the click is outside the component.\n   */\n  @Listen('click', { target: 'document', passive: true })\n  onClickOutside(event: MouseEvent) {\n    if (!this.open) return;\n\n    // Close when clicking outside of the close element\n    const path = event.composedPath();\n    if (!path.includes(this.el)) {\n      this.open = false;\n    }\n  }\n\n  /**\n   * Listens for the 'keyup' event on the window object\n   * and closes the dropdown panel if the 'Escape' key or 'Tab' key outside the component is pressed.\n   */\n  @Listen('keyup', { target: 'window', passive: true })\n  onEscape(event: KeyboardEvent) {\n    if (!this.open) return;\n\n    if (event.key === 'Escape' || (event.key === 'Tab' && !event.composedPath().includes(this.el))) {\n      this.open = false;\n    }\n  }\n\n  @Listen('bqSelect', { passive: true })\n  onItemSelect() {\n    if (this.keepOpenOnSelect) return;\n\n    this.open = false;\n  }\n\n  // Public methods API\n  // These methods are exposed on the host element.\n  // Always use two lines.\n  // Public Methods must be async.\n  // Requires JSDocs for public API documentation.\n  // ===============================================\n\n  // Local methods\n  // Internal business logic.\n  // These methods cannot be called from the host element.\n  // =======================================================\n\n  private togglePanel = (): void => {\n    // Don't toggle the panel if the component is disabled or the trigger element is disabled\n    if (this.disabled || this.triggerElem?.hasAttribute('disabled')) return;\n\n    this.open = !this.open;\n  };\n\n  // render() function\n  // Always the last one in the class.\n  // ===================================\n\n  render() {\n    const style = {\n      ...(this.panelHeight && { '--bq-panel--height': this.panelHeight }),\n    };\n\n    return (\n      <div class=\"bq-dropdown\" part=\"base\">\n        {/* TRIGGER CONTAINER */}\n        <div\n          class=\"bq-dropdown__trigger block\"\n          aria-controls={this.dropdownPanelId}\n          aria-haspopup=\"true\"\n          onClick={this.togglePanel}\n          part=\"trigger\"\n        >\n          <slot name=\"trigger\" />\n        </div>\n        {/* PANEL */}\n        <bq-panel\n          style={style}\n          id={this.dropdownPanelId}\n          class=\"bq-dropdown__panel\"\n          distance={this.distance}\n          placement={this.placement}\n          open={this.open}\n          sameWidth={this.sameWidth}\n          skidding={this.skidding}\n          strategy={this.strategy}\n          role=\"group\"\n          part=\"dropdown\"\n          exportparts=\"panel\"\n        >\n          <slot />\n        </bq-panel>\n      </div>\n    );\n  }\n}\n"]}