{"version":3,"file":"bq-accordion-group.js","sourceRoot":"","sources":["../../../../../../src/components/accordion-group/bq-accordion-group.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Element, h, Listen, Prop, Watch } from '@stencil/core';\n\nimport { isHTMLElement, isNil } from '../../shared/utils';\nimport { TAccordionAppearance, TAccordionSize } from '../accordion/bq-accordion.types';\n\n/**\n * The accordion group component is a container for multiple accordion elements.\n * It allows to manage the appearance and size of all accordions at once.\n *\n * @example How to use it\n * ```html\n * <bq-accordion-group appearance=\"filled\" size=\"medium\">\n *   <bq-accordion> ... </bq-accordion>\n *   <bq-accordion> ... </bq-accordion>\n *   <bq-accordion> ... </bq-accordion>\n * </bq-accordion-group>\n * ```\n *\n * @documentation https://www.beeq.design/3d466e231/p/713eae-accordion\n * @status stable\n *\n * @attr {\"filled\" | \"ghost\"} [appearance=\"filled\"] - The appearance style of accordion to be applied to all accordions\n * @attr {boolean} [expandAll=false] - If true all accordions are expanded\n * @attr {boolean} [no-animation=false] - Animation is set through JS when the browser does not support CSS calc-size() If true, the accordion animation, will be disabled. No animation will be applied.\n * @attr {boolean} [multiple=false] - If true multiple accordions can be expanded at the same time\n * @attr {\"small\" | \"medium\"} [size=\"medium\"] - The size of accordion to be applied to all accordions\n *\n * @slot - The default slot where the bq-accordion elements are placed.\n *\n * @part base - The component's base wrapper.\n *\n * @cssprop --bq-accordion-group--gap - Accordion group distance between elements\n */\n@Component({\n  tag: 'bq-accordion-group',\n  styleUrl: './scss/bq-accordion-group.scss',\n  shadow: true,\n})\nexport class BqAccordionGroup {\n  // Own Properties\n  // ====================\n\n  // Reference to host HTML element\n  // ===================================\n\n  @Element() el!: HTMLBqAccordionGroupElement;\n\n  // State() variables\n  // Inlined decorator, alphabetical order\n  // =======================================\n\n  // Public Property API\n  // ========================\n\n  /** The appearance style of accordion to be applied to all accordions */\n  @Prop({ reflect: true, mutable: true }) appearance: TAccordionAppearance = 'filled';\n\n  /** If true all accordions are expanded */\n  @Prop({ reflect: true }) expandAll: boolean;\n\n  /**\n   * Animation is set through JS when the browser does not support CSS calc-size()\n   * If true, the accordion animation, will be disabled. No animation will be applied.\n   */\n  @Prop({ reflect: true }) noAnimation: boolean = false;\n\n  /** If true multiple accordions can be expanded at the same time */\n  @Prop({ reflect: true }) multiple: boolean = false;\n\n  /** The size of accordion to be applied to all accordions */\n  @Prop({ reflect: true, mutable: true }) size: TAccordionSize = 'medium';\n\n  // Prop lifecycle events\n  // =======================\n\n  @Watch('appearance')\n  @Watch('expandAll')\n  @Watch('noAnimation')\n  @Watch('size')\n  checkPropValues() {\n    this.bqAccordionElements.forEach((bqAccordionElement) => {\n      // NOTE: if expandAll is nil we will keep accordion default state\n      if (!isNil(this.expandAll)) {\n        bqAccordionElement.expanded = this.expandAll;\n      }\n      bqAccordionElement.appearance = this.appearance;\n      bqAccordionElement.noAnimation = this.noAnimation;\n      bqAccordionElement.size = this.size;\n    });\n  }\n\n  // Events section\n  // Requires JSDocs for public API documentation\n  // ==============================================\n\n  @Listen('bqClick', { passive: true })\n  onBqClick(event: CustomEvent<HTMLBqAccordionElement>) {\n    const { detail: bqElem } = event;\n    // Make sure the event is coming from a bq-accordion element and its a child of the bq-accordion-group\n    if (!isHTMLElement(bqElem, 'bq-accordion') || !this.el.contains(bqElem)) return;\n    // We keep default behavior if multiple accordion can be expanded\n    if (this.multiple) return;\n\n    this.bqAccordionElements.forEach((bqAccordionElement) => {\n      if (bqAccordionElement === event.detail) return;\n\n      bqAccordionElement.expanded = false;\n    });\n  }\n\n  // Component lifecycle events\n  // Ordered by their natural call order\n  // =====================================\n\n  componentWillLoad() {\n    this.checkPropValues();\n  }\n\n  // Listeners\n  // ==============\n\n  // Public methods API\n  // These methods are exposed on the host element.\n  // Always use two lines.\n  // Public Methods must be async.\n  // Requires JSDocs for public API documentation.\n  // ===============================================\n\n  // Local methods\n  // Internal business logic.\n  // These methods cannot be called from the host element.\n  // =======================================================\n\n  private get bqAccordionElements(): HTMLBqAccordionElement[] {\n    return Array.from(this.el.querySelectorAll('bq-accordion'));\n  }\n  // render() function\n  // Always the last one in the class.\n  // ===================================\n\n  render() {\n    return (\n      <div class=\"flex flex-col gap-[--bq-accordion-group--gap]\" part=\"base\">\n        <slot />\n      </div>\n    );\n  }\n}\n"]}