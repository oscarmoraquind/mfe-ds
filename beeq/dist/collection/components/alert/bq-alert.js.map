{"version":3,"file":"bq-alert.js","sourceRoot":"","sources":["../../../../../../src/components/alert/bq-alert.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Element, Event, EventEmitter, h, Host, Method, Prop, State, Watch } from '@stencil/core';\n\nimport { ALERT_TYPE, TAlertBorderRadius, TAlertType } from './bq-alert.types';\nimport { debounce, enter, hasSlotContent, leave, TDebounce, validatePropValue } from '../../shared/utils';\n\n/**\n * The Alert is a user interface component used to convey important information to the user in a clear and concise manner.\n * It can be used to notify users of success, failure, warning, or any other type of information that needs to be brought to their attention.\n *\n * @example How to use it\n * ```html\n * <bq-alert>\n *   <bq-icon name=\"star\" slot=\"icon\"></bq-icon>\n *   Title\n *   <span slot=\"body\">\n *     Description\n *     <a class=\"bq-link\" href=\"https://example.com\">Link</a>\n *   </span>\n *   <div slot=\"footer\">\n *     <bq-button appearance=\"primary\" size=\"small\">Button</bq-button>\n *     <bq-button appearance=\"link\" size=\"small\">Button</bq-button>\n *   </div>\n * </bq-alert>\n * ```\n *\n * @documentation https://www.beeq.design/3d466e231/p/848a50-alert\n * @status stable\n *\n * @dependency bq-button\n * @dependency bq-icon\n *\n * @attr {boolean} [auto-dismiss=false] - If true, the alert will automatically hide after the specified amount of time\n * @attr {\"none\" | \"xs2\" | \"xs\" | \"s\" | \"m\" | \"l\" | \"full\"} [border='s'] - The corner radius of the alert component\n * @attr {boolean} [disable-close=false] - If true, the close button at the top right of the alert won't be shown\n * @attr {boolean} [hide-icon=false] - If true, the alert icon won't be shown\n * @attr {boolean} [open=false] - If true, the alert will be shown\n * @attr {number} [time=3000] - The length of time, in milliseconds, after which the alert will close itself. Only valid if `autoDismiss=\"true\"`\n * @attr {\"info\" | \"success\" | \"warning\" | \"error\" | \"default\"} [type='default'] - Type of Alert\n * @attr {boolean} [sticky=false] - If true, the alert component will remain fixed at the top of the page, occupying the full viewport\n *\n * @event bqHide - Callback handler to be called when the alert is hidden\n * @event bqShow - Callback handler to be called when the alert is shown\n * @event bqAfterShow - Callback handler to be called after the alert has been shown\n * @event bqAfterHide - Callback handler to be called after the alert has been hidden\n *\n * @slot - The alert title content (no slot name required)\n * @slot body - The alert description content\n * @slot footer - The alert footer content\n * @slot icon - The predefined icon based on the alert type (info, success, warning, error, default)\n * @slot btn-close - The close button of the alert\n *\n * @part base - The `<div>` container of the predefined bq-icon component\n * @part body - The container `<div>` that wraps the alert description content\n * @part btn-close - The `bq-button` used to close the alert\n * @part content - The container `<div>` that wraps all the alert content (title, description, footer)\n * @part footer - The container `<div>` that wraps the alert footer content\n * @part icon - The `<bq-icon>` element used to render a predefined icon based on the alert type (info, success, warning, error, default)\n * @part icon-outline - The container `<div>` that wraps the icon element\n * @part main - The container `<div>` that wraps the alert main content (title, description)\n * @part svg - The `<svg>` element of the predefined bq-icon component\n * @part title - The container `<div>` that wraps the alert title content\n * @part wrapper - The wrapper container `<div>` of the element inside the shadow DOM\n *\n * @cssprop --bq-alert--background - The alert background color\n * @cssprop --bq-alert--border-radius - The alert border radius\n * @cssprop --bq-alert--content-footer-gap - The alert content and footer gap\n * @cssprop --bq-alert--title-body-gap - The alert title and body gap\n *\n * @cssprop --bq-alert--border-color - The alert border color\n * @cssprop --bq-alert--border-style - The alert border style\n * @cssprop --bq-alert--border-width - The alert border width\n *\n * @cssprop --bq-alert--background-info - The alert background color for info type\n * @cssprop --bq-alert--background-success - The alert background color for success type\n * @cssprop --bq-alert--background-warning - The alert background color for warning type\n * @cssprop --bq-alert--background-error - The alert background color for error type\n *\n * @cssprop --bq-alert--border-info - The alert border color for info type\n * @cssprop --bq-alert--border-success - The alert border color for success type\n * @cssprop --bq-alert--border-warning - The alert border color for warning type\n * @cssprop --bq-alert--border-error - The alert border color for error type\n *\n * @cssprop --bq-alert--icon-color-info - The alert icon color for info type\n * @cssprop --bq-alert--icon-color-success - The alert icon color for success type\n * @cssprop --bq-alert--icon-color-warning - The alert icon color for warning type\n * @cssprop --bq-alert--icon-color-error - The alert icon color for error type\n *\n * @cssprop --bq-alert--padding - The alert padding\n * @cssprop --bq-alert--min-width - The alert min width\n */\n@Component({\n  tag: 'bq-alert',\n  styleUrl: './scss/bq-alert.scss',\n  shadow: true,\n})\nexport class BqAlert {\n  // Own Properties\n  // ====================\n\n  private autoDismissDebounce: TDebounce<void>;\n  private bodyElem: HTMLDivElement;\n  private footerElem: HTMLDivElement;\n  private alertElement: HTMLDivElement;\n\n  // Reference to host HTML element\n  // ===================================\n\n  @Element() el!: HTMLBqAlertElement;\n\n  // State() variables\n  // Inlined decorator, alphabetical order\n  // =======================================\n\n  @State() private hasContent = false;\n  @State() private hasFooter = false;\n\n  // Public Property API\n  // ========================\n\n  /** If true, the alert will automatically hide after the specified amount of time */\n  @Prop({ reflect: true }) autoDismiss: boolean;\n\n  /** The corner radius of the alert component */\n  @Prop({ reflect: true }) border: TAlertBorderRadius = 's';\n\n  /** If true, the close button at the top right of the alert won't be shown */\n  @Prop({ reflect: true }) disableClose: boolean;\n\n  /** If true, the alert icon won't be shown */\n  @Prop({ reflect: true }) hideIcon: boolean;\n\n  /** If true, the alert will be shown */\n  @Prop({ reflect: true, mutable: true }) open: boolean;\n\n  /** The length of time, in milliseconds, after which the alert will close itself. Only valid if `autoDismiss=\"true\"` */\n  @Prop({ reflect: true }) time: number = 3000;\n\n  /** Type of Alert */\n  @Prop({ reflect: true }) type: TAlertType = 'default';\n\n  /** If true, the alert component will remain fixed at the top of the page, occupying the full viewport */\n  @Prop({ reflect: true }) sticky: boolean;\n\n  // Prop lifecycle events\n  // =======================\n  @Watch('autoDismiss')\n  @Watch('time')\n  handleTimeout() {\n    this.autoDismissDebounce?.cancel();\n    if (!this.autoDismiss) return;\n\n    this.autoDismissDebounce = debounce(() => {\n      this.hide();\n    }, this.time);\n    // Make sure to autodismiss the notification if the `auto-dismiss` value changed while open\n    if (this.open) this.autoDismissDebounce();\n  }\n\n  @Watch('open')\n  handleOpenChange() {\n    this.autoDismissDebounce?.cancel();\n\n    if (!this.open) {\n      this.handleHide();\n      return;\n    }\n\n    this.handleShow();\n\n    if (this.autoDismiss) {\n      this.autoDismissDebounce();\n    }\n  }\n\n  @Watch('type')\n  checkPropValues() {\n    validatePropValue(ALERT_TYPE, 'info', this.el, 'type');\n  }\n\n  // Events section\n  // Requires JSDocs for public API documentation\n  // ==============================================\n\n  /** Callback handler to be called when the alert is hidden */\n  @Event() bqHide!: EventEmitter;\n\n  /** Callback handler to be called when the alert is shown */\n  @Event() bqShow!: EventEmitter;\n\n  /** Callback handler to be called after the alert has been shown */\n  @Event() bqAfterShow!: EventEmitter;\n\n  /** Callback handler to be called after the alert has been hidden */\n  @Event() bqAfterHide!: EventEmitter;\n\n  // Component lifecycle events\n  // Ordered by their natural call order\n  // =====================================\n\n  componentWillLoad() {\n    this.checkPropValues();\n    this.handleTimeout();\n  }\n\n  componentDidLoad() {\n    if (!this.open) {\n      this.el.classList.add('is-hidden');\n    }\n  }\n\n  // Listeners\n  // ==============\n\n  // Public methods API\n  // These methods are exposed on the host element.\n  // Always use two lines.\n  // Public Methods must be async.\n  // Requires JSDocs for public API documentation.\n  // ===============================================\n\n  /** Method to be called to hide the alert component */\n  @Method()\n  async hide(): Promise<void> {\n    this.open = false;\n  }\n\n  /** Method to be called to show the alert component */\n  @Method()\n  async show(): Promise<void> {\n    this.open = true;\n  }\n\n  // Local methods\n  // Internal business logic.\n  // These methods cannot be called from the host element.\n  // =======================================================\n\n  private handleHide = async () => {\n    const ev = this.bqHide.emit(this.el);\n    if (!ev.defaultPrevented) {\n      await leave(this.alertElement);\n      this.el.classList.add('is-hidden');\n      this.handleTransitionEnd();\n    }\n  };\n\n  private handleShow = async () => {\n    const ev = this.bqShow.emit(this.el);\n    if (!ev.defaultPrevented) {\n      this.el.classList.remove('is-hidden');\n      await enter(this.alertElement);\n      this.handleTransitionEnd();\n    }\n  };\n\n  private handleTransitionEnd = () => {\n    if (this.open) {\n      this.bqAfterShow.emit();\n      return;\n    }\n\n    this.bqAfterHide.emit();\n  };\n\n  private handleContentSlotChange = () => {\n    this.hasContent = hasSlotContent(this.bodyElem, 'body');\n  };\n\n  private handleFooterSlotChange = () => {\n    this.hasFooter = hasSlotContent(this.footerElem, 'footer');\n  };\n\n  private get iconName(): string {\n    const iconName = {\n      error: 'x-circle',\n      success: 'check-circle',\n      warning: 'warning-circle',\n    };\n\n    return iconName[this.type] || 'info';\n  }\n\n  // render() function\n  // Always the last one in the class.\n  // ===================================\n\n  render() {\n    const style = {\n      ...(this.border && { '--bq-alert--border-radius': `var(--bq-radius--${this.border})` }),\n    };\n\n    return (\n      <Host\n        style={style}\n        class={{ 'is-sticky': this.sticky }}\n        aria-hidden={!this.open ? 'true' : 'false'}\n        hidden={!this.open ? 'true' : 'false'}\n        role=\"alert\"\n      >\n        <div\n          class={{\n            [`bq-alert bq-alert__${this.type}`]: true,\n            'is-sticky': this.sticky,\n          }}\n          data-transition-enter=\"transition ease-out duration-300\"\n          data-transition-enter-start=\"opacity-0\"\n          data-transition-enter-end=\"opacity-100\"\n          data-transition-leave=\"transition ease-in duration-200\"\n          data-transition-leave-start=\"opacity-100\"\n          data-transition-leave-end=\"opacity-0\"\n          ref={(div) => (this.alertElement = div)}\n          part=\"wrapper\"\n        >\n          {/* CLOSE BUTTON */}\n          {!this.disableClose && (\n            <bq-button\n              class=\"bq-alert__close absolute end-5 focus-visible:focus [&::part(label)]:inline-flex\"\n              appearance=\"text\"\n              size=\"small\"\n              onClick={this.hide.bind(this)}\n              part=\"btn-close\"\n            >\n              <slot name=\"btn-close\">\n                <bq-icon name=\"x\" />\n              </slot>\n            </bq-button>\n          )}\n          {/* ICON */}\n          <div\n            class={{\n              [`bq-alert__icon--${this.type} me-s flex text-left align-top`]: true,\n              '!hidden': this.hideIcon,\n            }}\n            part=\"icon-outline\"\n          >\n            <slot name=\"icon\">\n              {this.type !== 'default' && <bq-icon name={this.iconName} part=\"icon\" exportparts=\"base,svg\" />}\n            </slot>\n          </div>\n          {/* MAIN */}\n          <div class=\"flex flex-col items-start gap-[--bq-alert--content-footer-gap]\" part=\"main\">\n            <div class=\"flex flex-col gap-[--bq-alert--title-body-gap]\" part=\"content\">\n              {/* TITLE */}\n              <div\n                class={{\n                  'title-font font-semibold leading-regular text-primary': true,\n                  'flex items-center': this.sticky,\n                }}\n                part=\"title\"\n              >\n                <slot />\n              </div>\n              {/* BODY */}\n              <div\n                class={{ 'text-s leading-regular': true, '!hidden': !this.hasContent }}\n                ref={(div) => (this.bodyElem = div)}\n                part=\"body\"\n              >\n                <slot name=\"body\" onSlotchange={this.handleContentSlotChange} />\n              </div>\n            </div>\n            {/* FOOTER */}\n            <div\n              class={{ 'flex items-start gap-xs': true, '!hidden': !this.hasFooter }}\n              ref={(div) => (this.footerElem = div)}\n              part=\"footer\"\n            >\n              <slot name=\"footer\" onSlotchange={this.handleFooterSlotChange} />\n            </div>\n          </div>\n        </div>\n      </Host>\n    );\n  }\n}\n"]}