{"version":3,"file":"bq-avatar.js","sourceRoot":"","sources":["../../../../../../src/components/avatar/bq-avatar.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Element, h, Host, Prop, State, Watch } from '@stencil/core';\n\nimport { AVATAR_SHAPE, AVATAR_SIZE, TAvatarShape, TAvatarSize } from './bq-avatar.types';\nimport { validatePropValue } from '../../shared/utils';\n\n/**\n * The Avatar component is a simple and customizable element that displays an image or initials in a circular or square shape.\n * This component is useful for displaying user profile pictures or any other image that represents a person or an entity.\n *\n * @example How to use it\n * ```html\n * <bq-avatar\n *   alt-text=\"John Doe profile picture\"\n *   image=\"/image/url/photo-1524593689594.jpeg\"\n *   label=\"John Doe profile picture\"\n *   shape=\"circle\"\n *   size=\"medium\"\n * >\n *   <bq-badge slot=\"badge\" text-color=\"#fff\">9</bq-badge>\n * </bq-avatar>\n * ```\n *\n * @documentation https://www.beeq.design/3d466e231/p/148da7-avatar\n * @status stable\n *\n * @attr {string} alt-text - Alternate text for the avatar image if the image cannot be displayed.\n * @attr {string} image - The image source to load on the avatar (this can be also a base64 encoded image).\n * @attr {string} label - A text to use for describing the avatar on assistive devices.\n * @attr {string} initials - The text to display on avatar.\n * @attr {\"circle\" | \"square\"} shape - The shape of the avatar.\n * @attr {\"xsmall\" | \"small\" | \"medium\" | \"large\"} size - The size of the avatar.\n *\n * @slot badge - The badge slot is used to add a badge to the avatar. The badge is a small circle or square that can be used to display a number or a status.\n *\n * @part base - The component's internal wrapper.\n * @part img - The `<image>` tag element that load the image source.\n * @part text - The `<span>` tag element that rendered the `Initials` text string.\n * @part badge - The container that wraps the badge slot element.\n *\n * @cssprop --bq-avatar--background - Avatar background color\n *\n * @cssprop --bq-avatar--border-color - Avatar border color\n * @cssprop --bq-avatar--border-style - Avatar border style\n * @cssprop --bq-avatar--border-width - Avatar border width\n *\n * @cssprop --bq-avatar--border-radius-circle - Avatar border radius for circle & any size\n * @cssprop --bq-avatar--border-radius-squareXs - Avatar border radius for square & size xsmall\n * @cssprop --bq-avatar--border-radius-squareS - Avatar border radius for square & size small\n * @cssprop --bq-avatar--border-radius-squareM - Avatar border radius for square & size medium/large\n *\n * @cssprop --bq-avatar--size-xsmall - Avatar xsmall size\n * @cssprop --bq-avatar--size-small - Avatar small size\n * @cssprop --bq-avatar--size-medium - Avatar medium size\n * @cssprop --bq-avatar--size-large - Avatar large size\n *\n * @cssprop --bq-avatar--badge-top-square - Badge top position shape square\n * @cssprop --bq-avatar--badge-left-square - Badge left position shape square\n * @cssprop --bq-avatar--badge-top-circle - Badge top position shape circle\n * @cssprop --bq-avatar--badge-left-circle - Badge left position shape circle\n */\n@Component({\n  tag: 'bq-avatar',\n  styleUrl: './scss/bq-avatar.scss',\n  shadow: true,\n})\nexport class BqAvatar {\n  // Own Properties\n  // ====================\n\n  trimmedInitials: string;\n\n  // Reference to host HTML element\n  // ===================================\n\n  @Element() el!: HTMLBqAvatarElement;\n\n  // State() variables\n  // Inlined decorator, alphabetical order\n  // =======================================\n\n  @State() hasError: boolean;\n\n  // Public Property API\n  // ========================\n\n  /** Alternate text for the avatar image if the image cannot be displayed */\n  @Prop({ reflect: true }) altText: string;\n\n  /** The image source to load on the avatar (this can be also a base64 encoded image) */\n  @Prop({ reflect: true }) image: string;\n\n  /** A text to use for describing the avatar on assistive devices */\n  @Prop({ reflect: true }) label: string;\n\n  /** The text to display on avatar */\n  @Prop({ reflect: true }) initials: string;\n\n  /** The shape of the avatar */\n  @Prop({ reflect: true }) shape: TAvatarShape = 'circle';\n\n  /** The size of the avatar */\n  @Prop({ reflect: true, mutable: true }) size: TAvatarSize = 'medium';\n\n  // Prop lifecycle events\n  // =======================\n\n  @Watch('image')\n  handleImagePropChange() {\n    // Reset the error when a new image source is provided\n    this.hasError = false;\n  }\n\n  @Watch('shape')\n  @Watch('size')\n  checkPropValues() {\n    validatePropValue(AVATAR_SHAPE, 'circle', this.el, 'shape');\n    validatePropValue(AVATAR_SIZE, 'medium', this.el, 'size');\n  }\n\n  @Watch('initials')\n  @Watch('size')\n  onInitialsChange() {\n    this.trimInitialsBasedOnSize();\n  }\n\n  // Events section\n  // Requires JSDocs for public API documentation\n  // ==============================================\n\n  // Component lifecycle events\n  // Ordered by their natural call order\n  // =====================================\n\n  componentWillLoad() {\n    this.trimInitialsBasedOnSize();\n    this.checkPropValues();\n  }\n\n  // Listeners\n  // ==============\n\n  // Public methods API\n  // These methods are exposed on the host element.\n  // Always use two lines.\n  // Public Methods must be async.\n  // Requires JSDocs for public API documentation.\n  // ===============================================\n\n  // Local methods\n  // Internal business logic.\n  // These methods cannot be called from the host element.\n  // =======================================================\n\n  private onImageError = () => {\n    this.hasError = true;\n  };\n\n  private trimInitialsBasedOnSize = (): void => {\n    if (!this.initials) return;\n\n    AVATAR_SIZE.forEach((size: TAvatarSize) => {\n      if (this.size === size) {\n        this.trimmedInitials = this.initials.substring(0, this.getIndex(size));\n      }\n    });\n  };\n\n  private getIndex = (size: TAvatarSize): number => {\n    const sizeIndexMap = {\n      xsmall: 1,\n      small: 2,\n      medium: 3,\n      large: 4,\n    };\n    return sizeIndexMap[size] ?? sizeIndexMap.xsmall;\n  };\n\n  // render() function\n  // Always the last one in the class.\n  // ===================================\n\n  render() {\n    return (\n      <Host>\n        <div\n          class={{\n            'bq-avatar': true,\n            [`size--${this.size}`]: true,\n            'rounded-[--bq-avatar--border-radius-circle]': this.shape === 'circle',\n            'rounded-[--bq-avatar--border-radius-squareXs]': this.shape === 'square' && this.size === 'xsmall',\n            'rounded-[--bq-avatar--border-radius-squareS]': this.shape === 'square' && this.size === 'small',\n            'rounded-[--bq-avatar--border-radius-squareM]':\n              this.shape === 'square' && (this.size === 'medium' || this.size === 'large'),\n          }}\n          aria-label={this.label}\n          role=\"img\"\n          part=\"base\"\n        >\n          {this.initials && (\n            <span\n              class=\"absolute start-0 inline-flex items-center justify-center font-bold bs-full is-full inset-bs-0\"\n              part=\"text\"\n            >\n              {this.trimmedInitials}\n            </span>\n          )}\n          {this.image && !this.hasError && (\n            <img\n              class=\"absolute start-0 object-cover bs-full is-full inset-bs-0\"\n              alt={this.altText ?? undefined}\n              src={this.image}\n              onError={this.onImageError}\n              part=\"img\"\n            />\n          )}\n        </div>\n        <div\n          class={{\n            'absolute flex items-center justify-center': true,\n            'start-[--bq-avatar--badge-left-square] inset-bs-[--bq-avatar--badge-top-square]': this.shape === 'square',\n            'start-[--bq-avatar--badge-left-circle] inset-bs-[--bq-avatar--badge-top-circle]': this.shape === 'circle',\n          }}\n          part=\"badge\"\n        >\n          <slot name=\"badge\"></slot>\n        </div>\n      </Host>\n    );\n  }\n}\n"]}