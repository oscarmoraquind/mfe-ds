{"version":3,"file":"bq-badge.js","sourceRoot":"","sources":["../../../../../../src/components/badge/bq-badge.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Element, h, Host, Prop, State, Watch } from '@stencil/core';\n\nimport { BADGE_SIZE, TBadgeSize } from './bq-badge.types';\nimport { getColorCSSVariable, getTextContent, isNil, validatePropValue } from '../../shared/utils';\n\n/**\n * The Badge component is a visual indicator that can be added to various elements within a user interface.\n * It is typically used to highlight important or relevant information, such as alerts, notifications, or statuses.\n *\n * @example How to use it\n * ```html\n * <bq-badge background-color=\"ui--success\" text-color=\"text--inverse\" size=\"small\">9</bq-badge>\n * ```\n *\n * @documentation https://www.beeq.design/3d466e231/p/194fd1-badge\n * @status stable\n *\n * @attr {string} background-color - Badge background color. The value should be a valid value of the palette color.\n * @attr {string} text-color - Badge number color. The value should be a valid value of the palette color.\n * @attr {\"small\" | \"medium\" | \"large\"} size - The size of the badge. Relevant if badge has no content.\n *\n * @slot - The default slot is used to add content to the badge. The content can be a number or a text.\n *\n * @part base - The component's internal wrapper that holds the count.\n * @part number - The component's internal wrapper that holds the slot.\n *\n * @cssprop --bq-badge--background-color - The badge background color\n * @cssprop --bq-badge--box-shadow - The badge box shadow\n * @cssprop --bq-badge--border-color - The badge border color\n * @cssprop --bq-badge--border-radius - The badge border radius\n * @cssprop --bq-badge--border-style - The badge border style\n * @cssprop --bq-badge--border-width - The badge border width\n * @cssprop --bq-badge--size-small - The badge small size\n * @cssprop --bq-badge--size-medium - The badge medium size\n * @cssprop --bq-badge--size-large - The badge large size\n * @cssprop --bq-badge--text-color - The badge text color\n */\n@Component({\n  tag: 'bq-badge',\n  styleUrl: './scss/bq-badge.scss',\n  shadow: true,\n})\nexport class BqBadge {\n  // Own Properties\n  // ====================\n\n  private spanElement?: HTMLSpanElement;\n\n  private observer: MutationObserver = new MutationObserver((mutations) => {\n    const [mutation] = mutations;\n    this.contentLength = mutation.target.textContent.length;\n  });\n\n  // Reference to host HTML element\n  // ===================================\n\n  @Element() el: HTMLBqBadgeElement;\n\n  // State() variables\n  // Inlined decorator, alphabetical order\n  // =======================================\n\n  @State() private contentLength = 0;\n\n  // Public Property API\n  // ========================\n\n  /** Badge background color. The value should be a valid value of the palette color */\n  @Prop({ mutable: true, reflect: true }) backgroundColor? = 'ui--danger';\n\n  /** Badge number color. The value should be a valid value of the palette color */\n  @Prop({ mutable: true, reflect: true }) textColor? = 'text--inverse';\n\n  /** The size of the badge. Relevant if badge has no content. */\n  @Prop({ reflect: true, mutable: true }) size?: TBadgeSize = 'small';\n\n  // Prop lifecycle events\n  // =======================\n\n  @Watch('size')\n  handleSizePropChange() {\n    validatePropValue(BADGE_SIZE, 'small', this.el, 'size');\n  }\n\n  // Events section\n  // Requires JSDocs for public API documentation\n  // ==============================================\n\n  // Component lifecycle events\n  // Ordered by their natural call order\n  // =====================================\n\n  componentWillLoad() {\n    this.handleSizePropChange();\n  }\n\n  disconnectedCallback() {\n    this.observer?.disconnect();\n  }\n\n  // Listeners\n  // ==============\n\n  // Public methods API\n  // These methods are exposed on the host element.\n  // Always use two lines.\n  // Public Methods must be async.\n  // Requires JSDocs for public API documentation.\n  // ===============================================\n\n  // Local methods\n  // Internal business logic.\n  // These methods cannot be called from the host element.\n  // =======================================================\n\n  private onSlotChange = () => {\n    const slot = this.slot;\n\n    if (isNil(slot)) return;\n\n    this.contentLength = getTextContent(slot, { recurse: true }).length;\n    const [node] = slot.assignedNodes({ flatten: true });\n\n    if (isNil(node)) {\n      this.observer.takeRecords();\n      return;\n    }\n\n    this.observer.observe(node, {\n      characterData: true,\n      childList: true,\n      subtree: true,\n    });\n  };\n\n  private get slot(): HTMLSlotElement | null {\n    return this.spanElement?.querySelector('slot') ?? null;\n  }\n\n  // render() function\n  // Always the last one in the class.\n  // ===================================\n\n  render() {\n    const styles = {\n      ...(this.backgroundColor && { '--bq-badge--background-color': getColorCSSVariable(this.backgroundColor) }),\n      ...(this.textColor && { '--bq-badge--text-color': getColorCSSVariable(this.textColor) }),\n    };\n\n    return (\n      <Host style={styles}>\n        <div\n          class={{\n            'bq-badge': true,\n            [`size--${this.size}`]: this.contentLength === 0,\n            digit: this.contentLength > 0,\n            'p-i-xs2': this.contentLength > 1,\n          }}\n          part=\"base\"\n        >\n          <span ref={(element) => (this.spanElement = element)} class=\"text-xs font-bold leading-small\" part=\"number\">\n            <slot onSlotchange={this.onSlotChange}></slot>\n          </span>\n        </div>\n      </Host>\n    );\n  }\n}\n"]}