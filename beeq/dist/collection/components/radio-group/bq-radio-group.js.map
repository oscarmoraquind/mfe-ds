{"version":3,"file":"bq-radio-group.js","sourceRoot":"","sources":["../../../../../../src/components/radio-group/bq-radio-group.tsx"],"names":[],"mappings":"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","sourcesContent":["import { AttachInternals, Component, Element, Event, EventEmitter, h, Listen, Prop, Watch } from '@stencil/core';\n\nimport { RADIO_GROUP_ORIENTATION, TRadioGroupOrientation } from './bq-radio-group.types';\nimport { debounce, isHTMLElement, isNil, TDebounce, validatePropValue } from '../../shared/utils';\n\n/**\n * The radio group is a user interface component that groups radio buttons to enable a single selection within the group.\n *\n * @example How to use it\n * ```html\n * <bq-radio-group fieldset value=\"option1\">\n *   <span slot=\"label\">radio group</span>\n *   <bq-radio value=\"option1\">Radio option 1</bq-radio>\n *   <bq-radio value=\"option2\">Radio option 2</bq-radio>\n *   <bq-radio value=\"option3\">Radio option 3</bq-radio>\n * </bq-radio-group>\n * ```\n *\n * @documentation https://www.beeq.design/3d466e231/p/9718e1-radio-button/b/09d7b1\n * @status stable\n *\n * @attr {boolean} background-on-hover - If `true`, the radio displays background on hover\n * @attr {number} debounce-time - A number representing the delay time (in milliseconds) that bqChange event handler gets triggered once the value change\n * @attr {boolean} disabled - If `true` radio inputs are disabled\n * @attr {boolean} fieldset - If `true` displays fieldset\n * @attr {string} name - Name of the HTML input form control. Submitted with the form as part of a name/value pair\n * @attr {\"horizontal\" | \"vertical\"} orientation - The display orientation of the radio inputs\n * @attr {boolean} required - If `true`, the radio group is required\n * @attr {string} required-validation-message - The native form validation message when the radio group is required\n * @attr {string} value - The display orientation of the radio inputs\n *\n * @method vClick - Simulate a click event on the native `<input>` HTML element used under the hood\n * @method vFocus - Sets focus on the native `<input>` HTML element used under the hood\n * @method vBlur - Remove focus from the native `<input>` HTML element used under the hood\n *\n * @event bqChange - Handler to be called when the radio state changes\n *\n * @slot - The bq-radio items to group\n * @slot label - The label content of radio group\n *\n * @part base - The component's internal wrapper of the radio components.\n * @part label - The `<legend>` element that holds the text content.\n * @part group - The `<div>` element that holds the radio inputs.\n */\n@Component({\n  tag: 'bq-radio-group',\n  styleUrl: './scss/bq-radio-group.scss',\n  formAssociated: true,\n  shadow: {\n    delegatesFocus: true,\n  },\n})\nexport class BqRadioGroup {\n  // Own Properties\n  // ====================\n\n  private focusedBqRadio: HTMLBqRadioElement | null = null;\n  private debouncedBqChange: TDebounce<{ value: string; target: HTMLBqRadioElement }>;\n\n  // Reference to host HTML element\n  // ===================================\n\n  @AttachInternals() internals!: ElementInternals;\n  @Element() el!: HTMLBqRadioGroupElement;\n\n  // State() variables\n  // Inlined decorator, alphabetical order\n  // =======================================\n\n  // Public Property API\n  // ========================\n\n  /** If true, all radio inputs in the group will display a background on hover */\n  @Prop({ reflect: true }) backgroundOnHover? = false;\n\n  /** A number representing the delay time (in milliseconds) that `bqChange` event handler gets triggered once the value change */\n  @Prop({ reflect: true, mutable: true }) debounceTime = 0;\n\n  /** If true radio inputs are disabled */\n  @Prop({ reflect: true }) disabled? = false;\n\n  /** If true displays fieldset */\n  @Prop({ reflect: true }) fieldset? = false;\n\n  /** Name of the HTML input form control. Submitted with the form as part of a name/value pair.  */\n  @Prop({ reflect: true }) name!: string;\n\n  /** The display orientation of the radio inputs */\n  @Prop({ reflect: true, mutable: true }) orientation?: TRadioGroupOrientation = 'vertical';\n\n  /** If true, the radio group is required */\n  @Prop({ reflect: true }) required? = false;\n\n  /** The native form validation message when the radio group is required */\n  @Prop({ reflect: true }) requiredValidationMessage?: string;\n\n  /** A string representing the value of the radio. */\n  @Prop({ reflect: true, mutable: true }) value?: string;\n\n  // Prop lifecycle events\n  // =======================\n\n  @Watch('backgroundOnHover')\n  @Watch('disabled')\n  @Watch('name')\n  @Watch('required')\n  @Watch('value')\n  handleGroupProperties() {\n    if (!this.bqRadioElements) return;\n\n    this.bqRadioElements.forEach((bqRadio) => {\n      bqRadio.backgroundOnHover = this.backgroundOnHover;\n      bqRadio.checked = !isNil(this.value) ? bqRadio.value === this.value : false;\n      bqRadio.disabled = this.disabled;\n      bqRadio.name = this.name;\n      bqRadio.required = this.required;\n    });\n  }\n\n  @Watch('orientation')\n  checkPropValues() {\n    validatePropValue(RADIO_GROUP_ORIENTATION, 'vertical', this.el, 'orientation');\n  }\n\n  @Watch('debounceTime')\n  checkDebounceChange() {\n    if (this.debounceTime < 0) {\n      this.debounceTime = Math.max(0, this.debounceTime);\n    }\n\n    if (this.debouncedBqChange) {\n      this.debouncedBqChange.cancel();\n    }\n\n    this.debouncedBqChange = debounce((event: Parameters<typeof this.debouncedBqChange>[0]) => {\n      this.bqChange.emit(event);\n    }, this.debounceTime);\n  }\n\n  @Watch('required')\n  @Watch('value')\n  async handleRequiredChange() {\n    await this.updateFormValidity();\n  }\n\n  // Events section\n  // Requires JSDocs for public API documentation\n  // ==============================================\n\n  /** Handler to be called when the radio state changes */\n  @Event() bqChange: EventEmitter<{ value: string; target: HTMLBqRadioElement }>;\n\n  // Component lifecycle events\n  // Ordered by their natural call order\n  // =====================================\n\n  componentWillLoad() {\n    this.checkPropValues();\n    this.checkDebounceChange();\n    this.internals.setFormValue(this.value);\n  }\n\n  componentDidLoad() {\n    this.handleGroupProperties();\n  }\n\n  async formAssociatedCallback() {\n    this.internals.setFormValue(this.value);\n    await this.updateFormValidity();\n  }\n\n  formResetCallback() {\n    this.value = null;\n    this.internals.setFormValue(this.value);\n  }\n\n  // Listeners\n  // ==============\n\n  @Listen('mousedown', { target: 'body', passive: true })\n  onMouseDown(event: MouseEvent) {\n    if (!isNil(this.focusedBqRadio) && isHTMLElement(event.target, 'bq-radio') && this.el.contains(event.target)) {\n      this.focusedBqRadio = event.target;\n    }\n  }\n\n  @Listen('bqClick')\n  onBqClick(event: CustomEvent<HTMLBqRadioElement>) {\n    if (isNil(this.focusedBqRadio)) {\n      this.focusedBqRadio = event.detail;\n    }\n\n    if (event.detail.value === this.value) return;\n\n    const target = event.detail;\n    this.bqRadioElements.forEach((bqRadioElement) => (bqRadioElement.checked = bqRadioElement === target));\n    this.setCheckedRadioItem(event.detail);\n  }\n\n  @Listen('bqKeyDown')\n  onBqKeyDown(event: CustomEvent<KeyboardEvent>) {\n    const { target } = event;\n\n    if (!isHTMLElement(target, 'bq-radio')) return;\n\n    switch (event.detail.key) {\n      case 'ArrowDown':\n      case 'ArrowRight': {\n        this.focusRadioInputSibling(target, true);\n        break;\n      }\n\n      case 'ArrowUp':\n      case 'ArrowLeft': {\n        this.focusRadioInputSibling(target, false);\n        break;\n      }\n\n      default:\n    }\n  }\n\n  @Listen('bqFocus', { capture: true })\n  onBqFocus(event: CustomEvent<HTMLBqRadioElement>) {\n    if (event.detail !== this.focusedBqRadio) return;\n\n    event.stopPropagation();\n  }\n\n  @Listen('bqBlur', { capture: true })\n  onBqBlur(event: CustomEvent<HTMLBqRadioElement>) {\n    if (!isNil(this.focusedBqRadio) && event.detail !== this.focusedBqRadio) {\n      event.stopPropagation();\n    } else {\n      this.focusedBqRadio = null;\n    }\n  }\n\n  // Public methods API\n  // These methods are exposed on the host element.\n  // Always use two lines.\n  // Public Methods must be async.\n  // Requires JSDocs for public API documentation.\n  // ===============================================\n\n  // Local methods\n  // Internal business logic.\n  // These methods cannot be called from the host element.\n  // =======================================================\n\n  private focusRadioInputSibling = (currentTarget: HTMLBqRadioElement, next: boolean): void => {\n    this.bqRadioElements.forEach((bqRadioElement, index, elements) => {\n      if (bqRadioElement === currentTarget) {\n        const target = this.getNextRadioElement(elements, index, next);\n\n        currentTarget.checked = false;\n\n        target.vFocus();\n        this.setCheckedRadioItem(target);\n      }\n    });\n  };\n\n  private setCheckedRadioItem = (target: HTMLBqRadioElement): void => {\n    const { value } = target;\n    target.checked = true;\n    this.value = value;\n    this.focusedBqRadio = target;\n    this.internals.setFormValue(value);\n    this.debouncedBqChange({ value, target });\n  };\n\n  private getNextRadioElement = (elements: HTMLBqRadioElement[], index: number, forward = true): HTMLBqRadioElement => {\n    let element = null;\n    let elementIndex = index;\n\n    do {\n      elementIndex = (elements.length + (elementIndex + (forward ? 1 : -1))) % elements.length;\n      element = elements[elementIndex];\n    } while (element.disabled);\n\n    return element;\n  };\n\n  private updateFormValidity = async (): Promise<void> => {\n    const { internals, required, requiredValidationMessage, value } = this;\n    // Clear the validity state\n    internals?.states.clear();\n\n    if (!required || (required && !isNil(value))) {\n      // If the checkbox is not required or is checked, set the validity state to valid\n      internals?.states.add('valid');\n      internals?.setValidity({});\n      return;\n    }\n\n    // If the checkbox is required and not checked, set the validity state to invalid\n    internals?.states.add('invalid');\n    internals?.setValidity(\n      { valueMissing: true },\n      requiredValidationMessage,\n      await this.bqRadioElements[0].getNativeInput(),\n    );\n  };\n\n  private get bqRadioElements(): HTMLBqRadioElement[] {\n    return Array.from(this.el.querySelectorAll('bq-radio'));\n  }\n\n  // render() function\n  // Always the last one in the class.\n  // ===================================\n\n  render() {\n    return (\n      <fieldset\n        class={{ 'bq-radio-group': true, 'has-fieldset': this.fieldset }}\n        aria-labelledby=\"bq-radio-group__label\"\n        aria-controls=\"bq-radiogroup\"\n        role=\"radiogroup\"\n        part=\"base\"\n      >\n        <legend part=\"label\">\n          <slot id=\"bq-radiogroup__label\" name=\"label\" />\n        </legend>\n        <div class={`bq-radio-group--${this.orientation}`} part=\"group\">\n          <slot id=\"bq-radiogroup\" />\n        </div>\n      </fieldset>\n    );\n  }\n}\n"]}