{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../../../src/components/tag/helper/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,WAAW,EAAoC,MAAM,iBAAiB,CAAC;AAErG;;;;;GAKG;AACH,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAC,IAAc,EAAU,EAAE;IACjD,MAAM,MAAM,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;IAC3B,MAAM,KAAK,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;IAC1B,MAAM,MAAM,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;IAE3B,MAAM,IAAI,GAAG;QACX,CAAC,MAAM,CAAC,EAAE,EAAE;QACZ,CAAC,KAAK,CAAC,EAAE,EAAE;QACX,CAAC,MAAM,CAAC,EAAE,EAAE;KACb,CAAC;IAEF,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC;AACpC,CAAC,CAAC;AAEF;;;;;GAKG;AACH,MAAM,CAAC,MAAM,SAAS,GAAG,CAAC,KAAgB,EAA2C,EAAE;IACrF,MAAM,SAAS,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;IAC/B,MAAM,QAAQ,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;IAC9B,MAAM,QAAQ,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;IAC9B,MAAM,WAAW,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;IACjC,MAAM,WAAW,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;IAEjC,MAAM,cAAc,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC;IACtC,MAAM,aAAa,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC;IAErC,MAAM,MAAM,GAAG;QACb,CAAC,SAAS,CAAC,EAAE;YACX,CAAC,cAAc,CAAC,EAAE,cAAc;YAChC,CAAC,aAAa,CAAC,EAAE,WAAW;SAC7B;QACD,CAAC,QAAQ,CAAC,EAAE;YACV,CAAC,cAAc,CAAC,EAAE,eAAe;YACjC,CAAC,aAAa,CAAC,EAAE,WAAW;SAC7B;QACD,CAAC,QAAQ,CAAC,EAAE;YACV,CAAC,cAAc,CAAC,EAAE,aAAa;YAC/B,CAAC,aAAa,CAAC,EAAE,WAAW;SAC7B;QACD,CAAC,WAAW,CAAC,EAAE;YACb,CAAC,cAAc,CAAC,EAAE,eAAe;YACjC,CAAC,aAAa,CAAC,EAAE,WAAW;SAC7B;QACD,CAAC,WAAW,CAAC,EAAE;YACb,CAAC,cAAc,CAAC,EAAE,eAAe;YACjC,CAAC,aAAa,CAAC,EAAE,WAAW;SAC7B;KACF,CAAC;IAEF,OAAO,MAAM,CAAC,KAAK,CAAC,CAAC;AACvB,CAAC,CAAC","sourcesContent":["import { TAG_COLOR, TAG_SIZE, TAG_VARIANT, TTagColor, TTagSize, TTagVariant } from '../bq-tag.types';\n\n/**\n * Function to determine the icon size based on the provided tag size.\n *\n * @param {TTagSize} size - The size of the tag.\n * @returns {number} The corresponding icon size. If the provided size does not match any predefined sizes, the function returns the size for 'medium'.\n */\nexport const iconSize = (size: TTagSize): number => {\n  const xsmall = TAG_SIZE[0];\n  const small = TAG_SIZE[1];\n  const medium = TAG_SIZE[2];\n\n  const SIZE = {\n    [xsmall]: 16,\n    [small]: 20,\n    [medium]: 24,\n  };\n\n  return SIZE[size] || SIZE[medium];\n};\n\n/**\n * Function to determine the tag text color scheme for a given tag type.\n *\n * @param {TTagType} color - The color of the tag.\n * @returns {Object} An object containing the color scheme for the given tag type. If the provided type does not match any predefined types, the function returns the color scheme for 'default'.\n */\nexport const textColor = (color: TTagColor): Partial<{ [K in TTagVariant]: string }> => {\n  const typeError = TAG_COLOR[0];\n  const typeGray = TAG_COLOR[1];\n  const typeInfo = TAG_COLOR[2];\n  const typeSuccess = TAG_COLOR[3];\n  const typeWarning = TAG_COLOR[4];\n\n  const variantOutline = TAG_VARIANT[0];\n  const variantFilled = TAG_VARIANT[1];\n\n  const COLORS = {\n    [typeError]: {\n      [variantOutline]: 'text--danger',\n      [variantFilled]: 'text--alt',\n    },\n    [typeGray]: {\n      [variantOutline]: 'text--primary',\n      [variantFilled]: 'text--alt',\n    },\n    [typeInfo]: {\n      [variantOutline]: 'text--brand',\n      [variantFilled]: 'text--alt',\n    },\n    [typeSuccess]: {\n      [variantOutline]: 'text--success',\n      [variantFilled]: 'text--alt',\n    },\n    [typeWarning]: {\n      [variantOutline]: 'text--warning',\n      [variantFilled]: 'text--alt',\n    },\n  };\n\n  return COLORS[color];\n};\n"]}