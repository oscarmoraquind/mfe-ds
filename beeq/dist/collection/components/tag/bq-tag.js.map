{"version":3,"file":"bq-tag.js","sourceRoot":"","sources":["../../../../../../src/components/tag/bq-tag.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Element, Event, EventEmitter, h, Host, Method, Prop, State, Watch } from '@stencil/core';\n\nimport { TAG_COLOR, TAG_SIZE, TAG_VARIANT, TTagBorderRadius, TTagColor, TTagSize, TTagVariant } from './bq-tag.types';\nimport { iconSize, textColor } from './helper';\nimport { getColorCSSVariable, hasSlotContent, validatePropValue } from '../../shared/utils';\n\n/**\n * The Tag Component is a UI element used to label and categorize content within an application.\n * Tags are commonly used to label items with keywords or categories, making it easier to find and organize content.\n *\n * @example How to use it\n * ```html\n * <bq-tag color=\"success\" size=\"medium\" variant=\"filled\">Success</bq-tag>\n * ```\n *\n * @documentation https://www.beeq.design/3d466e231/p/42f8c9-tag\n * @status stable\n *\n * @dependency bq-button\n * @dependency bq-icon\n *\n * @attr {string} border - The corner radius of the Tag (will override size's predefined border)\n * @attr {boolean} clickable - If `true`, the Tag can be clickable\n * @attr {\"error\" | \"gray\" | \"info\" | \"success\" | \"warning\"} color - The color style of the Tag\n * @attr {boolean} disabled - If `true`, the Tag will be disabled (only if clickable = `true`, no interaction allowed)\n * @attr {boolean} hidden - If `true`, the Tag component will hidden (only if removable = `true`)\n * @attr {boolean} removable - If `true`, the Tag component can be removed\n * @attr {boolean} selected - If `true`, the Tag is selected (only if clickable = `true`)\n * @attr {\"xsmall\" | \"small\" | \"medium\"} size - The size of the Tag component\n * @attr {\"outline\" | \"filled\"} variant - The variant of Tag to apply on top of the variant\n *\n * @method hide - Method to be called to remove the tag component\n * @method show - Method to be called to show the tag component\n *\n * @event bqClose - Callback handler to be called when the tag is close/hidden\n * @event bqOpen - Callback handler to be called when the tag is not open/shown\n * @event bqBlur - Handler to be called when tag loses focus\n * @event bqClick - Handler to be called when tag is clicked\n * @event bqFocus - Handler to be called when tag is focused\n *\n * @slot prefix - The prefix slot to add an icon or any other content before the text\n * @slot - The text content of the tag\n *\n * @part wrapper - The wrapper container `<div>` of the element inside the shadow DOM.\n * @part prefix - The `<span>` tag element that acts as prefix container (when icon exists in front of tag).\n * @part text - The `<div>` element containing the text of the tag component.\n * @part btn-close - The close button element to remove the tag component.\n *\n * @cssprop --bq-tag--background-color - Tag background color\n * @cssprop --bq-tag--border-color - Tag border color\n * @cssprop --bq-tag--border-radius - Tag border radius\n * @cssprop --bq-tag--border-style - Tag border style\n * @cssprop --bq-tag--border-width - Tag border width\n * @cssprop --bq-tag--small-border-radius - Tag small border radius\n * @cssprop --bq-tag--small-gap - Tag small gap between content\n * @cssprop --bq-tag--small-padding-x - Tag small padding horizontal\n * @cssprop --bq-tag--small-padding-y - Tag small padding vertical\n * @cssprop --bq-tag--medium-gap - Tag medium gap between content\n * @cssprop --bq-tag--medium-padding-x - Tag medium padding horizontal\n * @cssprop --bq-tag--medium-padding-y - Tag medium padding vertical\n */\n@Component({\n  tag: 'bq-tag',\n  styleUrl: './scss/bq-tag.scss',\n  shadow: {\n    delegatesFocus: true,\n  },\n})\nexport class BqTag {\n  // Own Properties\n  // ====================\n\n  private prefixElem: HTMLElement;\n\n  // Reference to host HTML element\n  // ===================================\n\n  @Element() el!: HTMLBqTagElement;\n\n  // State() variables\n  // Inlined decorator, alphabetical order\n  // =======================================\n\n  @State() private hasPrefix = false;\n\n  // Public Property API\n  // ========================\n\n  /** The corner radius of the Tag (will override size's predefined border) */\n  @Prop({ reflect: true }) border: TTagBorderRadius;\n\n  /** If true, the Tag can be clickable */\n  @Prop({ reflect: true }) clickable: boolean = false;\n\n  /** The color style of the Tag */\n  @Prop({ reflect: true }) color: TTagColor;\n\n  /** If true, the Tag will be disabled (only if clickable = `true`, no interaction allowed) */\n  @Prop({ reflect: true }) disabled?: boolean = false;\n\n  /** If true, the Tag component will hidden (only if removable = `true`) */\n  @Prop({ reflect: true, mutable: true }) hidden: boolean;\n\n  /** If true, the Tag component can be removed */\n  @Prop({ reflect: true }) removable: boolean = false;\n\n  /** If true, the Tag is selected (only if clickable = `true`) */\n  @Prop({ reflect: true, mutable: true }) selected: boolean = false;\n\n  /** The size of the Tag component */\n  @Prop({ reflect: true }) size: TTagSize = 'medium';\n\n  /** The variant of Tag to apply on top of the variant */\n  @Prop({ reflect: true }) variant: TTagVariant = 'filled';\n\n  // Prop lifecycle events\n  // =======================\n\n  @Watch('size')\n  @Watch('variant')\n  checkPropValues() {\n    validatePropValue(TAG_SIZE, 'medium', this.el, 'size');\n    validatePropValue(TAG_VARIANT, 'filled', this.el, 'variant');\n  }\n\n  // Events section\n  // Requires JSDocs for public API documentation\n  // ==============================================\n\n  /** Callback handler to be called when the tag is close/hidden  */\n  @Event() bqClose: EventEmitter;\n\n  /** Callback handler to be called when the tag is not open/shown */\n  @Event() bqOpen: EventEmitter;\n\n  /** Handler to be called when tag loses focus */\n  @Event() bqBlur: EventEmitter<HTMLBqTagElement>;\n\n  /** Handler to be called when tag is clicked */\n  @Event() bqClick: EventEmitter<HTMLBqTagElement>;\n\n  /** Handler to be called when tag is focused */\n  @Event() bqFocus: EventEmitter<HTMLBqTagElement>;\n\n  // Component lifecycle events\n  // Ordered by their natural call order\n  // =====================================\n\n  componentWillLoad() {\n    this.checkPropValues();\n  }\n\n  // Listeners\n  // ==============\n\n  // Public methods API\n  // These methods are exposed on the host element.\n  // Always use two lines.\n  // Public Methods must be async.\n  // Requires JSDocs for public API documentation.\n  // ===============================================\n\n  /** Method to be called to remove the tag component */\n  @Method()\n  async hide(): Promise<void> {\n    this.handleHide();\n  }\n\n  /** Method to be called to show the tag component */\n  @Method()\n  async show(): Promise<void> {\n    this.handleShow();\n  }\n\n  // Local methods\n  // Internal business logic.\n  // These methods cannot be called from the host element.\n  // =======================================================\n\n  private handleHide = () => {\n    if (!this.isRemovable) return;\n\n    const ev = this.bqClose.emit(this.el);\n    if (!ev.defaultPrevented) {\n      this.hidden = true;\n    }\n  };\n\n  private handleShow = () => {\n    if (!this.isRemovable) return;\n\n    const ev = this.bqOpen.emit(this.el);\n    if (!ev.defaultPrevented) {\n      this.hidden = false;\n    }\n  };\n\n  private handleClick = () => {\n    // If the tag is not clickable or the tag is disabled, we don't want to handle the click\n    if (!this.isClickable || this.disabled) return;\n\n    // Emit a click event on the element\n    const ev = this.bqClick.emit(this.el);\n    // If the event was not prevented, toggle the clickable state\n    if (!ev.defaultPrevented) {\n      this.selected = !this.selected;\n    }\n  };\n\n  private handleBlur = () => {\n    if (!this.isClickable) return;\n\n    this.bqBlur.emit(this.el);\n  };\n\n  private handleFocus = () => {\n    if (!this.isClickable) return;\n\n    this.bqFocus.emit(this.el);\n  };\n\n  private handleSlotChange = () => {\n    this.hasPrefix = hasSlotContent(this.prefixElem, 'prefix');\n  };\n\n  private get isClickable(): boolean {\n    return this.clickable && !this.color && !this.hasCustomColor && !this.removable;\n  }\n\n  private get isRemovable(): boolean {\n    return this.removable && !this.isClickable;\n  }\n\n  private get isHidden(): boolean {\n    return this.isRemovable && this.hidden;\n  }\n\n  private get hasCustomColor(): boolean {\n    return this.color !== undefined ? !TAG_COLOR.includes(this.color) : false;\n  }\n\n  // render() function\n  // Always the last one in the class.\n  // ===================================\n\n  render() {\n    const style = {\n      '--bq-tag--icon-prefix-size': `${iconSize(this.size)}px`,\n      ...(this.border && { '--bq-tag--border-radius': `var(--bq-radius--${this.border})` }),\n      ...(this.color && { '--bq-tag--background-color': getColorCSSVariable(this.color) ?? this.color }),\n      ...(this.hasCustomColor && { '--bq-text--primary': `var(--bq-text--alt)` }),\n    };\n\n    return (\n      <Host style={style} aria-hidden={this.isHidden ? 'true' : 'false'} hidden={this.isHidden ? 'true' : 'false'}>\n        <button\n          class={{\n            [`bq-tag bq-tag__${this.size}`]: true,\n            [`bq-tag__${this.color || 'default'} bq-tag__${this.variant}`]: !this.hasCustomColor,\n            'is-clickable': this.isClickable,\n            'is-removable': this.removable,\n            // Active/Selected state when clickable\n            active: this.isClickable && this.selected,\n            // Fixed border radius\n            'has-border': !!this.border,\n          }}\n          disabled={this.disabled}\n          onBlur={this.handleBlur}\n          onClick={this.handleClick}\n          onFocus={this.handleFocus}\n          tabindex={this.isClickable ? 0 : -1}\n          part=\"wrapper\"\n        >\n          <span\n            class={{ 'bq-tag__prefix inline-flex': true, '!hidden': !this.hasPrefix }}\n            ref={(spanElem) => (this.prefixElem = spanElem)}\n            part=\"prefix\"\n          >\n            <slot name=\"prefix\" onSlotchange={this.handleSlotChange} />\n          </span>\n          <div\n            class={{\n              'text-xs': this.size === 'xsmall',\n              'text-s': this.size === 'small',\n              'text-m': this.size === 'medium',\n            }}\n            part=\"text\"\n          >\n            <slot />\n          </div>\n          {this.isRemovable && !this.disabled && (\n            <bq-button class=\"bq-tag__close\" appearance=\"text\" size=\"small\" onClick={this.handleHide} part=\"btn-close\">\n              <bq-icon\n                size={iconSize(this.size)}\n                name=\"x-circle\"\n                color={this.color && !this.hasCustomColor ? textColor(this.color)[this.variant] : 'text--primary'}\n              />\n            </bq-button>\n          )}\n        </button>\n      </Host>\n    );\n  }\n}\n"]}