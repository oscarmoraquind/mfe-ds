{"version":3,"file":"bq-progress.js","sourceRoot":"","sources":["../../../../../../src/components/progress/bq-progress.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Element, h, Host, Prop, Watch } from '@stencil/core';\n\nimport {\n  PROGRESS_BORDER_SHAPE,\n  PROGRESS_THICKNESS,\n  PROGRESS_TYPE,\n  TProgressBorderShape,\n  TProgressThickness,\n  TProgressType,\n} from './bq-progress.types';\nimport { validatePropValue } from '../../shared/utils';\n\n/**\n * The progress bar is a user interface component that visually represents the completion status of a task or process.\n *\n * @example How to use it\n * ```html\n * <bq-progress value=\"50\"></bq-progress>\n * ```\n *\n * @documentation https://www.beeq.design/3d466e231/p/691cb3-progress\n * @status stable\n *\n * @dependency bq-tooltip\n *\n * @attr {\"rounded\" | \"rounded-full\"} border-shape - It will set the border style of the progress bar\n * @attr {boolean} enable-tooltip - If `true`, a tooltip will be shown displaying the progress value\n * @attr {boolean} indeterminate - If `true` the indeterminate state of progress bar is enabled\n * @attr {boolean} label - If `true`, a label text showing the value (in percentage) will be shown\n * @attr {\"small\" | \"medium\" | \"large\"} thickness - Progress bar thickness\n * @attr {\"default\" | \"error\"} type - Progress type\n * @attr {number} value - A number representing the current value of the progress bar\n *\n * @part wrapper - The component wrapper container inside the shadow DOM\n * @part progress - The `<div>` container that holds the native progress element\n * @part progress-bar - The native html for progress element\n * @part label - The `<div>` container that holds the label value (in percentage)\n * @part indeterminate - The `<div>` container that holds the indeterminate progress bar\n * @part base - The base container for the tooltip component inside the shadow DOM when hovering over the progress bar\n * @part trigger - The container holding the element that triggers the tooltip display when hovering over the progress bar\n * @part panel - The container holding the content of the tooltip when hovering over the progress bar\n *\n * @cssprop --bq-progress-bar--height - The progress bars height\n * @cssprop --bq-progress-bar--indeterminateWidth - The progress bar width when its indeterminate\n * @cssprop --bq-progress-bar--indicatorColor - The progress bar color (inside the track area)\n * @cssprop --bq-progress-bar--trackColor - The progress bar track area (the grey one)\n */\n@Component({\n  tag: 'bq-progress',\n  styleUrl: './scss/bq-progress.scss',\n  shadow: true,\n})\nexport class BqProgress {\n  // Own Properties\n  // ====================\n\n  // Reference to host HTML element\n  // ===================================\n\n  @Element() el!: HTMLBqProgressElement;\n\n  // State() variables\n  // Inlined decorator, alphabetical order\n  // =======================================\n\n  // Public Property API\n  // ========================\n\n  /** It will set the border style of the progress bar */\n  @Prop({ reflect: true }) borderShape: TProgressBorderShape = 'rounded';\n\n  /** If `true`, a tooltip will be shown displaying the progress value */\n  @Prop({ reflect: true }) enableTooltip: boolean = false;\n\n  /** If `true` the indeterminate state of progress bar is enabled */\n  @Prop({ reflect: true }) indeterminate: boolean = false;\n\n  /** If `true, a label text showing the value (in percentage) will be shown */\n  @Prop({ reflect: true }) label: boolean = false;\n\n  /** Progress bar thickness */\n  @Prop({ reflect: true }) thickness: TProgressThickness = 'medium';\n\n  /** Progress type */\n  @Prop({ reflect: true }) type: TProgressType = 'default';\n\n  /** A number representing the current value of the progress bar */\n  @Prop({ reflect: true, mutable: true }) value = 0;\n\n  // Prop lifecycle events\n  // =======================\n\n  @Watch('borderShape')\n  @Watch('thickness')\n  @Watch('type')\n  handleTypePropChange() {\n    validatePropValue(PROGRESS_BORDER_SHAPE, 'rounded', this.el, 'borderShape');\n    validatePropValue(PROGRESS_THICKNESS, 'medium', this.el, 'thickness');\n    validatePropValue(PROGRESS_TYPE, 'default', this.el, 'type');\n  }\n\n  @Watch('value')\n  handleValuePropChange(newValue: number) {\n    this.validateValue(newValue);\n  }\n\n  // Events section\n  // Requires JSDocs for public API documentation\n  // ==============================================\n\n  // Component lifecycle events\n  // Ordered by their natural call order\n  // =====================================\n\n  componentWillLoad() {\n    this.handleTypePropChange();\n    this.handleValuePropChange(this.value);\n  }\n\n  // Listeners\n  // ==============\n\n  // Public methods API\n  // These methods are exposed on the host element.\n  // Always use two lines.\n  // Public Methods must be async.\n  // Requires JSDocs for public API documentation.\n  // ===============================================\n\n  // Local methods\n  // Internal business logic.\n  // These methods cannot be called from the host element.\n  // =======================================================\n\n  private validateValue(newValue: number) {\n    const clampedValue = Math.max(0, Math.min(100, newValue));\n    if (newValue !== clampedValue) {\n      this.value = clampedValue;\n    }\n    return this.value;\n  }\n\n  // render() function\n  // Always the last one in the class.\n  // ===================================\n\n  render() {\n    const style = {\n      ...(this.thickness === 'large' && { '--bq-progress-bar--height': 'var(--bq-spacing-xs)' }),\n      ...(this.type === 'error' && { '--bq-progress-bar--indicatorColor': 'var(--bq-ui--danger)' }),\n    };\n\n    return (\n      <Host style={style}>\n        <div class=\"flex items-center\" part=\"wrapper\">\n          <div class=\"relative flex items-center is-full\" part=\"progress\">\n            <progress\n              class={{\n                [`progress-bar progress-bar__${this.type} ${this.thickness}`]: true,\n                'progress-bar__border-shape rounded-full': this.borderShape === 'rounded',\n              }}\n              value={this.indeterminate ? undefined : this.value}\n              max=\"100\"\n              part=\"progress-bar\"\n            />\n            {this.enableTooltip && !this.indeterminate && (\n              <bq-tooltip\n                class=\"absolute [&::part(panel)]:absolute\"\n                exportparts=\"base,trigger,panel\"\n                alwaysVisible={true}\n                distance={16}\n                style={{ insetInlineStart: `${this.value}%`, fontVariant: 'tabular-nums' }}\n              >\n                <div class=\"absolute bs-1 is-1\" slot=\"trigger\"></div>\n                {this.value}\n              </bq-tooltip>\n            )}\n            {this.indeterminate && (\n              <div\n                class={{\n                  'progress-bar__indeterminate absolute bg-[--bq-progress-bar--indicatorColor] bs-[--bq-progress-bar--height] is-[--bq-progress-bar--indeterminateWidth]':\n                    true,\n                  'rounded-full': this.borderShape === 'rounded',\n                }}\n                part=\"indeterminate\"\n              />\n            )}\n          </div>\n          <div\n            aria-hidden={!this.label || this.indeterminate ? 'true' : 'false'}\n            class={{\n              'ms-xs font-medium leading-regular': true,\n              'text-primary': this.type !== 'error',\n              'text-danger': this.type === 'error',\n              'invisible ms-0 is-0': !this.label || this.indeterminate,\n            }}\n            style={{ fontVariant: 'tabular-nums' }}\n            part=\"label\"\n          >\n            <span>{this.value}%</span>\n          </div>\n        </div>\n      </Host>\n    );\n  }\n}\n"]}