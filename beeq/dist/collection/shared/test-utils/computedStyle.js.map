{"version":3,"file":"computedStyle.js","sourceRoot":"","sources":["../../../../../../src/shared/test-utils/computedStyle.ts"],"names":[],"mappings":"AAEA;;;;;GAKG;AACH,MAAM,CAAC,MAAM,aAAa,GAAG,CAC3B,IAAa,EACb,QAAgB,EAChB,MAAyB,EACc,EAAE;IACzC,OAAO,IAAI,CAAC,QAAQ,CAClB,CAAC,aAAqB,EAAE,MAAiB,EAAE,EAAE;QAC3C,MAAM,CAAC,gBAAgB,EAAE,iBAAiB,CAAC,GAAG,aAAa,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAEzE,IAAI,OAAO,GAAG,QAAQ,CAAC,aAAa,CAAC,gBAAgB,CAAC,CAAC;QAEvD,IAAI,CAAC,OAAO,EAAE,CAAC;YACb,MAAM,IAAI,KAAK,CAAC,0BAA0B,gBAAgB,EAAE,CAAC,CAAC;QAChE,CAAC;QAED,IAAI,iBAAiB,EAAE,CAAC;YACtB,OAAO,GAAG,OAAO,CAAC,UAAU,CAAC,aAAa,CAAC,iBAAiB,CAAC,CAAC;YAE9D,IAAI,CAAC,OAAO,EAAE,CAAC;gBACb,MAAM,IAAI,KAAK,CAAC,0BAA0B,iBAAiB,EAAE,CAAC,CAAC;YACjE,CAAC;QACH,CAAC;QAED,MAAM,KAAK,GAAG,gBAAgB,CAAC,OAAO,CAAC,CAAC;QAExC,IAAI,MAAM,EAAE,CAAC;YACX,OAAO,MAAM,CAAC,MAAM,CAClB,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;gBACX,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC;gBACtB,OAAO,GAAG,CAAC;YACb,CAAC,EACD,EAAkC,CACnC,CAAC;QACJ,CAAC;QAED,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;IAC3C,CAAC,EACD,QAAQ,EACR,MAAM,CACP,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import type { E2EPage } from '@stencil/core/testing';\n\n/**\n * Enhances page to retrieve element style by a given selector\n * @param {E2EPage} page - stencil instance of puppeteer page\n * @param {String} selector - selector to be passed to querySelector, it supports stencil `>>>` selector\n * @returns {Object} style declaration\n */\nexport const computedStyle = <T extends keyof CSSStyleDeclaration>(\n  page: E2EPage,\n  selector: string,\n  filter?: ReadonlyArray<T>,\n): Promise<Pick<CSSStyleDeclaration, T>> => {\n  return page.evaluate(\n    (querySelector: string, filter?: Array<T>) => {\n      const [lightDomSelector, shadowDomSelector] = querySelector.split('>>>');\n\n      let element = document.querySelector(lightDomSelector);\n\n      if (!element) {\n        throw new Error(`Could not find element ${lightDomSelector}`);\n      }\n\n      if (shadowDomSelector) {\n        element = element.shadowRoot.querySelector(shadowDomSelector);\n\n        if (!element) {\n          throw new Error(`Could not find element ${shadowDomSelector}`);\n        }\n      }\n\n      const style = getComputedStyle(element);\n\n      if (filter) {\n        return filter.reduce(\n          (acc, key) => {\n            acc[key] = style[key];\n            return acc;\n          },\n          {} as Pick<CSSStyleDeclaration, T>,\n        );\n      }\n\n      return JSON.parse(JSON.stringify(style));\n    },\n    selector,\n    filter,\n  );\n};\n"]}