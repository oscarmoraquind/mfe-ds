{"version":3,"file":"props.js","sourceRoot":"","sources":["../../../../../../src/shared/utils/props.ts"],"names":[],"mappings":"AAGA;;;;;;;;GAQG;AACH,MAAM,CAAC,MAAM,iBAAiB,GAAG,CAC/B,eAA8B,EAC9B,aAAgB,EAChB,OAAU,EACV,YAAkC,EAC5B,EAAE;IACR,MAAM,aAAa,GAAG,OAAO,CAAC,YAAsB,CAAC,CAAC;IACtD,mEAAmE;IACnE,IAAI,eAAe,CAAC,QAAQ,CAAC,aAAa,CAAC;QAAE,OAAO;IACpD,wCAAwC;IACxC,OAAO,CAAC,YAAsB,CAAC,GAAG,aAAa,CAAC;IAChD,0CAA0C;IAC1C,OAAO,CAAC,IAAI,CACV,IAAI,OAAO,CAAC,OAAO,CAAC,WAAW,EAAE,yBAAyB,MAAM,CAC9D,YAAY,CACb,sBAAsB,eAAe,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CACnD,CAAC;AACJ,CAAC,CAAC","sourcesContent":["export type TExtractProp<T> = T[keyof T] extends infer U ? U : never;\nexport type TValidProperty<E, T> = TExtractProp<{ [K in keyof E]: E[K] extends T ? K : never }>;\n\n/**\n * Validate the element property value, if is one of the accepted values\n *\n * @param {readonly} ACCEPTED_VALUES - The list of the accepted values to check against.\n * @param {unknown} fallbackValue - The default value to assign\n * @param {Element} element - The component reference\n * @param {string} propertyName - The property name (will be used in the console notification)\n * @returns {void}\n */\nexport const validatePropValue = <T extends E[keyof E], E extends Element>(\n  ACCEPTED_VALUES: Readonly<T[]>,\n  fallbackValue: T,\n  element: E,\n  propertyName: TValidProperty<E, T>,\n): void => {\n  const propertyValue = element[propertyName as string];\n  // Early return if the property value is one of the accepted values\n  if (ACCEPTED_VALUES.includes(propertyValue)) return;\n  // Override property with fallback value\n  element[propertyName as string] = fallbackValue;\n  // Notify developer in the browser console\n  console.warn(\n    `[${element.tagName.toUpperCase()}] Please notice that \"${String(\n      propertyName,\n    )}\" should be one of ${ACCEPTED_VALUES.join('|')}`,\n  );\n};\n"]}