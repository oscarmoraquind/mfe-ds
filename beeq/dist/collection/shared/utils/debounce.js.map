{"version":3,"file":"debounce.js","sourceRoot":"","sources":["../../../../../../src/shared/utils/debounce.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,KAAK,EAAE,MAAM,SAAS,CAAC;AAChC,OAAO,EAAE,aAAa,EAAE,MAAM,iBAAiB,CAAC;AAQhD;;;;;;;;GAQG;AACH,MAAM,CAAC,MAAM,QAAQ,GAAG,CAA0B,IAAW,EAAE,IAAI,GAAG,CAAC,EAAE,SAAS,GAAG,KAAK,EAAE,EAAE;IAC5F,IAAI,MAA8B,CAAC;IAEnC,SAAS,eAAe,CAAC,GAAG,IAA6B;QACvD,MAAM,EAAE,EAAE,CAAC;QAEX,4DAA4D;QAC5D,MAAM,OAAO,GAAG,IAAI,CAAC;QAErB,SAAS,cAAc,CAAC,EAAS,EAAE,OAAgB,EAAE,GAAG,IAA2B;YACjF,EAAE,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QAC1B,CAAC;QAED,IAAI,SAAS,IAAI,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC;YAC/B,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QAC5B,CAAC;QAED,MAAM,GAAG,aAAa,CAAC,cAAc,EAAE,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC;IACvE,CAAC;IAED,OAAO,MAAM,CAAC,MAAM,CAAC,eAAe,EAAE;QACpC,MAAM,EAAE,GAAG,EAAE;YACX,MAAM,EAAE,EAAE,CAAC;QACb,CAAC;KACF,CAAC,CAAC;AACL,CAAC,CAAC","sourcesContent":["import { isNil } from './isNil';\nimport { setRafTimeout } from './setRafTimeout';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type TFunction = (...args: any[]) => unknown;\n\ntype TDebounceFnReturn<T> = T extends unknown[] ? (...params: T) => void : (param: T) => void;\nexport type TDebounce<T> = TDebounceFnReturn<T> & { cancel: () => void } extends infer U ? U : never;\n\n/**\n * Creates a debounced function that delays invoking func until after wait milliseconds have elapsed\n * since the last time the debounced function was invoked.\n *\n * @param {Function} func - The function to debounce.\n * @param {Number} wait - The number of milliseconds to delay.\n * @param {Boolean} immediate - If `true`, the function triggers immediately and then waits for the interval before being called again.\n * @return {Function} The new debounced function.\n */\nexport const debounce = <TFunc extends TFunction>(func: TFunc, wait = 0, immediate = false) => {\n  let cancel: () => void | undefined;\n\n  function debounceHandler(...args: Parameters<typeof func>) {\n    cancel?.();\n\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const context = this;\n\n    function timeoutHandler(fn: TFunc, context: unknown, ...args: Parameters<typeof fn>) {\n      fn.apply(context, args);\n    }\n\n    if (immediate && isNil(cancel)) {\n      func.apply(context, args);\n    }\n\n    cancel = setRafTimeout(timeoutHandler, wait, func, context, ...args);\n  }\n\n  return Object.assign(debounceHandler, {\n    cancel: () => {\n      cancel?.();\n    },\n  });\n};\n"]}