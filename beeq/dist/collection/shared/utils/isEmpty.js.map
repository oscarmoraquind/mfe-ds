{"version":3,"file":"isEmpty.js","sourceRoot":"","sources":["../../../../../../src/shared/utils/isEmpty.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,KAAK,EAAE,MAAM,GAAG,CAAC;AAIrC;;;;GAIG;AACH,MAAM,CAAC,MAAM,OAAO,GAAG,CAAwB,KAAQ,EAAW,EAAE;IAClE,IAAI,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC;QACjB,OAAO,IAAI,CAAC;IACd,CAAC;SAAM,IAAI,MAAM,IAAI,KAAK,EAAE,CAAC;QAC3B,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IAChC,CAAC;SAAM,CAAC;QACN,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,CAAC;IACjD,CAAC;AACH,CAAC,CAAC","sourcesContent":["import { isDefined, isNil } from '.';\n\ntype TCollection = Map<unknown, unknown> | Array<unknown> | Record<string, unknown> | Set<unknown> | null | undefined;\n\n/**\n * Check if the value is an empty array, object, set, map\n * @param value the value to be checked\n * @returns {boolean} true if value is empty\n */\nexport const isEmpty = <T extends TCollection>(value: T): boolean => {\n  if (isNil(value)) {\n    return true;\n  } else if ('size' in value) {\n    return !isDefined(value.size);\n  } else {\n    return !isDefined(Object.values(value).length);\n  }\n};\n"]}