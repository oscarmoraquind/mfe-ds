{"version":3,"names":["DIVIDER_ORIENTATION","DIVIDER_ORIENTATION_ENUM","HORIZONTAL","VERTICAL","DIVIDER_TITLE_ALIGNMENT","DIVIDER_STROKE_LINECAP","bqDividerCss","BqDividerStyle0","BqDivider","titleElem","hasTitle","dashed","orientation","strokeColor","titleAlignment","strokeDashWidth","strokeDashGap","strokeThickness","strokeBasis","strokeLinecap","checkPropValues","validatePropValue","this","el","connectedCallback","componentWillLoad","componentDidLoad","handleSlotChange","hasSlotContent","getTextContent","querySelector","strokeAttributes","strokeDrawPositions","strokeDasharray","drawOffset","x1","x2","y1","y2","orientationMap","Map","Object","entries","get","render","styles","getColorCSSVariable","isNil","h","Host","key","style","class","part","ref","div","role","onSlotchange"],"sources":["../../packages/beeq/src/components/divider/bq-divider.types.ts","../../packages/beeq/src/components/divider/scss/bq-divider.scss?tag=bq-divider&encapsulation=shadow","../../packages/beeq/src/components/divider/bq-divider.tsx"],"sourcesContent":["export const DIVIDER_ORIENTATION = ['horizontal', 'vertical'] as const;\nexport type TDividerOrientation = (typeof DIVIDER_ORIENTATION)[number];\n\nexport const DIVIDER_ORIENTATION_ENUM = {\n  HORIZONTAL: 'horizontal',\n  VERTICAL: 'vertical',\n} as const;\n\nexport const DIVIDER_TITLE_ALIGNMENT = ['start', 'middle', 'end'] as const;\nexport type TDividerTitleAlignment = (typeof DIVIDER_TITLE_ALIGNMENT)[number];\n\nexport const DIVIDER_STROKE_LINECAP = ['square', 'round', 'butt'] as const;\nexport type TDividerStrokeLinecap = (typeof DIVIDER_STROKE_LINECAP)[number];\n","/* -------------------------------------------------------------------------- */\n/*                                Button styles                               */\n/* -------------------------------------------------------------------------- */\n\n@import './bq-divider.variables';\n\n:host {\n  @apply block is-full;\n}\n\n:host([orientation='vertical']) {\n  @apply flex bs-full;\n}\n\n.bq-divider {\n  @apply flex items-center gap-[--bq-divider--title-marginX];\n}\n\n.bq-divider--stroke {\n  @apply flex-grow stroke-[color:--bq-divider--stroke-color] bs-[--bq-divider--stroke-thickness] is-full;\n\n  &.end {\n    @apply rotate-180;\n  }\n}\n\n.bq-divider--title__start .bq-divider--stroke.start,\n.bq-divider--title__end .bq-divider--stroke.end {\n  @apply flex-grow-0 basis-[--bq-divider--stroke-basis];\n}\n\n.bq-divider--vertical {\n  @apply flex-col items-center gap-[--bq-divider--title-marginX] is-full;\n\n  .bq-divider--stroke {\n    @apply bs-full is-[--bq-divider--stroke-thickness];\n  }\n}\n","import { Component, Element, h, Host, Prop, State, Watch } from '@stencil/core';\n\nimport {\n  DIVIDER_ORIENTATION,\n  DIVIDER_ORIENTATION_ENUM,\n  DIVIDER_STROKE_LINECAP,\n  DIVIDER_TITLE_ALIGNMENT,\n  TDividerOrientation,\n  TDividerStrokeLinecap,\n  TDividerTitleAlignment,\n} from './bq-divider.types';\nimport { getColorCSSVariable, getTextContent, hasSlotContent, isNil, validatePropValue } from '../../shared/utils';\n\n/**\n * The Divider component is used to visually separate content in a layout.\n *\n * @example How to use it\n * ```html\n * <bq-divider orientation=\"horizontal\" stroke-color=\"stroke--primary\" title-alignment=\"middle\">\n *   <span slot=\"title\">Divider Title</span>\n * </bq-divider>\n * ```\n *\n * @documentation https://www.beeq.design/3d466e231/p/53dfe6-divider\n * @status stable\n *\n * @attr {boolean} dashed - If true, the divider has a dashed pattern.\n * @attr {\"horizontal\" | \"vertical\"} orientation - The default orientation of the divider.\n * @attr {string} stroke-color - Set the stroke color of the divider. The value should be a valid value of the palette color.\n * @attr {\"start\" | \"middle\" | \"end\"} title-alignment - Set the alignment of the title on the main axis of the divider (horizontal / vertical).\n * @attr {number} stroke-dash-width - Set the width of each dash of the divider's stroke. This is applicable when the stroke is dashed.\n * @attr {number} stroke-dash-gap - Set the gap of the divider's stroke. This is applicable when the stroke is dashed.\n * @attr {number} stroke-thickness - Set the thickness of the divider's stroke. Value expressed in px.\n * @attr {number} stroke-basis - Set the min width of the divider's stroke when text is not centered. Value expressed in px.\n * @attr {\"square\" | \"round\" | \"butt\"} stroke-linecap - Set the line of the divider's stroke. This is applicable when the stroke is dashed.\n *\n * @slot - The title content of the divider.\n *\n * @part base - The component's internal wrapper.\n * @part dash-start - The component's internal svg wrapper for the start line of the divider's stroke.\n * @part dash-end - The component's internal svg wrapper for the end line of the divider's stroke.\n * @part dash-start-line - The component's internal line component of the divider's stroke.\n * @part dash-end-line - The component's internal line component of the divider's stroke.\n *\n * @cssprop --bq-divider--color - Divider color\n * @cssprop --bq-divider--title-marginX - Divider space between title and delimiters\n */\n@Component({\n  tag: 'bq-divider',\n  styleUrl: './scss/bq-divider.scss',\n  shadow: true,\n})\nexport class BqDivider {\n  // Own Properties\n  // ====================\n\n  private titleElem: HTMLDivElement;\n\n  // Reference to host HTML element\n  // ===================================\n\n  @Element() el!: HTMLBqDividerElement;\n\n  // State() variables\n  // Inlined decorator, alphabetical order\n  // =======================================\n\n  @State() private hasTitle: boolean;\n\n  // Public Property API\n  // ========================\n\n  /** If true, the divider has a dashed pattern */\n  @Prop() dashed = false;\n\n  /** The default orientation of the divider */\n  @Prop({ reflect: true }) orientation: TDividerOrientation = 'horizontal';\n\n  /** Set the stroke color of the divider. The value should be a valid value of the palette color */\n  @Prop({ reflect: true }) strokeColor?: string = 'stroke--primary';\n\n  /** Set the alignment of the title on the main axis of the divider (horizontal / vertical) */\n  @Prop({ reflect: true }) titleAlignment?: TDividerTitleAlignment = 'middle';\n\n  /** Set the width of each dash of the divider's stroke. This is applicable when the stroke is dashed */\n  @Prop({ reflect: true }) strokeDashWidth?: number = 12;\n\n  /** Set the gap of the divider's stroke. This is applicable when the stroke is dashed */\n  @Prop({ reflect: true }) strokeDashGap?: number = 7;\n\n  /** Set the thickness of the divider's stroke. Value expressed in px*/\n  @Prop({ reflect: true }) strokeThickness?: number = 1;\n\n  /** Set the min width of the divider's stroke when text is not centered. Value expressed in px */\n  @Prop({ reflect: true }) strokeBasis?: number = 0;\n\n  /** Set the line of the divider's stroke. This is applicable when the stroke is dashed */\n  @Prop({ reflect: true }) strokeLinecap?: TDividerStrokeLinecap = 'butt';\n\n  // Prop lifecycle events\n  // =======================\n\n  @Watch('orientation')\n  @Watch('titleAlignment')\n  @Watch('strokeLinecap')\n  checkPropValues() {\n    validatePropValue(DIVIDER_ORIENTATION, 'horizontal', this.el, 'orientation');\n    validatePropValue(DIVIDER_TITLE_ALIGNMENT, 'middle', this.el, 'titleAlignment');\n    validatePropValue(DIVIDER_STROKE_LINECAP, 'butt', this.el, 'strokeLinecap');\n  }\n\n  // Events section\n  // Requires JSDocs for public API documentation\n  // ==============================================\n\n  // Component lifecycle events\n  // Ordered by their natural call order\n  // =====================================\n\n  connectedCallback() {\n    this.checkPropValues();\n  }\n\n  componentWillLoad() {\n    this.checkPropValues();\n  }\n\n  componentDidLoad() {\n    this.handleSlotChange();\n  }\n\n  // Listeners\n  // ==============\n\n  // Public methods API\n  // These methods are exposed on the host element.\n  // Always use two lines.\n  // Public Methods must be async.\n  // Requires JSDocs for public API documentation.\n  // ===============================================\n\n  // Local methods\n  // Internal business logic.\n  // These methods cannot be called from the host element.\n  // =======================================================\n\n  private handleSlotChange = () => {\n    this.hasTitle = hasSlotContent(this.titleElem) || !!getTextContent(this.titleElem.querySelector('slot'));\n  };\n\n  private get strokeAttributes() {\n    return {\n      ...this.strokeDrawPositions,\n      ...(this.dashed && { 'stroke-dasharray': this.strokeDasharray }),\n      'stroke-linecap': this.strokeLinecap,\n      'stroke-width': this.strokeThickness,\n    };\n  }\n\n  private get strokeDrawPositions() {\n    const drawOffset = this.strokeThickness / 2;\n    const strokeDrawPositions = {\n      [DIVIDER_ORIENTATION_ENUM.HORIZONTAL]: { x1: drawOffset, x2: '100%', y1: drawOffset, y2: drawOffset },\n      [DIVIDER_ORIENTATION_ENUM.VERTICAL]: { x1: drawOffset, x2: drawOffset, y1: drawOffset, y2: '100%' },\n    };\n    const orientationMap = new Map(Object.entries(strokeDrawPositions));\n\n    return orientationMap.get(this.orientation);\n  }\n\n  private get strokeDasharray() {\n    return `${this.strokeDashWidth}, ${this.strokeDashGap}`;\n  }\n\n  // render() function\n  // Always the last one in the class.\n  // ===================================\n\n  render() {\n    const styles = {\n      ...(this.strokeColor && { '--bq-divider--stroke-color': getColorCSSVariable(this.strokeColor) }),\n      ...(this.strokeThickness && { '--bq-divider--stroke-thickness': `${this.strokeThickness}px` }),\n      ...(!isNil(this.strokeBasis) && { '--bq-divider--stroke-basis': `${this.strokeBasis}px` }),\n    };\n\n    return (\n      <Host style={styles}>\n        <div\n          class={{\n            'bq-divider': true,\n            [`bq-divider--${this.orientation}`]: true,\n            [`bq-divider--title__${this.titleAlignment}`]: true,\n            'gap-0': !this.hasTitle,\n          }}\n          part=\"base\"\n          ref={(div) => (this.titleElem = div)}\n          role=\"separator\"\n          aria-orientation={this.orientation}\n        >\n          <svg\n            class={{\n              'bq-divider--stroke start': true,\n              '!hidden': this.strokeBasis === 0 && this.titleAlignment === 'start',\n            }}\n            part=\"dash-start\"\n          >\n            <line {...this.strokeAttributes} part=\"dash-start-line\" />\n          </svg>\n          <slot onSlotchange={this.handleSlotChange} />\n          <svg\n            class={{\n              'bq-divider--stroke end': true,\n              '!hidden': !this.hasTitle || (this.strokeBasis === 0 && this.titleAlignment === 'end'),\n            }}\n            part=\"dash-end\"\n          >\n            <line {...this.strokeAttributes} part=\"dash-end-line\" />\n          </svg>\n        </div>\n      </Host>\n    );\n  }\n}\n"],"mappings":";;;;wOAAO,MAAMA,EAAsB,CAAC,aAAc,YAG3C,MAAMC,EAA2B,CACtCC,WAAY,aACZC,SAAU,YAGL,MAAMC,EAA0B,CAAC,QAAS,SAAU,OAGpD,MAAMC,EAAyB,CAAC,SAAU,QAAS,QCX1D,MAAMC,EAAe,qw6BACrB,MAAAC,EAAeD,E,MCmDFE,EAAS,M,yBAIZC,U,wBAWSC,SAMTC,OAAS,MAGQC,YAAmC,aAGnCC,YAAuB,kBAGvBC,eAA0C,SAG1CC,gBAA2B,GAG3BC,cAAyB,EAGzBC,gBAA2B,EAG3BC,YAAuB,EAGvBC,cAAwC,OAQjE,eAAAC,GACEC,EAAkBrB,EAAqB,aAAcsB,KAAKC,GAAI,eAC9DF,EAAkBjB,EAAyB,SAAUkB,KAAKC,GAAI,kBAC9DF,EAAkBhB,EAAwB,OAAQiB,KAAKC,GAAI,gB,CAW7D,iBAAAC,GACEF,KAAKF,iB,CAGP,iBAAAK,GACEH,KAAKF,iB,CAGP,gBAAAM,GACEJ,KAAKK,kB,CAkBCA,iBAAmB,KACzBL,KAAKZ,SAAWkB,EAAeN,KAAKb,cAAgBoB,EAAeP,KAAKb,UAAUqB,cAAc,QAAQ,EAG1G,oBAAYC,GACV,MAAO,IACFT,KAAKU,uBACJV,KAAKX,QAAU,CAAE,mBAAoBW,KAAKW,iBAC9C,iBAAkBX,KAAKH,cACvB,eAAgBG,KAAKL,gB,CAIzB,uBAAYe,GACV,MAAME,EAAaZ,KAAKL,gBAAkB,EAC1C,MAAMe,EAAsB,CAC1B,CAAC/B,EAAyBC,YAAa,CAAEiC,GAAID,EAAYE,GAAI,OAAQC,GAAIH,EAAYI,GAAIJ,GACzF,CAACjC,EAAyBE,UAAW,CAAEgC,GAAID,EAAYE,GAAIF,EAAYG,GAAIH,EAAYI,GAAI,SAE7F,MAAMC,EAAiB,IAAIC,IAAIC,OAAOC,QAAQV,IAE9C,OAAOO,EAAeI,IAAIrB,KAAKV,Y,CAGjC,mBAAYqB,GACV,MAAO,GAAGX,KAAKP,oBAAoBO,KAAKN,e,CAO1C,MAAA4B,GACE,MAAMC,EAAS,IACTvB,KAAKT,aAAe,CAAE,6BAA8BiC,EAAoBxB,KAAKT,iBAC7ES,KAAKL,iBAAmB,CAAE,iCAAkC,GAAGK,KAAKL,yBACnE8B,EAAMzB,KAAKJ,cAAgB,CAAE,6BAA8B,GAAGI,KAAKJ,kBAG1E,OACE8B,EAACC,EAAI,CAAAC,IAAA,2CAACC,MAAON,GACXG,EAAA,OAAAE,IAAA,2CACEE,MAAO,CACL,aAAc,KACd,CAAC,eAAe9B,KAAKV,eAAgB,KACrC,CAAC,sBAAsBU,KAAKR,kBAAmB,KAC/C,SAAUQ,KAAKZ,UAEjB2C,KAAK,OACLC,IAAMC,GAASjC,KAAKb,UAAY8C,EAChCC,KAAK,YAAW,mBACElC,KAAKV,aAEvBoC,EAAA,OAAAE,IAAA,2CACEE,MAAO,CACL,2BAA4B,KAC5B,UAAW9B,KAAKJ,cAAgB,GAAKI,KAAKR,iBAAmB,SAE/DuC,KAAK,cAELL,EAAA,QAAAE,IAAA,8CAAU5B,KAAKS,iBAAkBsB,KAAK,qBAExCL,EAAA,QAAAE,IAAA,2CAAMO,aAAcnC,KAAKK,mBACzBqB,EAAA,OAAAE,IAAA,2CACEE,MAAO,CACL,yBAA0B,KAC1B,WAAY9B,KAAKZ,UAAaY,KAAKJ,cAAgB,GAAKI,KAAKR,iBAAmB,OAElFuC,KAAK,YAELL,EAAA,QAAAE,IAAA,8CAAU5B,KAAKS,iBAAkBsB,KAAK,oB","ignoreList":[]}