{"file":"bq-select.entry.esm.js","mappings":";;;;;;;AAAA,MAAM,WAAW,GAAG,0ptCAA0ptC;;MCqIjqtC,QAAQ;;;;;;;;;;;;;;;;;IAIX,cAAc,CAAe;IAC7B,SAAS,CAAoB;IAC7B,SAAS,CAAe;IACxB,UAAU,CAAe;IACzB,UAAU,CAAe;IAEzB,aAAa,CAAkB;IAE/B,eAAe,GAAG,QAAQ,CAAC;;IAMhB,SAAS,CAAoB;;;;IAMvC,YAAY,CAAU;IACtB,aAAa,GAAG,KAAK,CAAC;IACtB,eAAe,GAA0B,EAAE,CAAC;IAE5C,QAAQ,GAAG,KAAK,CAAC;IACjB,SAAS,GAAG,KAAK,CAAC;IAClB,SAAS,GAAG,KAAK,CAAC;IAClB,QAAQ,GAAG,KAAK,CAAC;;;;IAMD,SAAS,CAAU;;IAGnB,gBAAgB,GAAI,aAAa,CAAC;;;;;IAMnB,YAAY,GAAI,CAAC,CAAC;;;;;IAMjC,QAAQ,GAAa,KAAK,CAAC;;IAG3B,YAAY,GAAI,KAAK,CAAC;;IAGtB,QAAQ,GAAY,CAAC,CAAC;;IAGtB,IAAI,CAAU;;IAGd,gBAAgB,GAAa,KAAK,CAAC;;IAGnC,IAAI,CAAU;;IAGd,cAAc,GAAW,CAAC,CAAC;;IAG3B,QAAQ,GAAa,KAAK,CAAC;;IAGZ,IAAI,GAAa,KAAK,CAAC;;IAGtC,WAAW,CAAU;;IAGrB,WAAW,CAAU;;IAGrB,SAAS,GAAe,QAAQ,CAAC;;IAGjC,QAAQ,CAAW;;IAGnB,QAAQ,CAAW;;IAGnB,SAAS,GAAa,IAAI,CAAC;;IAG3B,QAAQ,GAAY,CAAC,CAAC;;IAGtB,QAAQ,GAA0B,OAAO,CAAC;;;;;;;;;;;IAY1C,gBAAgB,GAAqB,MAAM,CAAC;;IAG7B,KAAK,CAAe;;;IAM5D,iBAAiB;QACf,IAAI,IAAI,CAAC,QAAQ,IAAI,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;;YAEzC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACxD,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;YAClD,OAAO;SACR;QAED,IAAI,CAAC,kBAAkB,EAAE,CAAC;KAC3B;;;;;IAOQ,MAAM,CAAqC;;IAG3C,OAAO,CAAqC;;IAG5C,OAAO,CAAqC;;IAG5C,QAAQ,CAAkF;;;;IAMnG,iBAAiB;QACf,IAAI,CAAC,iBAAiB,EAAE,CAAC;KAC1B;IAED,iBAAiB;QACf,IAAI,CAAC,iBAAiB,EAAE,CAAC;KAC1B;IAED,gBAAgB;QACd,IAAI,IAAI,CAAC,QAAQ,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;YAC9C,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;SACvF;QAED,IAAI,CAAC,iBAAiB,EAAE,CAAC;KAC1B;IAED,sBAAsB;QACpB,IAAI,CAAC,SAAS,CAAC,IAAI,GAAG,UAAU,CAAC;QACjC,IAAI,CAAC,SAAS,CAAC,YAAY,GAAG,IAAI,CAAC,IAAI,GAAG,MAAM,GAAG,OAAO,CAAC;KAC5D;IAED,MAAM,iBAAiB;QACrB,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC;YAAE,OAAO;QAE9B,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;QAC/B,IAAI,CAAC,KAAK,EAAE,CAAC;KACd;;;IAMD,gBAAgB,CAAC,EAAkC;QACjD,IAAI,CAAC,EAAE,CAAC,YAAY,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC;YAAE,OAAO;QAEjD,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC;KAC5B;IAID,8BAA8B,CAAC,EAAe;;QAE5C,IAAI,aAAa,CAAC,EAAE,CAAC,MAAM,EAAE,WAAW,CAAC;YAAE,OAAO;QAElD,EAAE,CAAC,eAAe,EAAE,CAAC;KACtB;;;;;;;;;;;;;IAgBD,MAAM,KAAK;QACT,IAAI,IAAI,CAAC,QAAQ;YAAE,OAAO;QAE1B,MAAM,EAAE,QAAQ,EAAE,SAAS,EAAE,OAAO,EAAE,EAAE,EAAE,GAAG,IAAI,CAAC;;QAGlD,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC;QACvB,IAAI,CAAC,eAAe,GAAG,EAAE,CAAC;;QAG1B,IAAI,CAAC,QAAQ,EAAE;YACb,IAAI,CAAC,YAAY,GAAG,SAAS,CAAC;YAC9B,SAAS,CAAC,KAAK,GAAG,SAAS,CAAC;SAC7B;;QAGD,IAAI,CAAC,sBAAsB,EAAE,CAAC;;QAG9B,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;KAClB;;;;;IAOO,iBAAiB,GAAG;QAC1B,IAAI,CAAC,IAAI,CAAC,QAAQ;YAAE,OAAO;QAE3B,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;KAClG,CAAC;IAEM,UAAU,GAAG;QACnB,IAAI,IAAI,CAAC,QAAQ;YAAE,OAAO;QAE1B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;KAC3B,CAAC;IAEM,WAAW,GAAG;QACpB,IAAI,IAAI,CAAC,QAAQ;YAAE,OAAO;QAE1B,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;KAC5B,CAAC;IAEM,YAAY,GAAG,CAAC,EAAmE;QACzF,IAAI,IAAI,CAAC,QAAQ;YAAE,OAAO;QAE1B,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,EAAE,CAAC,eAAe,EAAE,CAAC;SACtB;QAED,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC,MAAM,CAAC;QAElC,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,CAAC;;YAEnC,IAAI,CAAC,SAAS,CAAC,KAAK,GAAG,EAAE,CAAC;;;YAG1B,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;SACjD;aAAM;YACL,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;SACpB;QAED,IAAI,CAAC,sBAAsB,EAAE,CAAC;QAC9B,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;KACxB,CAAC;IAEM,uBAAuB,GAAG,CAAC,IAAyB;;QAE1D,MAAM,kBAAkB,GAAG,IAAI,GAAG,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QAEzD,IAAI,kBAAkB,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;YAChC,kBAAkB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;SACjC;aAAM;YACL,kBAAkB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;SAC9B;QAED,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;QACtD,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,KAAK,CAAC,CAAC;KAC7D,CAAC;IAEM,kBAAkB,GAAG,CAAC,EAAS;QACrC,IAAI,IAAI,CAAC,QAAQ;YAAE,OAAO;QAE1B,IAAI,CAAC,aAAa,EAAE,MAAM,EAAE,CAAC;QAE7B,MAAM,KAAK,GAAI,EAAE,CAAC,MAA2B,CAAC,KAAK,EAAE,WAAW,EAAE,CAAC,IAAI,EAAE,CAAC;QAE1E,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE;YACrB,IAAI,CAAC,KAAK,EAAE,CAAC;SACd;aAAM;YACL,IAAI,CAAC,aAAa,GAAG,QAAQ,CAAC;gBAC5B,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,IAAyB;oBAC7C,MAAM,SAAS,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,WAAW,EAAE,CAAC;oBAC1D,IAAI,CAAC,MAAM,GAAG,CAAC,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;iBAC1C,CAAC,CAAC;aACJ,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;YAEtB,IAAI,CAAC,aAAa,EAAE,CAAC;SACtB;;;QAID,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;KAClB,CAAC;IAEM,gBAAgB,GAAG,CAAC,EAAe;QACzC,CAAC;YACC,MAAM,IAAI,CAAC,KAAK,EAAE,CAAC;SACpB,GAAG,CAAC;QACL,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;QAEvB,EAAE,CAAC,eAAe,EAAE,CAAC;KACtB,CAAC;IAEM,eAAe,GAAG,CAAC,IAAyB;QAClD,IAAI,IAAI,CAAC,QAAQ;YAAE,OAAO;QAE1B,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,CAAC;QACnC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;KACjD,CAAC;IAEM,qBAAqB,GAAG;QAC9B,IAAI,CAAC,QAAQ,GAAG,cAAc,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;KAChD,CAAC;IAEM,sBAAsB,GAAG;QAC/B,IAAI,CAAC,SAAS,GAAG,cAAc,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;KAClD,CAAC;IAEM,sBAAsB,GAAG;QAC/B,IAAI,CAAC,SAAS,GAAG,cAAc,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;KAClD,CAAC;IAEM,0BAA0B,GAAG;QACnC,IAAI,CAAC,aAAa,GAAG,cAAc,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;KAC1D,CAAC;IAEM,sBAAsB,GAAG;QAC/B,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,IAAyB,MAAM,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,CAAC,CAAC;KAC5E,CAAC;IAEM,kBAAkB,GAAG;QAC3B,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC;QAC3C,IAAI,CAAC,OAAO,CAAC,MAAM;YAAE,OAAO;;QAG5B,IAAI,CAAC,wBAAwB,EAAE,CAAC;QAEhC,IAAI,IAAI,CAAC,QAAQ,EAAE;;YAEjB,IAAI,CAAC,eAAe,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,KAAK,IAAI,CAAC,KAAK,EAAE,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;SACvF;aAAM;;YAEL,IAAI,CAAC,kBAAkB,EAAE,CAAC;SAC3B;QAED,SAAS,CAAC,YAAY,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,GAAG,KAAK,EAAE,GAAG,SAAS,CAAC,CAAC;KAChE,CAAC;;;;;;;;IASM,wBAAwB,GAAG;QACjC,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC;QAC1C,MAAM,cAAc,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,WAAW,EAAE,CAAC;QAEnD,OAAO,CAAC,OAAO,CAAC,CAAC,MAA2B;YAC1C,IAAI,QAAQ,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;gBACpC,MAAM,CAAC,QAAQ,GAAG,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;aAChD;iBAAM;gBACL,MAAM,CAAC,QAAQ,GAAG,MAAM,CAAC,KAAK,CAAC,WAAW,EAAE,KAAK,cAAc,CAAC;aACjE;SACF,CAAC,CAAC;KACJ,CAAC;;;;;;;IAQM,kBAAkB,GAAG;QAC3B,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,SAAS,EAAE,GAAG,IAAI,CAAC;QAE3C,MAAM,WAAW,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,CAAC;QACjE,MAAM,YAAY,GAAG,WAAW,GAAG,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC;QAEzE,SAAS,CAAC,KAAK,GAAG,YAAY,CAAC;QAC/B,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;KAClC,CAAC;IAEM,cAAc,GAAG,CAAC,IAAyB;QACjD,IAAI,CAAC,IAAI;YAAE,OAAO;QAClB,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC;KACpC,CAAC;IAEF,IAAY,OAAO;QACjB,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC,CAAC;KAC1D;IAED,IAAY,kBAAkB;;QAE5B,OAAO,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,eAAe,CAAC,MAAM,KAAK,CAAC,GAAG,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC;KAC1F;IAED,IAAY,WAAW;QACrB,OAAO,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,KAAK;YAC1C,IAAI,KAAK,GAAG,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC,cAAc,GAAG,CAAC,EAAE;gBAC1D,QACE,cACE,GAAG,EAAE,IAAI,CAAC,KAAK,EACf,SAAS,QACT,IAAI,EAAC,QAAQ,EACb,OAAO,EAAC,QAAQ,EAChB,SAAS,EAAE,CAAC,KAAK;;wBAEf,KAAK,CAAC,eAAe,EAAE,CAAC;wBACxB,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;qBAC5B;;oBAED,OAAO,EAAE,CAAC,EAAc,KAAK,EAAE,CAAC,eAAe,EAAE,EACjD,WAAW,EAAC,8EAA8E,EAC1F,IAAI,EAAC,KAAK,IAET,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CACnB,EACT;aACH;iBAAM,IAAI,KAAK,KAAK,IAAI,CAAC,cAAc,EAAE;gBACxC,QACE,cACE,GAAG,EAAC,MAAM,EACV,IAAI,EAAC,QAAQ,EACb,OAAO,EAAC,QAAQ,EAChB,WAAW,EAAC,8EAA8E,EAC1F,IAAI,EAAC,KAAK,SAER,IAAI,CAAC,eAAe,CAAC,MAAM,GAAG,KAAK,CAC9B,EACT;aACH;YAED,OAAO,IAAI,CAAC;SACb,CAAC,CAAC;KACJ;IAED,IAAY,YAAY;QACtB,IAAI,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,QAAQ,EAAE;YACtC,OAAO,KAAK,CAAC;SACd;QAED,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,OAAO,IAAI,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC,CAAC;SACxC;QAED,OAAO,SAAS,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;KACrC;;;;IAMD,MAAM;QACJ,MAAM,OAAO,GAAG,oBAAoB,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,eAAe,EAAE,CAAC;QAExE,QACE,4DAAK,KAAK,EAAC,WAAW,EAAC,IAAI,EAAC,MAAM,IAEhC,8DACE,EAAE,EAAE,OAAO,EACX,KAAK,EAAE,EAAE,kBAAkB,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC,IAAI,CAAC,QAAQ,EAAE,gBAClD,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,eAAe,EAC7C,OAAO,EAAE,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,eAAe,EAC1C,GAAG,EAAE,CAAC,SAA0B,MAAM,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC,EACjE,IAAI,EAAC,OAAO,IAEZ,6DAAM,IAAI,EAAC,OAAO,EAAC,YAAY,EAAE,IAAI,CAAC,qBAAqB,GAAI,CACzD,EAER,oEACE,KAAK,EAAC,4BAA4B,EAClC,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,gBAAgB,EAAE,IAAI,CAAC,gBAAgB,EACvC,IAAI,EAAE,IAAI,CAAC,IAAI,EACf,WAAW,EAAE,IAAI,CAAC,WAAW,EAC7B,SAAS,EAAE,IAAI,CAAC,SAAS,EACzB,SAAS,EAAE,IAAI,CAAC,SAAS,EACzB,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,WAAW,EAAC,OAAO,IAGnB,4DACE,KAAK,EAAE;gBACL,oBAAoB,EAAE,IAAI;gBAC1B,CAAC,cAAc,IAAI,CAAC,gBAAgB,EAAE,GAAG,IAAI;gBAC7C,QAAQ,EAAE,IAAI,CAAC,QAAQ;aACxB,EACD,IAAI,EAAC,SAAS,EACd,IAAI,EAAC,SAAS,IAGd,6DACE,KAAK,EAAE,EAAE,4BAA4B,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC,IAAI,CAAC,SAAS,EAAE,EACzE,GAAG,EAAE,CAAC,QAAyB,MAAM,IAAI,CAAC,UAAU,GAAG,QAAQ,CAAC,EAChE,IAAI,EAAC,QAAQ,IAEb,6DAAM,IAAI,EAAC,QAAQ,EAAC,YAAY,EAAE,IAAI,CAAC,sBAAsB,GAAI,CAC5D,EACP,4DAAK,KAAK,EAAC,6BAA6B,EAAC,IAAI,EAAC,eAAe,IAE1D,IAAI,CAAC,QAAQ,KACZ,6DAAM,KAAK,EAAC,iBAAiB,EAAC,IAAI,EAAC,MAAM,IACvC,6DAAM,IAAI,EAAC,MAAM,IAAE,IAAI,CAAC,WAAW,CAAQ,CACtC,CACR,EAED,8DACE,EAAE,EAAE,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,eAAe,EACrC,KAAK,EAAC,6CAA6C,EACnD,YAAY,EAAC,KAAK,EAClB,cAAc,EAAC,KAAK,mBACL,IAAI,CAAC,QAAQ,GAAG,MAAM,GAAG,OAAO,mBAChC,cAAc,IAAI,CAAC,IAAI,EAAE,mBACzB,IAAI,CAAC,IAAI,GAAG,MAAM,GAAG,OAAO,mBAC7B,SAAS,EACvB,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,IAAI,EAAE,IAAI,CAAC,IAAI,EACf,IAAI,EAAE,IAAI,CAAC,IAAI,EACf,WAAW,EAAE,IAAI,CAAC,kBAAkB,EACpC,GAAG,EAAE,CAAC,SAA2B,MAAM,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC,EAClE,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,IAAI,EAAC,UAAU,EACf,UAAU,EAAE,KAAK,EACjB,IAAI,EAAC,MAAM,EACX,KAAK,EAAE,IAAI,CAAC,YAAY,EACxB,IAAI,EAAC,OAAO;;YAEZ,MAAM,EAAE,IAAI,CAAC,UAAU,EACvB,OAAO,EAAE,IAAI,CAAC,WAAW,EACzB,OAAO,EAAE,IAAI,CAAC,kBAAkB,GAChC,CACE,EAEL,IAAI,CAAC,YAAY;;;QAGhB,kEACE,KAAK,EAAC,iDAAiD,EACvD,UAAU,EAAC,MAAM,gBACL,IAAI,CAAC,gBAAgB,EACjC,IAAI,EAAC,OAAO,EACZ,SAAS,EAAE,IAAI,CAAC,gBAAgB,EAChC,IAAI,EAAC,WAAW,EAChB,WAAW,EAAC,QAAQ,EACpB,QAAQ,EAAE,CAAC,CAAC,IAEZ,6DAAM,IAAI,EAAC,YAAY,IACrB,gEAAS,IAAI,EAAC,UAAU,EAAC,KAAK,EAAC,MAAM,GAAG,CACnC,CACG,CACb,EAED,6DACE,KAAK,EAAE,EAAE,4BAA4B,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,CAAC,IAAI,EAAE,UAAU,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,EAC9F,GAAG,EAAE,CAAC,QAAyB,MAAM,IAAI,CAAC,UAAU,GAAG,QAAQ,CAAC,EAChE,IAAI,EAAC,QAAQ,IAEb,6DAAM,IAAI,EAAC,QAAQ,EAAC,YAAY,EAAE,IAAI,CAAC,sBAAsB,IAC3D,gEAAS,IAAI,EAAC,YAAY,EAAC,KAAK,EAAC,MAAM,GAAG,CACrC,CACF,CACH,EACN,uEACE,EAAE,EAAE,cAAc,IAAI,CAAC,IAAI,EAAE,EAC7B,UAAU,EAAE,IAAI,CAAC,YAAY,mBACd,IAAI,CAAC,IAAI,GAAG,MAAM,GAAG,OAAO,EAC3C,WAAW,EAAC,kBAAkB,EAC9B,IAAI,EAAC,SAAS,IAEd,8DAAQ,CACO,CACL,EAEd,4DACE,KAAK,EAAE;gBACL,CAAC,qCAAqC,IAAI,CAAC,gBAAgB,EAAE,GAAG,IAAI;gBACpE,SAAS,EAAE,CAAC,IAAI,CAAC,aAAa;aAC/B,EACD,GAAG,EAAE,CAAC,OAAuB,MAAM,IAAI,CAAC,cAAc,GAAG,OAAO,CAAC,EACjE,IAAI,EAAC,aAAa,IAElB,6DAAM,IAAI,EAAC,aAAa,EAAC,YAAY,EAAE,IAAI,CAAC,0BAA0B,GAAI,CACtE,CACF,EACN;KACH;;;;;;;;;;;","names":[],"sources":["../../packages/beeq/src/components/select/scss/bq-select.scss?tag=bq-select&encapsulation=shadow","../../packages/beeq/src/components/select/bq-select.tsx"],"sourcesContent":["/* -------------------------------------------------------------------------- */\n/*                                Select styles                               */\n/* -------------------------------------------------------------------------- */\n\n@import './bq-select.variables';\n\n:host {\n  @apply block w-full;\n}\n\n/* -------------------------------------------------------------------------- */\n/*                            Label and Helper text                           */\n/* -------------------------------------------------------------------------- */\n\n.bq-select__label {\n  @apply flex items-center m-be-[--bq-select--label-margin-bottom];\n  @apply text-[length:--bq-select--label-text-size] text-[color:--bq-select--label-text-color];\n}\n\n.bq-select__helper-text {\n  @apply text-[length:--bq-select--helper-text-size] text-[color:--bq-select--helper-text-color] m-bs-[--bq-select--helper-margin-top];\n}\n\n.bq-select__helper-text.validation-error {\n  @apply text-danger;\n}\n\n.bq-select__helper-text.validation-success {\n  @apply text-success;\n}\n\n.bq-select__helper-text.validation-warning {\n  @apply text-warning;\n}\n\n/* -------------------------------------------------------------------------- */\n/*                         Select input group control                         */\n/* -------------------------------------------------------------------------- */\n\n.bq-select__dropdown:has(:focus-within, :focus-visible) {\n  // The focus state will be controlled by the dropdown element\n  // if any of its children has focus, the dropdown will set the focus state to the .bq-select__control\n  .bq-select__control {\n    --bq-ring-width: 1px;\n    --bq-ring-offset-width: 0;\n    --bq-ring-color-focus: var(--bq-select--border-color-focus);\n\n    @apply focus border-[color:--bq-select--border-color-focus];\n  }\n}\n\n.bq-select__control {\n  @apply flex items-center bg-[--bq-select--background-color] transition-[border-color,box-shadow] is-full;\n  // Border\n  @apply rounded-[--bq-select--border-radius] border-[length:--bq-select--border-width] border-[color:--bq-select--border-color];\n  // Padding\n  @apply pe-[--bq-select--padding-end] ps-[--bq-select--padding-start] p-b-[var(--bq-select--paddingY)];\n  // Text\n  @apply select-none text-[length:--bq-select--text-size] text-[color:--bq-select--text-color] placeholder:text-[color:--bq-select--text-placeholder-color];\n  // Hover\n  @apply [&:not(.disabled):not(:focus-within)]:hover:border-hover-brand;\n\n  border-style: var(--bq-select--border-style);\n\n  // Enable clear button whenever the input group control is hovered or has focus\n  &:not(.disabled):hover,\n  &:not(.disabled):focus-within {\n    .bq-select__control--clear {\n      @apply inline-block;\n    }\n  }\n}\n\n.bq-select__control.disabled {\n  @apply cursor-not-allowed opacity-60;\n}\n\n/* ------------------------------- Validation ------------------------------- */\n\n.bq-select__control.validation-error {\n  @apply border-danger [&:not(.disabled):not(:focus-within)]:hover:border-hover-danger;\n\n  &:not(.disabled):focus-within {\n    --bq-ring-color-focus: theme(stroke.danger);\n\n    @apply border-active-danger;\n  }\n}\n\n.bq-select__control.validation-success {\n  @apply border-success [&:not(.disabled):not(:focus-within)]:hover:border-hover-success;\n\n  &:not(.disabled):focus-within {\n    --bq-ring-color-focus: theme(stroke.success);\n\n    @apply border-active-success;\n  }\n}\n\n.bq-select__control.validation-warning {\n  @apply border-warning [&:not(.disabled):not(:focus-within)]:hover:border-hover-warning;\n\n  &:not(.disabled):focus-within {\n    --bq-ring-color-focus: theme(stroke.warning);\n\n    @apply border-active-warning;\n  }\n}\n\n/* -------------------------------------------------------------------------- */\n/*                              Native HTML Input                             */\n/* -------------------------------------------------------------------------- */\n\n.bq-select__control--input {\n  @apply flex-auto cursor-inherit select-none appearance-none bg-inherit font-inherit text-[length:inherit] text-inherit;\n  @apply m-0 border-none p-0 min-bs-[var(--bq-select--icon-size)] min-is-0 focus:outline-none focus-visible:outline-none;\n\n  box-shadow: none;\n  font-weight: inherit;\n}\n\n/* -------------------------------------------------------------------------- */\n/*                                Clear button                                */\n/* -------------------------------------------------------------------------- */\n\n.bq-select__control--clear::part(button) {\n  // Since the clear button is inside the input group control,\n  // we need to reset the focus ring styles\n  --bq-ring-width: initial;\n  --bq-ring-offset-width: initial;\n  --bq-ring-color-focus: initial;\n\n  @apply rounded-xs border-none p-0 bs-auto;\n}\n\n/* -------------------------------------------------------------------------- */\n/*                              Prefix and suffix                             */\n/* -------------------------------------------------------------------------- */\n\n.bq-select__control--prefix,\n.bq-select__control--suffix {\n  @apply pointer-events-none flex items-center text-[color:var(--bq-select--text-color)];\n}\n\n.bq-select__control--prefix {\n  @apply me-[--bq-select--gap];\n}\n\n.bq-select__control--suffix {\n  @apply ms-[--bq-select--gap] transition-transform duration-300 ease-in-out;\n}\n\n.bq-select__tags {\n  @apply me-xs2 flex flex-1 gap-xs2;\n\n  bq-tag,\n  ::slotted(bq-tag) {\n    @apply inline-flex;\n  }\n\n  bq-tag::part(text) {\n    @apply text-nowrap leading-small;\n  }\n}\n\n/* -------------------------------------------------------------------------- */\n/*                         Slotted and internal icons                         */\n/* -------------------------------------------------------------------------- */\n\nbq-icon,\n::slotted(bq-icon) {\n  --bq-icon--size: var(--bq-select--icon-size) !important;\n}\n","import {\n  AttachInternals,\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Listen,\n  Method,\n  Prop,\n  State,\n  Watch,\n} from '@stencil/core';\n\nimport { Placement } from '../../services/interfaces';\nimport { debounce, hasSlotContent, isDefined, isHTMLElement, isNil, isString, TDebounce } from '../../shared/utils';\nimport { TInputValidation } from '../input/bq-input.types';\n\nexport type TSelectValue = string | string[];\n\n/**\n * The select input component lets users choose from a predefined list, commonly used in forms for easy data selection.\n *\n * @example How to use it\n * ```html\n * <bq-select placeholder=\"Placeholder\">\n *   <label slot=\"label\">Select label</label>\n *   <span slot=\"helper-text\">\n *     <bq-icon name=\"star\"></bq-icon>\n *       Helper text\n *   </span>\n *\n *   <bq-option value=\"1\">Option 1</bq-option>\n *   <bq-option value=\"2\">Option 2</bq-option>\n *   <bq-option value=\"3\">Option 3</bq-option>\n * </bq-select>\n * ```\n *\n * @documentation https://www.beeq.design/3d466e231/p/41989d-select/b/09d7b1\n * @status stable\n *\n * @dependency bq-button\n * @dependency bq-dropdown\n * @dependency bq-icon\n * @dependency bq-option-list\n * @dependency bq-tag\n *\n * @attr {boolean} autofocus - If `true`, the Select input will be focused on component render.\n * @attr {string} clear-button-label - The clear button aria label.\n * @attr {number} debounce-time - The amount of time, in milliseconds, to wait before emitting the `bqInput` event after the input value changes.\n * @attr {boolean} disable-clear - If `true`, the clear button won't be displayed.\n * @attr {boolean} disabled - Indicates whether the Select input is disabled and cannot be interacted with.\n * @attr {number} distance - Represents the distance (gutter or margin) between the Select panel and the input element.\n * @attr {string} form - The ID of the form that Select input field belongs to.\n * @attr {boolean} keep-open-on-select - If `true`, the Select panel will remain open after a selection is made.\n * @attr {number} max-tags-visible - The maximum number of tags to display when multiple selection is enabled.\n * @attr {boolean} multiple - If `true`, the Select input will allow multiple selections.\n * @attr {string} name - The Select input name.\n * @attr {boolean} open - If `true`, the Select panel will be visible.\n * @attr {string} panel-height - When set, it will override the height of the Select panel.\n * @attr {string} placeholder - The Select input placeholder text value.\n * @attr {\"bottom\" | \"bottom-end\" | \"bottom-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\"} placement - Position of the Select panel.\n * @attr {boolean} readonly - If `true`, the Select input cannot be modified.\n * @attr {boolean} required - Indicates whether or not the Select input is required to be filled out before submitting the form.\n * @attr {boolean} same-width - Whether the panel should have the Select same width as the input element.\n * @attr {number} skidding - Represents the skidding between the Select panel and the input element.\n * @attr {\"absolute\" | \"fixed\"} strategy - Defines the strategy to position the Select panel.\n * @attr {\"error\" | \"success\" | \"warning\" | \"none\"} validation-status - The validation status of the Select input.\n * @attr {\"number\" | \"string\" | \"string[]\"} value - The select input value can be used to reset the field to a previous value.\n *\n * @method clear - Method to be called to clear the selected value.\n *\n * @event bqBlur - The callback handler is emitted when the Select input loses focus.\n * @event bqClear - The callback handler is emitted when the selected value has been cleared.\n * @event bqFocus - A callback handler is emitted when the Select input has received focus.\n * @event bqSelect - The callback handler is emitted when the selected value has changed.\n *\n * @slot label - The label slot container.\n * @slot prefix - The prefix slot container.\n * @slot tags - The tags slot container.\n * @slot clear-icon - The clear icon slot container.\n * @slot suffix - The suffix slot container.\n * @slot helper-text - The helper text slot container.\n *\n * @part base - The component's base wrapper.\n * @part button - The native HTML button used under the hood in the clear button.\n * @part clear-btn - The clear button.\n * @part control - The input control wrapper.\n * @part input-outline - The input outline wrapper that holds the tags container and the native HTML input used under the hood.\n * @part helper-text - The helper text slot container.\n * @part input - The native HTML input element used under the hood.\n * @part label - The label slot container.\n * @part panel - The select panel container\n * @part prefix - The prefix slot container.\n * @part suffix - The suffix slot container.\n * @part tags - The tags container of the BqTags for multiple selection.\n * @part tag - The tag container of the BqTag for multiple selection.\n * @part tag__base - The base wrapper of the BqTag for multiple selection.\n * @part tag__prefix - The prefix slot container of the BqTag for multiple selection.\n * @part tag__text - The text slot container of the BqTag for multiple selection.\n * @part tag__btn-close - The close button of the BqTag for multiple selection.\n * @part option-list - The option list container.\n *\n * @cssprop --bq-select--background-color - Select background color\n * @cssprop --bq-select--border-color - Select border color\n * @cssprop --bq-select--border-color-focus - Select border color on focus\n * @cssprop --bq-select--border-color-disabled - Select border color when disabled\n * @cssprop --bq-select--border-radius - Select border radius\n * @cssprop --bq-select--border-width - Select border width\n * @cssprop --bq-select--border-style - Select border style\n * @cssprop --bq-select--gap - Gap between Select content and prefix/suffix\n * @cssprop --bq-select--helper-margin-top - Helper text margin top\n * @cssprop --bq-select--helper-text-color - Helper text color\n * @cssprop --bq-select--helper-text-size - Helper text size\n * @cssprop --bq-select--icon-size - Icon size to use in prefix/suffix and clear button\n * @cssprop --bq-select--label-margin-bottom - Select label margin bottom\n * @cssprop --bq-select--label-text-color - Select label text color\n * @cssprop --bq-select--label-text-size - Select label text size\n * @cssprop --bq-select--padding-start - Select padding start\n * @cssprop --bq-select--padding-end - Select padding end\n * @cssprop --bq-select--paddingY - Select padding top and bottom\n * @cssprop --bq-select--text-color - Select text color\n * @cssprop --bq-select--text-size - Select text size\n * @cssprop --bq-select--text-placeholder-color - Select placeholder text color\n */\n@Component({\n  tag: 'bq-select',\n  styleUrl: './scss/bq-select.scss',\n  formAssociated: true,\n  shadow: {\n    delegatesFocus: true,\n  },\n})\nexport class BqSelect {\n  // Own Properties\n  // ====================\n\n  private helperTextElem?: HTMLElement;\n  private inputElem?: HTMLInputElement;\n  private labelElem?: HTMLElement;\n  private prefixElem?: HTMLElement;\n  private suffixElem?: HTMLElement;\n\n  private debounceQuery: TDebounce<void>;\n\n  private fallbackInputId = 'select';\n\n  // Reference to host HTML element\n  // ===================================\n\n  @Element() el!: HTMLBqSelectElement;\n  @AttachInternals() internals!: ElementInternals;\n\n  // State() variables\n  // Inlined decorator, alphabetical order\n  // =======================================\n\n  @State() displayValue?: string;\n  @State() hasHelperText = false;\n  @State() selectedOptions: HTMLBqOptionElement[] = [];\n\n  @State() hasLabel = false;\n  @State() hasPrefix = false;\n  @State() hasSuffix = false;\n  @State() hasValue = false;\n\n  // Public Property API\n  // ========================\n\n  /** If true, the Select input will be focused on component render */\n  @Prop({ reflect: true }) autofocus: boolean;\n\n  /** The clear button aria label */\n  @Prop({ reflect: true }) clearButtonLabel? = 'Clear value';\n\n  /**\n   * The amount of time, in milliseconds, to wait before emitting the `bqInput` event after the input value changes.\n   * A value of 0 means no debouncing will occur.\n   */\n  @Prop({ reflect: true, mutable: true }) debounceTime? = 0;\n\n  /**\n   * Indicates whether the Select input is disabled or not.\n   * If `true`, the Select is disabled and cannot be interacted with.\n   */\n  @Prop({ mutable: true }) disabled?: boolean = false;\n\n  /** If true, the clear button won't be displayed */\n  @Prop({ reflect: true }) disableClear? = false;\n\n  /** Represents the distance (gutter or margin) between the Select panel and the input element. */\n  @Prop({ reflect: true }) distance?: number = 8;\n\n  /** The ID of the form that the Select input belongs to. */\n  @Prop({ reflect: true }) form?: string;\n\n  /** If true, the Select panel will remain open after a selection is made. */\n  @Prop({ reflect: true }) keepOpenOnSelect?: boolean = false;\n\n  /** The Select input name. */\n  @Prop({ reflect: true }) name!: string;\n\n  /** The maximum number of tags to display when multiple selection is enabled */\n  @Prop({ mutable: true }) maxTagsVisible: number = 2;\n\n  /** If true, the Select input will allow multiple selections. */\n  @Prop({ reflect: true }) multiple?: boolean = false;\n\n  /** If true, the Select panel will be visible. */\n  @Prop({ reflect: true, mutable: true }) open?: boolean = false;\n\n  /** When set, it will override the height of the Select panel. */\n  @Prop({ reflect: true }) panelHeight?: string;\n\n  /** The Select input placeholder text value */\n  @Prop({ reflect: true }) placeholder?: string;\n\n  /** Position of the Select panel */\n  @Prop({ reflect: true }) placement?: Placement = 'bottom';\n\n  /** If true, the list of options cannot be filtered (searching won't be available) */\n  @Prop({ reflect: true }) readonly?: boolean;\n\n  /** Indicates whether or not the Select input is required to be filled out before submitting the form. */\n  @Prop({ reflect: true }) required?: boolean;\n\n  /** Whether the panel should have the Select same width as the input element */\n  @Prop({ reflect: true }) sameWidth?: boolean = true;\n\n  /**  Represents the skidding between the Select panel and the input element. */\n  @Prop({ reflect: true }) skidding?: number = 0;\n\n  /** Defines the strategy to position the Select panel */\n  @Prop({ reflect: true }) strategy?: 'fixed' | 'absolute' = 'fixed';\n\n  /**\n   * The validation status of the Select input.\n   *\n   * @remarks\n   * This property is used to indicate the validation status of the select input. It can be set to one of the following values:\n   * - `'none'`: No validation status is set.\n   * - `'error'`: The input has a validation error.\n   * - `'warning'`: The input has a validation warning.\n   * - `'success'`: The input has passed validation.\n   */\n  @Prop({ reflect: true }) validationStatus: TInputValidation = 'none';\n\n  /** The select input value, it can be used to reset the field to a previous value */\n  @Prop({ reflect: true, mutable: true }) value: TSelectValue;\n\n  // Prop lifecycle events\n  // =======================\n\n  @Watch('value')\n  handleValueChange() {\n    if (this.multiple && isString(this.value)) {\n      // NOTE: we ensure that value is an array, changing the value will trigger Watch to execute thus the return\n      this.value = Array.from(JSON.parse(String(this.value)));\n      this.internals.setFormValue(this.value.join(','));\n      return;\n    }\n\n    this.syncItemsFromValue();\n  }\n\n  // Events section\n  // Requires JSDocs for public API documentation\n  // ==============================================\n\n  /** Callback handler emitted when the Select input loses focus */\n  @Event() bqBlur!: EventEmitter<HTMLBqSelectElement>;\n\n  /** Callback handler emitted when the selected value has been cleared */\n  @Event() bqClear!: EventEmitter<HTMLBqSelectElement>;\n\n  /** Callback handler emitted when the Select input has received focus */\n  @Event() bqFocus!: EventEmitter<HTMLBqSelectElement>;\n\n  /** Callback handler emitted when the selected value has changed */\n  @Event() bqSelect!: EventEmitter<{ value: string | number | string[]; item: HTMLBqOptionElement }>;\n\n  // Component lifecycle events\n  // Ordered by their natural call order\n  // =====================================\n\n  connectedCallback() {\n    this.initMultipleValue();\n  }\n\n  componentWillLoad() {\n    this.initMultipleValue();\n  }\n\n  componentDidLoad() {\n    if (this.multiple && Array.isArray(this.value)) {\n      this.selectedOptions = this.options.filter((item) => this.value.includes(item.value));\n    }\n\n    this.handleValueChange();\n  }\n\n  formAssociatedCallback() {\n    this.internals.role = 'combobox';\n    this.internals.ariaExpanded = this.open ? 'true' : 'false';\n  }\n\n  async formResetCallback() {\n    if (isNil(this.value)) return;\n\n    this.internals.setValidity({});\n    this.clear();\n  }\n\n  // Listeners\n  // ==============\n\n  @Listen('bqOpen', { capture: true })\n  handleOpenChange(ev: CustomEvent<{ open: boolean }>) {\n    if (!ev.composedPath().includes(this.el)) return;\n\n    this.open = ev.detail.open;\n  }\n\n  @Listen('bqFocus', { capture: true })\n  @Listen('bqBlur', { capture: true })\n  stopOptionFocusBlurPropagation(ev: CustomEvent) {\n    // Stop propagation of focus and blur events coming from the `bq-option` elements\n    if (isHTMLElement(ev.target, 'bq-select')) return;\n\n    ev.stopPropagation();\n  }\n\n  // Public methods API\n  // These methods are exposed on the host element.\n  // Always use two lines.\n  // Public Methods must be async.\n  // Requires JSDocs for public API documentation.\n  // ===============================================\n\n  /**\n   * Clears the selected value.\n   *\n   * @return {Promise<void>}\n   * @memberof BqSelect\n   */\n  @Method()\n  async clear(): Promise<void> {\n    if (this.disabled) return;\n\n    const { multiple, inputElem, bqClear, el } = this;\n\n    // Clear value and selected options\n    this.value = undefined;\n    this.selectedOptions = [];\n\n    // Clear display value and input element if not multiple\n    if (!multiple) {\n      this.displayValue = undefined;\n      inputElem.value = undefined;\n    }\n\n    // Update form value and reset options visibility\n    this.resetOptionsVisibility();\n\n    // Emit clear event\n    bqClear.emit(el);\n  }\n\n  // Local methods\n  // Internal business logic.\n  // These methods cannot be called from the host element.\n  // =======================================================\n\n  private initMultipleValue = () => {\n    if (!this.multiple) return;\n\n    this.value = Array.isArray(this.value) ? this.value : Array.from(JSON.parse(String(this.value)));\n  };\n\n  private handleBlur = () => {\n    if (this.disabled) return;\n\n    this.bqBlur.emit(this.el);\n  };\n\n  private handleFocus = () => {\n    if (this.disabled) return;\n\n    this.bqFocus.emit(this.el);\n  };\n\n  private handleSelect = (ev: CustomEvent<{ value: TSelectValue; item: HTMLBqOptionElement }>) => {\n    if (this.disabled) return;\n\n    if (this.multiple) {\n      ev.stopPropagation();\n    }\n\n    const { value, item } = ev.detail;\n\n    if (this.multiple) {\n      this.handleMultipleSelection(item);\n      // Clear the input value after selecting an item\n      this.inputElem.value = '';\n      // If multiple selection is enabled, emit the selected items array instead of relying on\n      // the option list to emit the value of the selected item\n      this.bqSelect.emit({ value: this.value, item });\n    } else {\n      this.value = value;\n    }\n\n    this.resetOptionsVisibility();\n    this.inputElem.focus();\n  };\n\n  private handleMultipleSelection = (item: HTMLBqOptionElement) => {\n    // Set has O(1) complexity for insertion, deletion, and search operations, compared to an Array's O(n)\n    const selectedOptionsSet = new Set(this.selectedOptions);\n\n    if (selectedOptionsSet.has(item)) {\n      selectedOptionsSet.delete(item);\n    } else {\n      selectedOptionsSet.add(item);\n    }\n\n    this.selectedOptions = Array.from(selectedOptionsSet);\n    this.value = this.selectedOptions.map((item) => item.value);\n  };\n\n  private handleSearchFilter = (ev: Event) => {\n    if (this.disabled) return;\n\n    this.debounceQuery?.cancel();\n\n    const query = (ev.target as HTMLInputElement).value?.toLowerCase().trim();\n\n    if (!isDefined(query)) {\n      this.clear();\n    } else {\n      this.debounceQuery = debounce(() => {\n        this.options.forEach((item: HTMLBqOptionElement) => {\n          const itemLabel = this.getOptionLabel(item).toLowerCase();\n          item.hidden = !itemLabel.includes(query);\n        });\n      }, this.debounceTime);\n\n      this.debounceQuery();\n    }\n\n    // The panel will close once a selection is made\n    // so we need to make sure it's open when the user is typing and the query is not empty\n    this.open = true;\n  };\n\n  private handleClearClick = (ev: CustomEvent) => {\n    (async () => {\n      await this.clear();\n    })();\n    this.inputElem.focus();\n\n    ev.stopPropagation();\n  };\n\n  private handleTagRemove = (item: HTMLBqOptionElement) => {\n    if (this.disabled) return;\n\n    this.handleMultipleSelection(item);\n    this.bqSelect.emit({ value: this.value, item });\n  };\n\n  private handleLabelSlotChange = () => {\n    this.hasLabel = hasSlotContent(this.labelElem);\n  };\n\n  private handlePrefixSlotChange = () => {\n    this.hasPrefix = hasSlotContent(this.prefixElem);\n  };\n\n  private handleSuffixSlotChange = () => {\n    this.hasSuffix = hasSlotContent(this.suffixElem);\n  };\n\n  private handleHelperTextSlotChange = () => {\n    this.hasHelperText = hasSlotContent(this.helperTextElem);\n  };\n\n  private resetOptionsVisibility = () => {\n    this.options.forEach((item: HTMLBqOptionElement) => (item.hidden = false));\n  };\n\n  private syncItemsFromValue = () => {\n    const { internals, options, value } = this;\n    if (!options.length) return;\n\n    // Sync selected state of the BqOption elements\n    this.syncSelectedOptionsState();\n\n    if (this.multiple) {\n      // Sync selected options for multiple selection mode\n      this.selectedOptions = options.filter((option) => this.value?.includes(option.value));\n    } else {\n      // Sync display label for single selection mode\n      this.updateDisplayLabel();\n    }\n\n    internals.setFormValue(!isNil(value) ? `${value}` : undefined);\n  };\n\n  /**\n   * Syncs the selected state of the BqOption elements which value is included in the `value` property.\n   * Notice that value can be a string or an array of strings.\n   *\n   * @private\n   * @memberof BqSelect\n   */\n  private syncSelectedOptionsState = () => {\n    const { options, multiple, value } = this;\n    const lowerCaseValue = String(value).toLowerCase();\n\n    options.forEach((option: HTMLBqOptionElement) => {\n      if (multiple && Array.isArray(value)) {\n        option.selected = value.includes(option.value);\n      } else {\n        option.selected = option.value.toLowerCase() === lowerCaseValue;\n      }\n    });\n  };\n\n  /**\n   * Updates the display value of the input element based on the selected option.\n   *\n   * @private\n   * @memberof BqSelect\n   */\n  private updateDisplayLabel = () => {\n    const { value, options, inputElem } = this;\n\n    const checkedItem = options.find((item) => item.value === value);\n    const displayValue = checkedItem ? this.getOptionLabel(checkedItem) : '';\n\n    inputElem.value = displayValue;\n    this.displayValue = displayValue;\n  };\n\n  private getOptionLabel = (item: HTMLBqOptionElement) => {\n    if (!item) return;\n    return item.innerText.trim() ?? '';\n  };\n\n  private get options() {\n    return Array.from(this.el.querySelectorAll('bq-option'));\n  }\n\n  private get displayPlaceholder() {\n    // Hide the placeholder when multiple selection is enabled and there are selected items\n    return this.multiple && this.selectedOptions.length !== 0 ? undefined : this.placeholder;\n  }\n\n  private get displayTags() {\n    return this.selectedOptions.map((item, index) => {\n      if (index < this.maxTagsVisible || this.maxTagsVisible < 0) {\n        return (\n          <bq-tag\n            key={item.value}\n            removable\n            size=\"xsmall\"\n            variant=\"filled\"\n            onBqClose={(event) => {\n              // NOTE: prevents triggering bqClose on parent\n              event.stopPropagation();\n              this.handleTagRemove(item);\n            }}\n            // Prevent the tag from closing the panel when clicked\n            onClick={(ev: MouseEvent) => ev.stopPropagation()}\n            exportparts=\"wrapper:tag__base,prefix:tag__prefix,text:tag__text,btn-close:tag__btn-close\"\n            part=\"tag\"\n          >\n            {this.getOptionLabel(item)}\n          </bq-tag>\n        );\n      } else if (index === this.maxTagsVisible) {\n        return (\n          <bq-tag\n            key=\"more\"\n            size=\"xsmall\"\n            variant=\"filled\"\n            exportparts=\"wrapper:tag__base,prefix:tag__prefix,text:tag__text,btn-close:tag__btn-close\"\n            part=\"tag\"\n          >\n            +{this.selectedOptions.length - index}\n          </bq-tag>\n        );\n      }\n\n      return null;\n    });\n  }\n\n  private get hasClearIcon() {\n    if (this.disableClear || this.disabled) {\n      return false;\n    }\n\n    if (this.multiple) {\n      return this.selectedOptions.length > 0;\n    }\n\n    return isDefined(this.displayValue);\n  }\n\n  // render() function\n  // Always the last one in the class.\n  // ===================================\n\n  render() {\n    const labelId = `bq-select__label-${this.name || this.fallbackInputId}`;\n\n    return (\n      <div class=\"bq-select\" part=\"base\">\n        {/* Label */}\n        <label\n          id={labelId}\n          class={{ 'bq-select__label': true, '!hidden': !this.hasLabel }}\n          aria-label={this.name || this.fallbackInputId}\n          htmlFor={this.name || this.fallbackInputId}\n          ref={(labelElem: HTMLSpanElement) => (this.labelElem = labelElem)}\n          part=\"label\"\n        >\n          <slot name=\"label\" onSlotchange={this.handleLabelSlotChange} />\n        </label>\n        {/* Select dropdown */}\n        <bq-dropdown\n          class=\"bq-select__dropdown w-full\"\n          disabled={this.disabled}\n          distance={this.distance}\n          keepOpenOnSelect={this.keepOpenOnSelect}\n          open={this.open}\n          panelHeight={this.panelHeight}\n          placement={this.placement}\n          sameWidth={this.sameWidth}\n          skidding={this.skidding}\n          strategy={this.strategy}\n          exportparts=\"panel\"\n        >\n          {/* Input control group */}\n          <div\n            class={{\n              'bq-select__control': true,\n              [`validation-${this.validationStatus}`]: true,\n              disabled: this.disabled,\n            }}\n            part=\"control\"\n            slot=\"trigger\"\n          >\n            {/* Prefix */}\n            <span\n              class={{ 'bq-select__control--prefix': true, '!hidden': !this.hasPrefix }}\n              ref={(spanElem: HTMLSpanElement) => (this.prefixElem = spanElem)}\n              part=\"prefix\"\n            >\n              <slot name=\"prefix\" onSlotchange={this.handlePrefixSlotChange} />\n            </span>\n            <div class=\"flex flex-1 overflow-x-auto\" part=\"input-outline\">\n              {/* Display selected values using BqTags for multiple selection */}\n              {this.multiple && (\n                <span class=\"bq-select__tags\" part=\"tags\">\n                  <slot name=\"tags\">{this.displayTags}</slot>\n                </span>\n              )}\n              {/* HTML Input */}\n              <input\n                id={this.name || this.fallbackInputId}\n                class=\"bq-select__control--input flex-grow is-full\"\n                autoComplete=\"off\"\n                autoCapitalize=\"off\"\n                aria-disabled={this.disabled ? 'true' : 'false'}\n                aria-controls={`bq-options-${this.name}`}\n                aria-expanded={this.open ? 'true' : 'false'}\n                aria-haspopup=\"listbox\"\n                disabled={this.disabled}\n                form={this.form}\n                name={this.name}\n                placeholder={this.displayPlaceholder}\n                ref={(inputElem: HTMLInputElement) => (this.inputElem = inputElem)}\n                readOnly={this.readonly}\n                required={this.required}\n                role=\"combobox\"\n                spellcheck={false}\n                type=\"text\"\n                value={this.displayValue}\n                part=\"input\"\n                // Events\n                onBlur={this.handleBlur}\n                onFocus={this.handleFocus}\n                onInput={this.handleSearchFilter}\n              />\n            </div>\n            {/* Clear Button */}\n            {this.hasClearIcon && (\n              // The clear button will be visible as long as the input has a value\n              // and the parent group is hovered or has focus-within\n              <bq-button\n                class=\"bq-select__control--clear ms-[--bq-select--gap]\"\n                appearance=\"text\"\n                aria-label={this.clearButtonLabel}\n                size=\"small\"\n                onBqClick={this.handleClearClick}\n                part=\"clear-btn\"\n                exportparts=\"button\"\n                tabIndex={-1}\n              >\n                <slot name=\"clear-icon\">\n                  <bq-icon name=\"x-circle\" class=\"flex\" />\n                </slot>\n              </bq-button>\n            )}\n            {/* Suffix */}\n            <span\n              class={{ 'bq-select__control--suffix': true, 'rotate-180': this.open, 'rotate-0': !this.open }}\n              ref={(spanElem: HTMLSpanElement) => (this.suffixElem = spanElem)}\n              part=\"suffix\"\n            >\n              <slot name=\"suffix\" onSlotchange={this.handleSuffixSlotChange}>\n                <bq-icon name=\"caret-down\" class=\"flex\" />\n              </slot>\n            </span>\n          </div>\n          <bq-option-list\n            id={`bq-options-${this.name}`}\n            onBqSelect={this.handleSelect}\n            aria-expanded={this.open ? 'true' : 'false'}\n            exportparts=\"base:option-list\"\n            role=\"listbox\"\n          >\n            <slot />\n          </bq-option-list>\n        </bq-dropdown>\n        {/* Helper text */}\n        <div\n          class={{\n            [`bq-select__helper-text validation-${this.validationStatus}`]: true,\n            '!hidden': !this.hasHelperText,\n          }}\n          ref={(divElem: HTMLDivElement) => (this.helperTextElem = divElem)}\n          part=\"helper-text\"\n        >\n          <slot name=\"helper-text\" onSlotchange={this.handleHelperTextSlotChange} />\n        </div>\n      </div>\n    );\n  }\n}\n"],"version":3}