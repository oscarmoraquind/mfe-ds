{"version":3,"names":["getRandomFromArray","arr","n","length","result","Array","taken","RangeError","x","Date","now","isEmpty","value","isNil","isDefined","size","Object","values"],"sources":["../../packages/beeq/src/shared/utils/getRandom.ts","../../packages/beeq/src/shared/utils/isEmpty.ts"],"sourcesContent":["/**\n * Get a number of randoms items from Array\n *\n * @param {Array} arr - The array where to look\n * @param {Number} n - The number of random items to take\n * @returns {Array} An array with the number of random items specified\n */\nexport const getRandomFromArray = <T>(arr: T[], n: number): T[] => {\n  let length = arr.length;\n  const result = new Array(n);\n  const taken = new Array(length);\n\n  if (n > length) throw new RangeError('getRandom: more elements taken than available');\n\n  while (n--) {\n    const x = Date.now() % length;\n    result[n] = arr[x in taken ? taken[x] : x];\n    taken[x] = --length in taken ? taken[length] : length;\n  }\n  return result;\n};\n","import { isDefined, isNil } from '.';\n\ntype TCollection = Map<unknown, unknown> | Array<unknown> | Record<string, unknown> | Set<unknown> | null | undefined;\n\n/**\n * Check if the value is an empty array, object, set, map\n * @param value the value to be checked\n * @returns {boolean} true if value is empty\n */\nexport const isEmpty = <T extends TCollection>(value: T): boolean => {\n  if (isNil(value)) {\n    return true;\n  } else if ('size' in value) {\n    return !isDefined(value.size);\n  } else {\n    return !isDefined(Object.values(value).length);\n  }\n};\n"],"mappings":";;;;03BAOaA,EAAqB,CAAIC,EAAUC,KAC9C,IAAIC,EAASF,EAAIE,OACjB,MAAMC,EAAS,IAAIC,MAAMH,GACzB,MAAMI,EAAQ,IAAID,MAAMF,GAExB,GAAID,EAAIC,EAAQ,MAAM,IAAII,WAAW,iDAErC,MAAOL,IAAK,CACV,MAAMM,EAAIC,KAAKC,MAAQP,EACvBC,EAAOF,GAAKD,EAAIO,KAAKF,EAAQA,EAAME,GAAKA,GACxCF,EAAME,KAAOL,KAAUG,EAAQA,EAAMH,GAAUA,C,CAEjD,OAAOC,CAAM,E,MCVFO,EAAkCC,IAC7C,GAAIC,EAAMD,GAAQ,CAChB,OAAO,I,MACF,GAAI,SAAUA,EAAO,CAC1B,OAAQE,EAAUF,EAAMG,K,KACnB,CACL,OAAQD,EAAUE,OAAOC,OAAOL,GAAOT,O","ignoreList":[]}