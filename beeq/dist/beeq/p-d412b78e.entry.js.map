{"version":3,"names":["requests","Map","iconContent","fetchSvg","async","url","sanitize","isNil","fetch","window","has","get","response","ok","set","svgContent","text","validateContent","error","console","getSvgContent","req","svgTag","iconCssClass","div","document","createElement","innerHTML","svgElm","querySelector","existingClasses","getAttribute","setAttribute","trim","removeAttribute","isValid","elm","nodeType","Node","ELEMENT_NODE","nodeName","toLowerCase","attribute","Array","from","attributes","isString","value","startsWith","childNode","children","bqIconCss","BqIconStyle0","BqIcon","_svgContent","label","color","name","size","src","weight","undefined","handlePropsChange","this","loadIcon","handleWeightChange","includes","warn","REGULAR","isWeightedIcon","weightSuffix","iconName","svgLoaded","connectedCallback","setupIconComponent","componentWillLoad","getIconSource","SVG_EXTENSION","iconFileName","getBasePath","then","emit","render","styles","getColorCSSVariable","h","Host","key","style","class","part","role"],"sources":["../../packages/beeq/src/components/icon/helper/request.ts","../../packages/beeq/src/components/icon/scss/bq-icon.scss?tag=bq-icon&encapsulation=shadow","../../packages/beeq/src/components/icon/bq-icon.tsx"],"sourcesContent":["/* -------------------------------------------------------------------------- */\n/*                             Icon request helper                            */\n/* -------------------------------------------------------------------------- */\n\nimport { isNil, isString } from '../../../shared/utils';\n\nconst requests = new Map<string, Promise<unknown>>();\nexport const iconContent = new Map<string, string>();\n\n/**\n * Fetches SVG content from a given URL and optionally sanitizes it.\n * @param {string} url - The URL to fetch the SVG from.\n * @param {boolean} sanitize - Whether to sanitize the SVG content.\n * @returns {Promise<unknown>} - A promise that resolves to the SVG content.\n */\nconst fetchSvg = async (url: string, sanitize: boolean): Promise<unknown> => {\n  if (isNil(url) || typeof fetch === 'undefined' || typeof window === 'undefined') {\n    return;\n  }\n\n  if (requests.has(url)) return requests.get(url);\n\n  try {\n    const response = await fetch(url);\n\n    if (!response.ok) {\n      iconContent.set(url, '');\n      return;\n    }\n\n    let svgContent = await response.text();\n\n    if (sanitize !== false) {\n      svgContent = validateContent(svgContent);\n    }\n\n    iconContent.set(url, svgContent);\n    return svgContent;\n  } catch (error) {\n    console.error(`[BqIcon] Failed to fetch SVG from ${url}:`, error);\n    iconContent.set(url, '');\n  }\n};\n\n/**\n * Retrieves the SVG content for a given URL, fetching and caching it if necessary.\n * @param {string} url - The URL to fetch the SVG from.\n * @param {boolean} sanitize - Whether to sanitize the SVG content.\n * @returns {Promise<unknown>} - A promise that resolves to the SVG content.\n */\nexport const getSvgContent = async (url: string, sanitize: boolean): Promise<unknown> => {\n  if (isNil(url)) return;\n\n  let req = requests.get(url);\n\n  if (isNil(req)) {\n    req = fetchSvg(url, sanitize);\n    requests.set(url, req);\n  }\n  return req;\n};\n\n/**\n * Validates and sanitizes the SVG content.\n * @param {string} svgContent - The SVG content to validate.\n * @returns {string} - The sanitized SVG content.\n */\nexport const validateContent = (svgContent: string): string => {\n  if (typeof window === 'undefined' || isNil(svgContent)) return '';\n\n  const svgTag = 'svg';\n  const iconCssClass = 'bq-icon__svg';\n  const div = document.createElement('div');\n  div.innerHTML = svgContent;\n\n  const svgElm = div.querySelector(svgTag);\n\n  if (svgElm) {\n    const existingClasses = svgElm.getAttribute('class') || '';\n    svgElm.setAttribute('class', `${existingClasses} ${iconCssClass}`.trim());\n    svgElm.setAttribute('part', svgTag);\n    svgElm.removeAttribute('height');\n    svgElm.removeAttribute('width');\n\n    if (isValid(svgElm)) {\n      return div.innerHTML;\n    }\n  }\n\n  return '';\n};\n\n/**\n * Checks if an HTML element is valid (i.e., does not contain scripts or event handlers).\n * @param {HTMLElement} elm - The element to check.\n * @returns {boolean} - True if the element is valid, false otherwise.\n */\nexport const isValid = (elm: Element): boolean => {\n  if (!elm) return false;\n  if (elm.nodeType !== Node.ELEMENT_NODE) return false;\n  if (elm.nodeName.toLowerCase() === 'script') return false;\n\n  for (const attribute of Array.from(elm.attributes)) {\n    if (isString(attribute.value) && attribute.value.toLowerCase().startsWith('on')) {\n      return false;\n    }\n  }\n\n  for (const childNode of Array.from(elm.children) as HTMLElement[]) {\n    if (!isValid(childNode)) return false;\n  }\n\n  return true;\n};\n","/* -------------------------------------------------------------------------- */\n/*                                 Icon styles                                */\n/* -------------------------------------------------------------------------- */\n\n@import './bq-icon.variables';\n\n:host {\n  @apply inline-block;\n}\n\n/**\n * This class is added on packages/beeq/src/components/icon/helper/request.ts\n * See lines 42 and 58 for details.\n */\n.bq-icon__svg {\n  @apply scale-x-[--bq-icon--direction];\n}\n","import { Component, Event, EventEmitter, h, Host, Prop, State, Watch } from '@stencil/core';\n\nimport { TIconWeight } from './bq-icon.types';\nimport { getSvgContent, iconContent } from './helper/request';\nimport { getBasePath, getColorCSSVariable, isNil } from '../../shared/utils';\n\n/**\n * The Icon component is an image that provides a visual representation of an object, action, or concept displayed on the screen.\n * It is a small graphical element that is used to enhance the user interface and improve user experience.\n *\n * @example How to use it\n * ```html\n * <bq-icon color=\"text--brand\" name=\"bell-ringing\" size=\"24\"></bq-icon>\n * ```\n *\n * @documentation https://www.beeq.design/3d466e231/p/675fad-icon\n * @status stable\n *\n * @attr {string} color - Set the stroke color of the SVG. The value should be a valid value of the palette color.\n * @attr {string} label - Label for the icon, used for accessibility.\n * @attr {string} name - Icon name to load. Please check all available icons [here](https://phosphoricons.com/).\n * @attr {string | number} size - Set the size of the SVG.\n * @attr {string} src - Set the source of the SVG. If the source is set, the name property will be ignored.\n *\n * @event svgLoaded - Callback handler to be called when the SVG has loaded.\n *\n * @part base - The component's internal wrapper that holds the icon SVG content.\n * @part svg - The `<svg>` tag element inside the component.\n *\n * @cssprop --bq-icon--color - The stroke color of the SVG.\n * @cssprop --bq-icon--size - The size of the SVG.\n */\n@Component({\n  assetsDirs: ['svg'],\n  tag: 'bq-icon',\n  styleUrl: './scss/bq-icon.scss',\n  shadow: true,\n})\nexport class BqIcon {\n  // Own Properties\n  // ====================\n\n  // Reference to host HTML element\n  // ===================================\n\n  // State() variables\n  // Inlined decorator, alphabetical order\n  // =======================================\n\n  @State() private _svgContent: string;\n\n  // Public Property API\n  // ========================\n\n  /** Label for the icon, used for accessibility */\n  @Prop({ reflect: true }) label?: string;\n\n  /** Set the stroke color of the SVG. The value should be a valid value of the palette color */\n  @Prop({ reflect: true }) color?: string;\n\n  /** Icon name to load. Please check all available icons [here](https://phosphoricons.com/) */\n  @Prop({ reflect: true }) name?: string;\n\n  /** Set the size of the SVG */\n  @Prop({ reflect: true }) size?: string | number = 24;\n\n  /** Set the source of the SVG. If the source is set, the name property will be ignored */\n  @Prop({ reflect: true }) src?: string;\n\n  /** @deprecated It set the icon weight/style */\n  @Prop({ reflect: true }) weight?: TIconWeight = undefined;\n\n  // Prop lifecycle events\n  // =======================\n\n  @Watch('color')\n  @Watch('name')\n  @Watch('size')\n  handlePropsChange() {\n    this.loadIcon(this.name);\n  }\n\n  /**\n   * !TO BE REMOVED: Delete this `@Watch()` once the deprecated `weight` property is removed\n   * We need to maintain retro-compatibility until the next major release\n   */\n  @Watch('weight')\n  handleWeightChange() {\n    if (this.name.includes(this.weight)) return;\n\n    console.warn(\n      `❗️ [bq-icon]: the 'weight' property is deprecated, you should add the weight to the icon name.\\n\n       For example, '<bq-icon name=\"bell-fill\"></bq-icon>' instead of '<bq-icon name=\"bell\" weight=\"fill\"></bq-icon>'`,\n    );\n    // Check if the icon is weighted. An icon is considered weighted if its weight is not 'regular' and ENV_SVG_PATH is not set.\n    // Eg: if the weight is 'bold' and ENV_SVG_PATH is not set, isWeightedIcon will be true.\n    const REGULAR = 'regular';\n    const isWeightedIcon = !isNil(this.weight) && this.weight !== REGULAR;\n    // If the icon is weighted, append the weight to the icon name. Otherwise, append nothing.\n    // Eg: if isWeightedIcon is true and the weight is 'bold', weightSuffix will be '-bold'.\n    const weightSuffix = isWeightedIcon ? `-${this.weight}` : '';\n    // Construct the icon name by appending the weight suffix (if any) and the file extension.\n    // Eg: if the name is 'my-icon' and weightSuffix is '-bold', iconName will be 'my-icon-bold.svg'.\n    const iconName = `${this.name}${weightSuffix}`;\n    this.loadIcon(iconName);\n  }\n\n  // Events section\n  // Requires JSDocs for public API documentation\n  // ==============================================\n\n  /** Callback handler to be called when the SVG has loaded */\n  @Event() svgLoaded: EventEmitter;\n\n  // Component lifecycle events\n  // Ordered by their natural call order\n  // =====================================\n\n  connectedCallback() {\n    this.setupIconComponent();\n  }\n\n  componentWillLoad() {\n    this.setupIconComponent();\n  }\n\n  // Listeners\n  // ==============\n\n  // Public methods API\n  // These methods are exposed on the host element.\n  // Always use two lines.\n  // Public Methods must be async.\n  // Requires JSDocs for public API documentation.\n  // ===============================================\n\n  // Local methods\n  // Internal business logic.\n  // These methods cannot be called from the host element.\n  // =======================================================\n\n  private setupIconComponent = () => {\n    this.loadIcon(this.name);\n    // !TO BE REMOVED: Delete this once the deprecated `weight` property is removed\n    if (!isNil(this.weight)) this.handleWeightChange();\n  };\n\n  private getIconSource = (name: string) => {\n    if (!this.name && !this.src) return;\n    // Return the src if it is set\n    if (this.src) return this.src;\n\n    const SVG_EXTENSION = '.svg';\n    const iconFileName = `${name}${SVG_EXTENSION}`;\n\n    return getBasePath(iconFileName);\n  };\n\n  private loadIcon = (name: string) => {\n    const url = this.getIconSource(name);\n    getSvgContent(url, true).then(() => {\n      this._svgContent = iconContent.get(url);\n      this.svgLoaded.emit(this._svgContent);\n    });\n  };\n\n  // render() function\n  // Always the last one in the class.\n  // ===================================\n\n  render() {\n    const styles = {\n      ...(this.color && { '--bq-icon--color': getColorCSSVariable(this.color) }),\n      ...(this.size && { '--bq-icon--size': `${this.size}px` }),\n    };\n\n    return (\n      <Host style={styles}>\n        <div\n          aria-label={this.label ?? `${this.name} icon`}\n          class={`flex text-[color:--bq-icon--color] ${(this.size && 'bs-[--bq-icon--size] is-[--bq-icon--size]') || ''}`}\n          innerHTML={this._svgContent}\n          part=\"base\"\n          role=\"img\"\n        />\n      </Host>\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]}