{"version":3,"names":["SPINNER_TEXT_POSITION","SPINNER_SIZE","bqSpinnerCss","BqSpinnerStyle0","BqSpinner","iconSlotElem","slotElem","observer","MutationObserver","mutations","mutation","this","slotContentLength","target","textContent","length","hasIconSlot","hasSlot","animation","textPosition","size","handleTextPositionProp","validatePropValue","el","handleSizeProp","setIconSize","handleHasIconSlot","componentWillLoad","checkPropValues","componentDidLoad","disconnectedCallback","disconnect","handleSlotChange","hasSlotContent","slot","querySelector","isNil","getTextContent","recurse","nodes","assignedNodes","flatten","forEach","node","observe","characterData","childList","subtree","handleIconSlotChange","isTextDisplayed","bqIcon","parseInt","getCSSVariableValue","toString","assignedElements","filter","isHTMLElement","render","h","key","class","part","role","fill","viewBox","d","opacity","flex","ref","spanElem","name","onSlotchange"],"sources":["../../packages/beeq/src/components/spinner/bq-spinner.types.ts","../../packages/beeq/src/components/spinner/scss/bq-spinner.scss?tag=bq-spinner&encapsulation=shadow","../../packages/beeq/src/components/spinner/bq-spinner.tsx"],"sourcesContent":["export const SPINNER_TEXT_POSITION = ['none', 'left', 'right', 'above', 'bellow'] as const;\nexport const SPINNER_SIZE = ['small', 'medium', 'large'] as const;\nexport type TSpinnerTextPosition = (typeof SPINNER_TEXT_POSITION)[number];\nexport type TSpinnerSize = (typeof SPINNER_SIZE)[number];\n","/* -------------------------------------------------------------------------- */\n/*                               Spinner styles                               */\n/* -------------------------------------------------------------------------- */\n@import './bq-spinner.variables';\n\n:host {\n  @apply relative inline-block;\n}\n\n.bq-spinner {\n  @apply flex;\n}\n\n/* -------------------------------------------------------------------------- */\n/*                             Spinner loader size                            */\n/* -------------------------------------------------------------------------- */\n\n.bq-spinner--loader.large {\n  @apply bs-[--bq-spinner--size-large] is-[--bq-spinner--size-large];\n}\n\n.bq-spinner--loader.medium {\n  @apply bs-[--bq-spinner--size-medium] is-[--bq-spinner--size-medium];\n}\n\n.bq-spinner--loader.small {\n  @apply bs-[--bq-spinner--size-small] is-[--bq-spinner--size-small];\n}\n\n/* -------------------------------------------------------------------------- */\n/*                                Text position                               */\n/* -------------------------------------------------------------------------- */\n\n.text-left,\n.text-right {\n  @apply flex-row items-center;\n\n  &.has-text {\n    @apply gap-x-m;\n  }\n}\n\n.text-left {\n  .bq-spinner--loader,\n  .bq-spinner--icon {\n    @apply order-2;\n  }\n\n  .bq-spinner--text {\n    @apply order-1;\n  }\n}\n\n.text-right {\n  .bq-spinner--loader,\n  .bq-spinner--icon {\n    @apply order-1;\n  }\n\n  .bq-spinner--text {\n    @apply order-2;\n  }\n}\n\n.text-above,\n.text-bellow {\n  @apply flex-col items-center;\n\n  &.has-text {\n    @apply gap-y-m;\n  }\n}\n\n.text-above {\n  .bq-spinner--loader,\n  .bq-spinner--icon {\n    @apply order-2;\n  }\n\n  .bq-spinner--text {\n    @apply order-1;\n  }\n}\n\n.text-bellow {\n  .bq-spinner--loader,\n  .bq-spinner--icon {\n    @apply order-1;\n  }\n\n  .bq-spinner--text {\n    @apply order-2;\n  }\n}\n\n/* -------------------------------------------------------------------------- */\n/*                      Animate slotted icon if provided                      */\n/* -------------------------------------------------------------------------- */\n\n.is-animated {\n  .bq-spinner--icon,\n  .bq-spinner--loader > svg {\n    @include animation-spin;\n  }\n}\n","import { Component, Element, h, Prop, State, Watch } from '@stencil/core';\n\nimport { SPINNER_SIZE, SPINNER_TEXT_POSITION, TSpinnerSize, TSpinnerTextPosition } from './bq-spinner.types';\nimport {\n  getCSSVariableValue,\n  getTextContent,\n  hasSlotContent,\n  isHTMLElement,\n  isNil,\n  validatePropValue,\n} from '../../shared/utils';\n\n/**\n * Spinners are designed for users to display data loading.\n *\n * @example How to use it\n * ```html\n * <bq-spinner size=\"medium\" text-position=\"bellow\">\n *   <span>Loading...</span>\n * </bq-spinner>\n * ```\n *\n * @documentation https://www.beeq.design/3d466e231/p/275f10-spinner/b/09d7b1\n * @status stable\n *\n * @attr {boolean} animation - IfÂ `false`, the animation on the icon element will be stopped.\n * @attr {\"small\" | \"medium\" | \"large\"} size - It defines the size of the icon element displayed.\n * @attr {\"above\" | \"below\" | \"left\" | \"right\" | \"none\"} text-position - It defines the position of the label text.\n *\n * @slot icon - The icon slot container.\n * @slot - The content of the spinner component.\n *\n * @part base - The div wrapper container used under the hood.\n * @part icon - The `<svg>` icon element used to spin/animate.\n * @part custom-icon - The `<span>` tag element that holds the custom icon element passed.\n * @part text - The `<span>` tag element that renders the label text inside the component.\n *\n * @cssprop --bq-spinner--color - Spinner color\n * @cssprop --bq-spinner--size-large - Spinner large size\n * @cssprop --bq-spinner--size-medium - Spinner medium size\n * @cssprop --bq-spinner--size-small - Spinner small size\n * @cssprop --bq-spinner--large-text-fontSize - Spinner large text font size\n * @cssprop --bq-spinner--medium-text-fontSize - Spinner medium text font size\n * @cssprop --bq-spinner--small-text-fontSize - Spinner small text font size\n * @cssprop --bq-spinner--text-lineHeight - Spinner text line height\n */\n@Component({\n  tag: 'bq-spinner',\n  styleUrl: './scss/bq-spinner.scss',\n  shadow: true,\n})\nexport class BqSpinner {\n  // Own Properties\n  // ====================\n\n  private iconSlotElem: HTMLElement;\n  private slotElem: HTMLElement;\n  private observer: MutationObserver = new MutationObserver((mutations) => {\n    const [mutation] = mutations;\n    this.slotContentLength = mutation.target.textContent.length;\n  });\n\n  // Reference to host HTML element\n  // ===================================\n\n  @Element() el!: HTMLBqSpinnerElement;\n\n  // State() variables\n  // Inlined decorator, alphabetical order\n  // =======================================\n\n  @State() private hasIconSlot = false;\n  @State() private hasSlot = false;\n  @State() private slotContentLength = 0;\n\n  // Public Property API\n  // ========================\n\n  /** If `false`, the animation on the icon element will be stopped */\n  @Prop({ reflect: true }) animation? = true;\n\n  /** It defines the position of the label text */\n  @Prop({ reflect: true }) textPosition: TSpinnerTextPosition = 'none';\n\n  /** It defines the size of the icon element displayed */\n  @Prop({ reflect: true }) size: TSpinnerSize = 'medium';\n\n  // Prop lifecycle events\n  // =======================\n\n  @Watch('textPosition')\n  handleTextPositionProp() {\n    validatePropValue(SPINNER_TEXT_POSITION, 'none', this.el, 'textPosition');\n  }\n\n  @Watch('size')\n  handleSizeProp() {\n    validatePropValue(SPINNER_SIZE, 'medium', this.el, 'size');\n    this.setIconSize();\n  }\n\n  @Watch('hasIconSlot')\n  handleHasIconSlot() {\n    this.setIconSize();\n  }\n\n  // Events section\n  // Requires JSDocs for public API documentation\n  // ==============================================\n\n  // Component lifecycle events\n  // Ordered by their natural call order\n  // =====================================\n\n  componentWillLoad() {\n    this.checkPropValues();\n  }\n\n  componentDidLoad() {\n    this.setIconSize();\n  }\n\n  disconnectedCallback() {\n    this.observer?.disconnect();\n  }\n\n  // Listeners\n  // ==============\n\n  // Public methods API\n  // These methods are exposed on the host element.\n  // Always use two lines.\n  // Public Methods must be async.\n  // Requires JSDocs for public API documentation.\n  // ===============================================\n\n  // Local methods\n  // Internal business logic.\n  // These methods cannot be called from the host element.\n  // =======================================================\n\n  private handleSlotChange = () => {\n    if (!this.slotElem) return;\n\n    this.hasSlot = hasSlotContent(this.slotElem);\n    if (!this.hasSlot) return;\n\n    const slot = this.slotElem.querySelector('slot') ?? null;\n    if (isNil(slot)) return;\n\n    this.slotContentLength = getTextContent(slot, { recurse: true }).length;\n    const nodes = slot.assignedNodes({ flatten: true });\n    nodes.forEach((node) => {\n      this.observer.observe(node, {\n        characterData: true,\n        childList: true,\n        subtree: true,\n      });\n    });\n  };\n\n  private handleIconSlotChange = (): void => {\n    this.hasIconSlot = hasSlotContent(this.iconSlotElem, 'icon');\n  };\n\n  private checkPropValues = (): void => {\n    validatePropValue(SPINNER_TEXT_POSITION, 'none', this.el, 'textPosition');\n    validatePropValue(SPINNER_SIZE, 'medium', this.el, 'size');\n  };\n\n  private get isTextDisplayed(): boolean {\n    return this.textPosition !== 'none';\n  }\n\n  private setIconSize(): void {\n    if (!this.hasIconSlot || !this.bqIcon) return;\n\n    this.bqIcon.size = parseInt(getCSSVariableValue(`bq-spinner--size-${this.size}`, this.el)).toString();\n  }\n\n  private get bqIcon(): HTMLBqIconElement | null {\n    if (!this.hasIconSlot) return null;\n\n    const slot = this.iconSlotElem.querySelector('slot');\n\n    return [...slot.assignedElements({ flatten: true })].filter((el: Element) =>\n      isHTMLElement(el, 'bq-icon'),\n    )[0] as HTMLBqIconElement;\n  }\n\n  // render() function\n  // Always the last one in the class.\n  // ===================================\n\n  render() {\n    return (\n      <div\n        class={{\n          [`bq-spinner ${this.size} text-${this.textPosition}`]: true,\n          'is-animated': this.animation,\n          'has-text': !!this.slotContentLength,\n        }}\n        part=\"base\"\n      >\n        {!this.hasIconSlot && (\n          <div\n            class={`bq-spinner--loader ${this.size} relative text-[--bq-spinner--color]`}\n            aria-label=\"Loading...\"\n            role=\"status\"\n          >\n            <svg class=\"bs-full is-full\" fill=\"currentColor\" viewBox=\"0 0 48 48\">\n              <path\n                fill=\"currentColor\"\n                d=\"M10.27 7.637c-.937-1.117-.798-2.796.415-3.605a24 24 0 0 1 37.09 23.249c-.2 1.444-1.65 2.301-3.064 1.944-1.414-.356-2.25-1.793-2.096-3.242A18.72 18.72 0 0 0 14.102 8.11c-1.237.77-2.895.643-3.832-.474Z\"\n              />\n              <path\n                fill=\"currentColor\"\n                d=\"M48 24c0 13.255-10.745 24-24 24S0 37.255 0 24 10.745 0 24 0s24 10.745 24 24ZM5.28 24c0 10.339 8.381 18.72 18.72 18.72 10.339 0 18.72-8.381 18.72-18.72 0-10.339-8.381-18.72-18.72-18.72C13.661 5.28 5.28 13.661 5.28 24Z\"\n                opacity=\".1\"\n              />\n            </svg>\n          </div>\n        )}\n        <span\n          class={{\n            'bq-spinner--icon': true,\n            flex: this.hasIconSlot,\n            '!hidden': !this.hasIconSlot,\n          }}\n          ref={(spanElem) => (this.iconSlotElem = spanElem)}\n          part=\"custom-icon\"\n        >\n          <slot name=\"icon\" onSlotchange={this.handleIconSlotChange} />\n        </span>\n        <span\n          class={{\n            'bq-spinner--text font-medium leading-regular text-primary': true,\n            '!hidden': !this.isTextDisplayed,\n          }}\n          part=\"text\"\n          ref={(spanElem) => (this.slotElem = spanElem)}\n        >\n          <slot onSlotchange={this.handleSlotChange} />\n        </span>\n      </div>\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]}