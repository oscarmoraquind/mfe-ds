{"version":3,"names":["RADIO_GROUP_ORIENTATION","bqRadioGroupCss","BqRadioGroupStyle0","BqRadioGroup","focusedBqRadio","debouncedBqChange","internals","backgroundOnHover","debounceTime","disabled","fieldset","name","orientation","required","requiredValidationMessage","value","handleGroupProperties","this","bqRadioElements","forEach","bqRadio","checked","isNil","checkPropValues","validatePropValue","el","checkDebounceChange","Math","max","cancel","debounce","event","bqChange","emit","handleRequiredChange","updateFormValidity","componentWillLoad","setFormValue","componentDidLoad","formAssociatedCallback","formResetCallback","onMouseDown","isHTMLElement","target","contains","onBqClick","detail","bqRadioElement","setCheckedRadioItem","onBqKeyDown","key","focusRadioInputSibling","onBqFocus","stopPropagation","onBqBlur","currentTarget","next","index","elements","getNextRadioElement","vFocus","forward","element","elementIndex","length","async","states","clear","add","setValidity","valueMissing","getNativeInput","Array","from","querySelectorAll","render","h","class","role","part","id"],"sources":["../../packages/beeq/src/components/radio-group/bq-radio-group.types.ts","../../packages/beeq/src/components/radio-group/scss/bq-radio-group.scss?tag=bq-radio-group&encapsulation=shadow","../../packages/beeq/src/components/radio-group/bq-radio-group.tsx"],"sourcesContent":["export const RADIO_GROUP_ORIENTATION = ['horizontal', 'vertical'] as const;\nexport type TRadioGroupOrientation = (typeof RADIO_GROUP_ORIENTATION)[number];\n","/* -------------------------------------------------------------------------- */\n/*                                Radio group styles                               */\n/* -------------------------------------------------------------------------- */\n\n:host {\n  @apply inline-block;\n}\n\n.bq-radio-group {\n  @apply m-b-0 m-i-0;\n\n  &:not(.has-fieldset) {\n    @apply border-0 m-b-0 m-i-0 p-b-0 p-i-0;\n  }\n\n  &--horizontal {\n    @apply flex;\n  }\n\n  &--vertical {\n    @apply flex flex-col;\n  }\n}\n","import { AttachInternals, Component, Element, Event, EventEmitter, h, Listen, Prop, Watch } from '@stencil/core';\n\nimport { RADIO_GROUP_ORIENTATION, TRadioGroupOrientation } from './bq-radio-group.types';\nimport { debounce, isHTMLElement, isNil, TDebounce, validatePropValue } from '../../shared/utils';\n\n/**\n * The radio group is a user interface component that groups radio buttons to enable a single selection within the group.\n *\n * @example How to use it\n * ```html\n * <bq-radio-group fieldset value=\"option1\">\n *   <span slot=\"label\">radio group</span>\n *   <bq-radio value=\"option1\">Radio option 1</bq-radio>\n *   <bq-radio value=\"option2\">Radio option 2</bq-radio>\n *   <bq-radio value=\"option3\">Radio option 3</bq-radio>\n * </bq-radio-group>\n * ```\n *\n * @documentation https://www.beeq.design/3d466e231/p/9718e1-radio-button/b/09d7b1\n * @status stable\n *\n * @attr {boolean} background-on-hover - If `true`, the radio displays background on hover\n * @attr {number} debounce-time - A number representing the delay time (in milliseconds) that bqChange event handler gets triggered once the value change\n * @attr {boolean} disabled - If `true` radio inputs are disabled\n * @attr {boolean} fieldset - If `true` displays fieldset\n * @attr {string} name - Name of the HTML input form control. Submitted with the form as part of a name/value pair\n * @attr {\"horizontal\" | \"vertical\"} orientation - The display orientation of the radio inputs\n * @attr {boolean} required - If `true`, the radio group is required\n * @attr {string} required-validation-message - The native form validation message when the radio group is required\n * @attr {string} value - The display orientation of the radio inputs\n *\n * @method vClick - Simulate a click event on the native `<input>` HTML element used under the hood\n * @method vFocus - Sets focus on the native `<input>` HTML element used under the hood\n * @method vBlur - Remove focus from the native `<input>` HTML element used under the hood\n *\n * @event bqChange - Handler to be called when the radio state changes\n *\n * @slot - The bq-radio items to group\n * @slot label - The label content of radio group\n *\n * @part base - The component's internal wrapper of the radio components.\n * @part label - The `<legend>` element that holds the text content.\n * @part group - The `<div>` element that holds the radio inputs.\n */\n@Component({\n  tag: 'bq-radio-group',\n  styleUrl: './scss/bq-radio-group.scss',\n  formAssociated: true,\n  shadow: {\n    delegatesFocus: true,\n  },\n})\nexport class BqRadioGroup {\n  // Own Properties\n  // ====================\n\n  private focusedBqRadio: HTMLBqRadioElement | null = null;\n  private debouncedBqChange: TDebounce<{ value: string; target: HTMLBqRadioElement }>;\n\n  // Reference to host HTML element\n  // ===================================\n\n  @AttachInternals() internals!: ElementInternals;\n  @Element() el!: HTMLBqRadioGroupElement;\n\n  // State() variables\n  // Inlined decorator, alphabetical order\n  // =======================================\n\n  // Public Property API\n  // ========================\n\n  /** If true, all radio inputs in the group will display a background on hover */\n  @Prop({ reflect: true }) backgroundOnHover? = false;\n\n  /** A number representing the delay time (in milliseconds) that `bqChange` event handler gets triggered once the value change */\n  @Prop({ reflect: true, mutable: true }) debounceTime = 0;\n\n  /** If true radio inputs are disabled */\n  @Prop({ reflect: true }) disabled? = false;\n\n  /** If true displays fieldset */\n  @Prop({ reflect: true }) fieldset? = false;\n\n  /** Name of the HTML input form control. Submitted with the form as part of a name/value pair.  */\n  @Prop({ reflect: true }) name!: string;\n\n  /** The display orientation of the radio inputs */\n  @Prop({ reflect: true, mutable: true }) orientation?: TRadioGroupOrientation = 'vertical';\n\n  /** If true, the radio group is required */\n  @Prop({ reflect: true }) required? = false;\n\n  /** The native form validation message when the radio group is required */\n  @Prop({ reflect: true }) requiredValidationMessage?: string;\n\n  /** A string representing the value of the radio. */\n  @Prop({ reflect: true, mutable: true }) value?: string;\n\n  // Prop lifecycle events\n  // =======================\n\n  @Watch('backgroundOnHover')\n  @Watch('disabled')\n  @Watch('name')\n  @Watch('required')\n  @Watch('value')\n  handleGroupProperties() {\n    if (!this.bqRadioElements) return;\n\n    this.bqRadioElements.forEach((bqRadio) => {\n      bqRadio.backgroundOnHover = this.backgroundOnHover;\n      bqRadio.checked = !isNil(this.value) ? bqRadio.value === this.value : false;\n      bqRadio.disabled = this.disabled;\n      bqRadio.name = this.name;\n      bqRadio.required = this.required;\n    });\n  }\n\n  @Watch('orientation')\n  checkPropValues() {\n    validatePropValue(RADIO_GROUP_ORIENTATION, 'vertical', this.el, 'orientation');\n  }\n\n  @Watch('debounceTime')\n  checkDebounceChange() {\n    if (this.debounceTime < 0) {\n      this.debounceTime = Math.max(0, this.debounceTime);\n    }\n\n    if (this.debouncedBqChange) {\n      this.debouncedBqChange.cancel();\n    }\n\n    this.debouncedBqChange = debounce((event: Parameters<typeof this.debouncedBqChange>[0]) => {\n      this.bqChange.emit(event);\n    }, this.debounceTime);\n  }\n\n  @Watch('required')\n  @Watch('value')\n  async handleRequiredChange() {\n    await this.updateFormValidity();\n  }\n\n  // Events section\n  // Requires JSDocs for public API documentation\n  // ==============================================\n\n  /** Handler to be called when the radio state changes */\n  @Event() bqChange: EventEmitter<{ value: string; target: HTMLBqRadioElement }>;\n\n  // Component lifecycle events\n  // Ordered by their natural call order\n  // =====================================\n\n  componentWillLoad() {\n    this.checkPropValues();\n    this.checkDebounceChange();\n    this.internals.setFormValue(this.value);\n  }\n\n  componentDidLoad() {\n    this.handleGroupProperties();\n  }\n\n  async formAssociatedCallback() {\n    this.internals.setFormValue(this.value);\n    await this.updateFormValidity();\n  }\n\n  formResetCallback() {\n    this.value = null;\n    this.internals.setFormValue(this.value);\n  }\n\n  // Listeners\n  // ==============\n\n  @Listen('mousedown', { target: 'body', passive: true })\n  onMouseDown(event: MouseEvent) {\n    if (!isNil(this.focusedBqRadio) && isHTMLElement(event.target, 'bq-radio') && this.el.contains(event.target)) {\n      this.focusedBqRadio = event.target;\n    }\n  }\n\n  @Listen('bqClick')\n  onBqClick(event: CustomEvent<HTMLBqRadioElement>) {\n    if (isNil(this.focusedBqRadio)) {\n      this.focusedBqRadio = event.detail;\n    }\n\n    if (event.detail.value === this.value) return;\n\n    const target = event.detail;\n    this.bqRadioElements.forEach((bqRadioElement) => (bqRadioElement.checked = bqRadioElement === target));\n    this.setCheckedRadioItem(event.detail);\n  }\n\n  @Listen('bqKeyDown')\n  onBqKeyDown(event: CustomEvent<KeyboardEvent>) {\n    const { target } = event;\n\n    if (!isHTMLElement(target, 'bq-radio')) return;\n\n    switch (event.detail.key) {\n      case 'ArrowDown':\n      case 'ArrowRight': {\n        this.focusRadioInputSibling(target, true);\n        break;\n      }\n\n      case 'ArrowUp':\n      case 'ArrowLeft': {\n        this.focusRadioInputSibling(target, false);\n        break;\n      }\n\n      default:\n    }\n  }\n\n  @Listen('bqFocus', { capture: true })\n  onBqFocus(event: CustomEvent<HTMLBqRadioElement>) {\n    if (event.detail !== this.focusedBqRadio) return;\n\n    event.stopPropagation();\n  }\n\n  @Listen('bqBlur', { capture: true })\n  onBqBlur(event: CustomEvent<HTMLBqRadioElement>) {\n    if (!isNil(this.focusedBqRadio) && event.detail !== this.focusedBqRadio) {\n      event.stopPropagation();\n    } else {\n      this.focusedBqRadio = null;\n    }\n  }\n\n  // Public methods API\n  // These methods are exposed on the host element.\n  // Always use two lines.\n  // Public Methods must be async.\n  // Requires JSDocs for public API documentation.\n  // ===============================================\n\n  // Local methods\n  // Internal business logic.\n  // These methods cannot be called from the host element.\n  // =======================================================\n\n  private focusRadioInputSibling = (currentTarget: HTMLBqRadioElement, next: boolean): void => {\n    this.bqRadioElements.forEach((bqRadioElement, index, elements) => {\n      if (bqRadioElement === currentTarget) {\n        const target = this.getNextRadioElement(elements, index, next);\n\n        currentTarget.checked = false;\n\n        target.vFocus();\n        this.setCheckedRadioItem(target);\n      }\n    });\n  };\n\n  private setCheckedRadioItem = (target: HTMLBqRadioElement): void => {\n    const { value } = target;\n    target.checked = true;\n    this.value = value;\n    this.focusedBqRadio = target;\n    this.internals.setFormValue(value);\n    this.debouncedBqChange({ value, target });\n  };\n\n  private getNextRadioElement = (elements: HTMLBqRadioElement[], index: number, forward = true): HTMLBqRadioElement => {\n    let element = null;\n    let elementIndex = index;\n\n    do {\n      elementIndex = (elements.length + (elementIndex + (forward ? 1 : -1))) % elements.length;\n      element = elements[elementIndex];\n    } while (element.disabled);\n\n    return element;\n  };\n\n  private updateFormValidity = async (): Promise<void> => {\n    const { internals, required, requiredValidationMessage, value } = this;\n    // Clear the validity state\n    internals?.states.clear();\n\n    if (!required || (required && !isNil(value))) {\n      // If the checkbox is not required or is checked, set the validity state to valid\n      internals?.states.add('valid');\n      internals?.setValidity({});\n      return;\n    }\n\n    // If the checkbox is required and not checked, set the validity state to invalid\n    internals?.states.add('invalid');\n    internals?.setValidity(\n      { valueMissing: true },\n      requiredValidationMessage,\n      await this.bqRadioElements[0].getNativeInput(),\n    );\n  };\n\n  private get bqRadioElements(): HTMLBqRadioElement[] {\n    return Array.from(this.el.querySelectorAll('bq-radio'));\n  }\n\n  // render() function\n  // Always the last one in the class.\n  // ===================================\n\n  render() {\n    return (\n      <fieldset\n        class={{ 'bq-radio-group': true, 'has-fieldset': this.fieldset }}\n        aria-labelledby=\"bq-radio-group__label\"\n        aria-controls=\"bq-radiogroup\"\n        role=\"radiogroup\"\n        part=\"base\"\n      >\n        <legend part=\"label\">\n          <slot id=\"bq-radiogroup__label\" name=\"label\" />\n        </legend>\n        <div class={`bq-radio-group--${this.orientation}`} part=\"group\">\n          <slot id=\"bq-radiogroup\" />\n        </div>\n      </fieldset>\n    );\n  }\n}\n"],"mappings":";;;;yMAAO,MAAMA,EAA0B,CAAC,aAAc,YCAtD,MAAMC,EAAkB,g23BACxB,MAAAC,EAAeD,E,MCmDFE,EAAY,M,6NAIfC,eAA4C,KAC5CC,kBAKWC,U,wBAWMC,kBAAqB,MAGNC,aAAe,EAG9BC,SAAY,MAGZC,SAAY,MAGZC,KAGeC,YAAuC,WAGtDC,SAAY,MAGZC,0BAGeC,MAUxC,qBAAAC,GACE,IAAKC,KAAKC,gBAAiB,OAE3BD,KAAKC,gBAAgBC,SAASC,IAC5BA,EAAQb,kBAAoBU,KAAKV,kBACjCa,EAAQC,SAAWC,EAAML,KAAKF,OAASK,EAAQL,QAAUE,KAAKF,MAAQ,MACtEK,EAAQX,SAAWQ,KAAKR,SACxBW,EAAQT,KAAOM,KAAKN,KACpBS,EAAQP,SAAWI,KAAKJ,QAAQ,G,CAKpC,eAAAU,GACEC,EAAkBxB,EAAyB,WAAYiB,KAAKQ,GAAI,c,CAIlE,mBAAAC,GACE,GAAIT,KAAKT,aAAe,EAAG,CACzBS,KAAKT,aAAemB,KAAKC,IAAI,EAAGX,KAAKT,a,CAGvC,GAAIS,KAAKZ,kBAAmB,CAC1BY,KAAKZ,kBAAkBwB,Q,CAGzBZ,KAAKZ,kBAAoByB,GAAUC,IACjCd,KAAKe,SAASC,KAAKF,EAAM,GACxBd,KAAKT,a,CAKV,0BAAM0B,SACEjB,KAAKkB,oB,CAQJH,SAMT,iBAAAI,GACEnB,KAAKM,kBACLN,KAAKS,sBACLT,KAAKX,UAAU+B,aAAapB,KAAKF,M,CAGnC,gBAAAuB,GACErB,KAAKD,uB,CAGP,4BAAMuB,GACJtB,KAAKX,UAAU+B,aAAapB,KAAKF,aAC3BE,KAAKkB,oB,CAGb,iBAAAK,GACEvB,KAAKF,MAAQ,KACbE,KAAKX,UAAU+B,aAAapB,KAAKF,M,CAOnC,WAAA0B,CAAYV,GACV,IAAKT,EAAML,KAAKb,iBAAmBsC,EAAcX,EAAMY,OAAQ,aAAe1B,KAAKQ,GAAGmB,SAASb,EAAMY,QAAS,CAC5G1B,KAAKb,eAAiB2B,EAAMY,M,EAKhC,SAAAE,CAAUd,GACR,GAAIT,EAAML,KAAKb,gBAAiB,CAC9Ba,KAAKb,eAAiB2B,EAAMe,M,CAG9B,GAAIf,EAAMe,OAAO/B,QAAUE,KAAKF,MAAO,OAEvC,MAAM4B,EAASZ,EAAMe,OACrB7B,KAAKC,gBAAgBC,SAAS4B,GAAoBA,EAAe1B,QAAU0B,IAAmBJ,IAC9F1B,KAAK+B,oBAAoBjB,EAAMe,O,CAIjC,WAAAG,CAAYlB,GACV,MAAMY,OAAEA,GAAWZ,EAEnB,IAAKW,EAAcC,EAAQ,YAAa,OAExC,OAAQZ,EAAMe,OAAOI,KACnB,IAAK,YACL,IAAK,aAAc,CACjBjC,KAAKkC,uBAAuBR,EAAQ,MACpC,K,CAGF,IAAK,UACL,IAAK,YAAa,CAChB1B,KAAKkC,uBAAuBR,EAAQ,OACpC,K,GAQN,SAAAS,CAAUrB,GACR,GAAIA,EAAMe,SAAW7B,KAAKb,eAAgB,OAE1C2B,EAAMsB,iB,CAIR,QAAAC,CAASvB,GACP,IAAKT,EAAML,KAAKb,iBAAmB2B,EAAMe,SAAW7B,KAAKb,eAAgB,CACvE2B,EAAMsB,iB,KACD,CACLpC,KAAKb,eAAiB,I,EAgBlB+C,uBAAyB,CAACI,EAAmCC,KACnEvC,KAAKC,gBAAgBC,SAAQ,CAAC4B,EAAgBU,EAAOC,KACnD,GAAIX,IAAmBQ,EAAe,CACpC,MAAMZ,EAAS1B,KAAK0C,oBAAoBD,EAAUD,EAAOD,GAEzDD,EAAclC,QAAU,MAExBsB,EAAOiB,SACP3C,KAAK+B,oBAAoBL,E,IAE3B,EAGIK,oBAAuBL,IAC7B,MAAM5B,MAAEA,GAAU4B,EAClBA,EAAOtB,QAAU,KACjBJ,KAAKF,MAAQA,EACbE,KAAKb,eAAiBuC,EACtB1B,KAAKX,UAAU+B,aAAatB,GAC5BE,KAAKZ,kBAAkB,CAAEU,QAAO4B,UAAS,EAGnCgB,oBAAsB,CAACD,EAAgCD,EAAeI,EAAU,QACtF,IAAIC,EAAU,KACd,IAAIC,EAAeN,EAEnB,EAAG,CACDM,GAAgBL,EAASM,QAAUD,GAAgBF,EAAU,GAAK,KAAOH,EAASM,OAClFF,EAAUJ,EAASK,E,OACZD,EAAQrD,UAEjB,OAAOqD,CAAO,EAGR3B,mBAAqB8B,UAC3B,MAAM3D,UAAEA,EAASO,SAAEA,EAAQC,0BAAEA,EAAyBC,MAAEA,GAAUE,KAElEX,GAAW4D,OAAOC,QAElB,IAAKtD,GAAaA,IAAaS,EAAMP,GAAS,CAE5CT,GAAW4D,OAAOE,IAAI,SACtB9D,GAAW+D,YAAY,IACvB,M,CAIF/D,GAAW4D,OAAOE,IAAI,WACtB9D,GAAW+D,YACT,CAAEC,aAAc,MAChBxD,QACMG,KAAKC,gBAAgB,GAAGqD,iBAC/B,EAGH,mBAAYrD,GACV,OAAOsD,MAAMC,KAAKxD,KAAKQ,GAAGiD,iBAAiB,Y,CAO7C,MAAAC,GACE,OACEC,EAAA,YAAA1B,IAAA,2CACE2B,MAAO,CAAE,iBAAkB,KAAM,eAAgB5D,KAAKP,UAAU,kBAChD,wBAAuB,gBACzB,gBACdoE,KAAK,aACLC,KAAK,QAELH,EAAA,UAAA1B,IAAA,2CAAQ6B,KAAK,SACXH,EAAA,QAAA1B,IAAA,2CAAM8B,GAAG,uBAAuBrE,KAAK,WAEvCiE,EAAA,OAAA1B,IAAA,2CAAK2B,MAAO,mBAAmB5D,KAAKL,cAAemE,KAAK,SACtDH,EAAA,QAAA1B,IAAA,2CAAM8B,GAAG,mB","ignoreList":[]}