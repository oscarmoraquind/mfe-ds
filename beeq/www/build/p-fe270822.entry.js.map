{"version":3,"names":["BADGE_SIZE","bqBadgeCss","BqBadgeStyle0","BqBadge","spanElement","observer","MutationObserver","mutations","mutation","this","contentLength","target","textContent","length","backgroundColor","textColor","size","handleSizePropChange","validatePropValue","el","componentWillLoad","disconnectedCallback","disconnect","onSlotChange","slot","isNil","getTextContent","recurse","node","assignedNodes","flatten","takeRecords","observe","characterData","childList","subtree","querySelector","render","styles","getColorCSSVariable","h","Host","key","style","class","digit","part","ref","element","onSlotchange"],"sources":["../../packages/beeq/src/components/badge/bq-badge.types.ts","../../packages/beeq/src/components/badge/scss/bq-badge.scss?tag=bq-badge&encapsulation=shadow","../../packages/beeq/src/components/badge/bq-badge.tsx"],"sourcesContent":["export const BADGE_SIZE = ['small', 'medium'] as const;\nexport type TBadgeSize = (typeof BADGE_SIZE)[number];\n","/* -------------------------------------------------------------------------- */\n/*                                Badge styles                               */\n/* -------------------------------------------------------------------------- */\n\n@import './bq-badge.variables';\n\n:host {\n  @apply inline-block;\n}\n\n.bq-badge {\n  @apply flex items-center justify-center bg-[color:--bq-badge--background-color] text-[color:--bq-badge--text-color];\n  @apply rounded-[--bq-badge--border-radius] border-[length:--bq-badge--border-width] border-[color:--bq-badge--border-color];\n\n  border-style: var(--bq-badge--border-style);\n  box-shadow: var(--bq-badge--box-shadow);\n}\n\n.size {\n  &--small {\n    @apply bs-[--bq-badge--size-small] is-[--bq-badge--size-small];\n  }\n\n  &--medium {\n    @apply bs-[--bq-badge--size-medium] is-[--bq-badge--size-medium];\n  }\n}\n\n.digit {\n  @apply min-bs-[--bq-badge--size-large] min-is-[--bq-badge--size-large];\n}\n","import { Component, Element, h, Host, Prop, State, Watch } from '@stencil/core';\n\nimport { BADGE_SIZE, TBadgeSize } from './bq-badge.types';\nimport { getColorCSSVariable, getTextContent, isNil, validatePropValue } from '../../shared/utils';\n\n/**\n * The Badge component is a visual indicator that can be added to various elements within a user interface.\n * It is typically used to highlight important or relevant information, such as alerts, notifications, or statuses.\n *\n * @example How to use it\n * ```html\n * <bq-badge background-color=\"ui--success\" text-color=\"text--inverse\" size=\"small\">9</bq-badge>\n * ```\n *\n * @documentation https://www.beeq.design/3d466e231/p/194fd1-badge\n * @status stable\n *\n * @attr {string} background-color - Badge background color. The value should be a valid value of the palette color.\n * @attr {string} text-color - Badge number color. The value should be a valid value of the palette color.\n * @attr {\"small\" | \"medium\" | \"large\"} size - The size of the badge. Relevant if badge has no content.\n *\n * @slot - The default slot is used to add content to the badge. The content can be a number or a text.\n *\n * @part base - The component's internal wrapper that holds the count.\n * @part number - The component's internal wrapper that holds the slot.\n *\n * @cssprop --bq-badge--background-color - The badge background color\n * @cssprop --bq-badge--box-shadow - The badge box shadow\n * @cssprop --bq-badge--border-color - The badge border color\n * @cssprop --bq-badge--border-radius - The badge border radius\n * @cssprop --bq-badge--border-style - The badge border style\n * @cssprop --bq-badge--border-width - The badge border width\n * @cssprop --bq-badge--size-small - The badge small size\n * @cssprop --bq-badge--size-medium - The badge medium size\n * @cssprop --bq-badge--size-large - The badge large size\n * @cssprop --bq-badge--text-color - The badge text color\n */\n@Component({\n  tag: 'bq-badge',\n  styleUrl: './scss/bq-badge.scss',\n  shadow: true,\n})\nexport class BqBadge {\n  // Own Properties\n  // ====================\n\n  private spanElement?: HTMLSpanElement;\n\n  private observer: MutationObserver = new MutationObserver((mutations) => {\n    const [mutation] = mutations;\n    this.contentLength = mutation.target.textContent.length;\n  });\n\n  // Reference to host HTML element\n  // ===================================\n\n  @Element() el: HTMLBqBadgeElement;\n\n  // State() variables\n  // Inlined decorator, alphabetical order\n  // =======================================\n\n  @State() private contentLength = 0;\n\n  // Public Property API\n  // ========================\n\n  /** Badge background color. The value should be a valid value of the palette color */\n  @Prop({ mutable: true, reflect: true }) backgroundColor? = 'ui--danger';\n\n  /** Badge number color. The value should be a valid value of the palette color */\n  @Prop({ mutable: true, reflect: true }) textColor? = 'text--inverse';\n\n  /** The size of the badge. Relevant if badge has no content. */\n  @Prop({ reflect: true, mutable: true }) size?: TBadgeSize = 'small';\n\n  // Prop lifecycle events\n  // =======================\n\n  @Watch('size')\n  handleSizePropChange() {\n    validatePropValue(BADGE_SIZE, 'small', this.el, 'size');\n  }\n\n  // Events section\n  // Requires JSDocs for public API documentation\n  // ==============================================\n\n  // Component lifecycle events\n  // Ordered by their natural call order\n  // =====================================\n\n  componentWillLoad() {\n    this.handleSizePropChange();\n  }\n\n  disconnectedCallback() {\n    this.observer?.disconnect();\n  }\n\n  // Listeners\n  // ==============\n\n  // Public methods API\n  // These methods are exposed on the host element.\n  // Always use two lines.\n  // Public Methods must be async.\n  // Requires JSDocs for public API documentation.\n  // ===============================================\n\n  // Local methods\n  // Internal business logic.\n  // These methods cannot be called from the host element.\n  // =======================================================\n\n  private onSlotChange = () => {\n    const slot = this.slot;\n\n    if (isNil(slot)) return;\n\n    this.contentLength = getTextContent(slot, { recurse: true }).length;\n    const [node] = slot.assignedNodes({ flatten: true });\n\n    if (isNil(node)) {\n      this.observer.takeRecords();\n      return;\n    }\n\n    this.observer.observe(node, {\n      characterData: true,\n      childList: true,\n      subtree: true,\n    });\n  };\n\n  private get slot(): HTMLSlotElement | null {\n    return this.spanElement?.querySelector('slot') ?? null;\n  }\n\n  // render() function\n  // Always the last one in the class.\n  // ===================================\n\n  render() {\n    const styles = {\n      ...(this.backgroundColor && { '--bq-badge--background-color': getColorCSSVariable(this.backgroundColor) }),\n      ...(this.textColor && { '--bq-badge--text-color': getColorCSSVariable(this.textColor) }),\n    };\n\n    return (\n      <Host style={styles}>\n        <div\n          class={{\n            'bq-badge': true,\n            [`size--${this.size}`]: this.contentLength === 0,\n            digit: this.contentLength > 0,\n            'p-i-xs2': this.contentLength > 1,\n          }}\n          part=\"base\"\n        >\n          <span ref={(element) => (this.spanElement = element)} class=\"text-xs font-bold leading-small\" part=\"number\">\n            <slot onSlotchange={this.onSlotChange}></slot>\n          </span>\n        </div>\n      </Host>\n    );\n  }\n}\n"],"mappings":";;;;iOAAO,MAAMA,EAAa,CAAC,QAAS,UCApC,MAAMC,EAAa,uy7BACnB,MAAAC,EAAeD,E,MCyCFE,EAAO,M,yBAIVC,YAEAC,SAA6B,IAAIC,kBAAkBC,IACzD,MAAOC,GAAYD,EACnBE,KAAKC,cAAgBF,EAASG,OAAOC,YAAYC,MAAM,I,wBAYxCH,cAAgB,EAMOI,gBAAmB,aAGnBC,UAAa,gBAGbC,KAAoB,QAM5D,oBAAAC,GACEC,EAAkBlB,EAAY,QAASS,KAAKU,GAAI,O,CAWlD,iBAAAC,GACEX,KAAKQ,sB,CAGP,oBAAAI,GACEZ,KAAKJ,UAAUiB,Y,CAkBTC,aAAe,KACrB,MAAMC,EAAOf,KAAKe,KAElB,GAAIC,EAAMD,GAAO,OAEjBf,KAAKC,cAAgBgB,EAAeF,EAAM,CAAEG,QAAS,OAAQd,OAC7D,MAAOe,GAAQJ,EAAKK,cAAc,CAAEC,QAAS,OAE7C,GAAIL,EAAMG,GAAO,CACfnB,KAAKJ,SAAS0B,cACd,M,CAGFtB,KAAKJ,SAAS2B,QAAQJ,EAAM,CAC1BK,cAAe,KACfC,UAAW,KACXC,QAAS,MACT,EAGJ,QAAYX,GACV,OAAOf,KAAKL,aAAagC,cAAc,SAAW,I,CAOpD,MAAAC,GACE,MAAMC,EAAS,IACT7B,KAAKK,iBAAmB,CAAE,+BAAgCyB,EAAoB9B,KAAKK,qBACnFL,KAAKM,WAAa,CAAE,yBAA0BwB,EAAoB9B,KAAKM,aAG7E,OACEyB,EAACC,EAAI,CAAAC,IAAA,2CAACC,MAAOL,GACXE,EAAA,OAAAE,IAAA,2CACEE,MAAO,CACL,WAAY,KACZ,CAAC,SAASnC,KAAKO,QAASP,KAAKC,gBAAkB,EAC/CmC,MAAOpC,KAAKC,cAAgB,EAC5B,UAAWD,KAAKC,cAAgB,GAElCoC,KAAK,QAELN,EAAA,QAAAE,IAAA,2CAAMK,IAAMC,GAAavC,KAAKL,YAAc4C,EAAUJ,MAAM,kCAAkCE,KAAK,UACjGN,EAAA,QAAAE,IAAA,2CAAMO,aAAcxC,KAAKc,iB","ignoreList":[]}