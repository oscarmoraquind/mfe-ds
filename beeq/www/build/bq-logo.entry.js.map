{"file":"bq-logo.entry.esm.js","mappings":";;;;;;AAAA,MAAM,SAAS,GAAG,ik5BAAik5B;;MCQtk5B,MAAM;;;;;IAEQ,IAAI,GAAc,QAAQ,CAAC;;IAG3B,IAAI,GAAc,MAAM,CAAC;;IAGzB,OAAO,GAAiB,YAAY,CAAC;;;;IAQ9D,iBAAiB;;KAEhB;;;;;;;;;;IAWD,IAAY,QAAQ;;QAElB,OAAO,GAAG,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC;KACvC;IAED,MAAM;QACJ,MAAM,MAAM,GAAG;YACb,IAAI,IAAI,CAAC,IAAI,IAAI;gBACf,SAAS,EAAE,uBAAuB,IAAI,CAAC,IAAI,WAAW,IAAI,CAAC,IAAI,GAAG;gBAClE,UAAU,EAAE,uBAAuB,IAAI,CAAC,IAAI,YAAY,IAAI,CAAC,IAAI,GAAG;aACrE,CAAC;SACH,CAAC;QAEF,QACE,EAAC,IAAI,qDAAC,KAAK,EAAE,MAAM,IACjB,gEACE,IAAI,EAAC,MAAM,EACX,IAAI,EAAC,KAAK,EACV,IAAI,EAAE,OAAO,GAAG,IAAI,CAAC,QAAQ,EAC7B,KAAK,EAAE,EAAE,KAAK,EAAE,cAAc,EAAE,MAAM,EAAE,eAAe,EAAE,EACzD,IAAI,EAAE,GAAG,GACA,CACN,EACP;KACH;;;;;;;;;;;","names":[],"sources":["../../packages/beeq/src/components/logo/scss/bq-logo.scss?tag=bq-logo&encapsulation=shadow","../../packages/beeq/src/components/logo/bq-logo.tsx"],"sourcesContent":["/* -------------------------------------------------------------------------- */\n/*                        Logo styles                        */\n/* -------------------------------------------------------------------------- */\n\n@import './bq-logo.variables';\n\n:host {\n  @apply inline-block;\n}\n\n/**\n * This class is added on packages/beeq/src/components/logo/helper/request.ts\n * See lines 42 and 58 for details.\n */\n.bq-logo__svg {\n  @apply scale-x-[--bq-logo--direction];\n}\n","import { Component, h, Host, Prop, Watch } from '@stencil/core';\nimport { TLogoSize, TLogoType, TLogoVariant } from './bq-logo.types';\n\n@Component({\n  tag: 'bq-logo',\n  styleUrl: './scss/bq-logo.scss',\n  shadow: true,\n})\nexport class BqLogo {\n  /** Tamaño del logo (normal o small) */\n  @Prop({ reflect: true }) size: TLogoSize = 'normal';\n\n  /** Tipo del logo (completo = logo o responsivo = isotype) */\n  @Prop({ reflect: true }) type: TLogoType = 'logo';\n\n  /** Variante de color (full-color, green, white) */\n  @Prop({ reflect: true }) variant: TLogoVariant = 'full-color';\n\n  /**\n   * (Opcional) Si deseas recomputar la lógica cada vez que cambien las props:\n   */\n  @Watch('variant')\n  @Watch('type')\n  @Watch('size')\n  handlePropsChange() {\n    // Forzar que Stencil re-renderice el componente cuando cambien las props\n  }\n\n  /**\n   * Genera el `name` o `src` apropiado para <bq-icon>.\n   * Por ejemplo, si antes cargabas un archivo `isotype-green.svg`,\n   * ahora podrías usar:\n   *    name=\"isotype-green\"\n   * o bien:\n   *    src=\"assets/logos/isotype-green.svg\"\n   * dependiendo de cómo quieras manejar tus íconos.\n   */\n  private get iconName() {\n    // p.ej.: \"logo-full-color\", \"isotype-green\", etc.\n    return `${this.type}-${this.variant}`;\n  }\n\n  render() {\n    const styles = {\n      ...(this.size && {\n        '--width': `var(--bq-logo--size-${this.size}-width--${this.type})`,\n        '--height': `var(--bq-logo--size-${this.size}-height--${this.type})`,\n      }),\n    };\n\n    return (\n      <Host style={styles}>\n        <bq-icon\n          part=\"base\"\n          role=\"img\"\n          name={'logo/' + this.iconName}\n          style={{ width: 'var(--width)', height: 'var(--height)' }}\n          size={' '}\n        ></bq-icon>\n      </Host>\n    );\n  }\n}\n"],"version":3}