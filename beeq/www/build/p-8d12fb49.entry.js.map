{"version":3,"names":["STEP_ITEM_STATUS","bqStepItemCss","BqStepItemStyle0","BqStepItem","size","status","type","checkPropValues","validatePropValue","STEPS_SIZE","this","el","handleIconPrefix","bqClick","connectedCallback","componentWillLoad","componentDidLoad","isDisabled","isCurrent","iconElem","querySelector","isHTMLElement","weight","render","h","key","class","part","name","onSlotchange"],"sources":["../../packages/beeq/src/components/step-item/bq-step-item.types.ts","../../packages/beeq/src/components/step-item/scss/bq-step-item.scss?tag=bq-step-item&encapsulation=shadow","../../packages/beeq/src/components/step-item/bq-step-item.tsx"],"sourcesContent":["export const STEP_ITEM_STATUS = ['default', 'current', 'completed', 'error', 'disabled'] as const;\nexport type TStepItemStatus = (typeof STEP_ITEM_STATUS)[number];\n","/* -------------------------------------------------------------------------- */\n/*                                Step item styles                */\n/* -------------------------------------------------------------------------- */\n\n@import './bq-step-item.variables';\n\n:host {\n  --bq-icon--color: theme(stroke.icon.primary);\n\n  @apply bg-primary;\n}\n\n.bq-step-item__prefix.dot,\n.bq-step-item__prefix.icon {\n  ::slotted(bq-icon) {\n    --bq-icon--color: var(--bq-step-item--prefix-color);\n  }\n\n  &.current {\n    ::slotted(bq-icon) {\n      --bq-icon--color: var(--bq-step-item--prefix-color-current);\n    }\n  }\n\n  &.completed {\n    ::slotted(bq-icon) {\n      --bq-icon--color: var(--bq-step-item--prefix-color-completed);\n    }\n  }\n\n  &.error {\n    ::slotted(bq-icon) {\n      --bq-icon--color: var(--bq-step-item--prefix-color-error);\n    }\n  }\n\n  &.disabled {\n    ::slotted(bq-icon) {\n      opacity: 0.6;\n    }\n  }\n}\n\n.bq-step-item__prefix.numeric {\n  @apply flex items-center justify-center rounded-full;\n  @apply bg-[--bq-step-item--prefix-num-bg-color] bs-[--bq-step-item--prefix-num-size] is-[--bq-step-item--prefix-num-size];\n  @apply text-m font-semibold leading-regular;\n\n  &.small {\n    @apply text-s [--bq-step-item--prefix-num-size:--bq-spacing-l];\n  }\n\n  // Status\n\n  &.current {\n    @apply bg-[var(--bq-step-item--prefix-color-current)] text-alt;\n  }\n\n  &.completed {\n    @apply bg-ui-success-alt text-success;\n  }\n\n  &.error {\n    @apply bg-ui-danger-alt text-danger;\n  }\n\n  &.disabled {\n    @apply opacity-60;\n  }\n}\n\n.bq-step-item__content--description::slotted(*) {\n  @apply text-s leading-regular opacity-60;\n}\n","import { Component, Element, Event, EventEmitter, h, Prop, Watch } from '@stencil/core';\n\nimport { STEP_ITEM_STATUS, TStepItemStatus } from './bq-step-item.types';\nimport { isHTMLElement, validatePropValue } from '../../shared/utils';\nimport { STEPS_SIZE, TStepsSize, TStepsType } from '../steps/bq-steps.types';\n\n/**\n * The Step Item Component is a UI element used to display a single step or stage in a process or task.\n * It should be used inside the Steps component.\n *\n * @example How to use it\n * ```html\n * <bq-step-item status=\"completed\">\n *   <bq-icon slot=\"prefix\" name=\"check-circle\"></bq-icon>\n *   <span>Title</span>\n *   <span slot=\"description\">Description</span>\n * </bq-step-item>\n * ```\n *\n * @documentation https://www.beeq.design/3d466e231/p/896b66-stepper\n * @status stable\n *\n * @attr {\"small\" | \"medium\"} size - It defines prefix size\n * @attr {\"completed\" | \"current\" | \"error\" | \"default\" | \"disabled\"} status - It defines step item appearance based on its status\n * @attr {\"numeric\" | \"icon\" | \"dot\"} type - It defines the step item type used\n *\n * @event bqClick - Callback handler emitted when the step item is clicked\n *\n * @slot - The step item content\n * @slot prefix - The step item prefix\n * @slot description - The step item description\n *\n * @part base - The component's base wrapper.\n * @part title - The component's title.\n * @part description - The component's description.\n *\n * @cssprop --bq-step-item--prefix-color - Color of the prefix icon\n * @cssprop --bq-step-item--prefix-color-current - Color of the prefix icon when current\n * @cssprop --bq-step-item--prefix-color-completed - Color of the prefix icon when completed\n * @cssprop --bq-step-item--prefix-color-error - Color of the prefix icon when error\n * @cssprop --bq-step-item--prefix-num-size - Size of the prefix number\n * @cssprop --bq-step-item--prefix-num-bg-color - Background color of the prefix number\n */\n@Component({\n  tag: 'bq-step-item',\n  styleUrl: './scss/bq-step-item.scss',\n  shadow: true,\n})\nexport class BqStepItem {\n  // Own Properties\n  // ====================\n\n  // Reference to host HTML element\n  // ===================================\n  @Element() el!: HTMLBqStepItemElement;\n\n  // State() variables\n  // Inlined decorator, alphabetical order\n  // =======================================\n\n  // Public Property API\n  // ========================\n\n  /** It defines prefix size */\n  @Prop({ reflect: true }) size?: TStepsSize = 'medium';\n\n  /** It defines step item appearance based on its status */\n  @Prop({ reflect: true }) status?: TStepItemStatus = 'default';\n\n  /** It defines the step item type used */\n  @Prop({ reflect: true }) type?: TStepsType;\n\n  // Prop lifecycle events\n  // =======================\n\n  @Watch('size')\n  @Watch('status')\n  checkPropValues() {\n    validatePropValue(STEPS_SIZE, 'medium', this.el, 'size');\n    validatePropValue(STEP_ITEM_STATUS, 'default', this.el, 'status');\n\n    this.handleIconPrefix();\n  }\n\n  // Events section\n  // Requires JSDocs for public API documentation\n  // ==============================================\n\n  /** Callback handler emitted when the step item is clicked */\n  @Event() bqClick: EventEmitter<{ target: HTMLBqStepItemElement; value: string }>;\n\n  // Component lifecycle events\n  // Ordered by their natural call order\n  // =====================================\n\n  connectedCallback() {\n    this.checkPropValues();\n  }\n\n  componentWillLoad() {\n    this.checkPropValues();\n  }\n\n  componentDidLoad() {\n    this.handleIconPrefix();\n  }\n\n  // Listeners\n  // ==============\n\n  // Public methods API\n  // These methods are exposed on the host element.\n  // Always use two lines.\n  // Public Methods must be async.\n  // Requires JSDocs for public API documentation.\n  // ===============================================\n\n  // Local methods\n  // Internal business logic.\n  // These methods cannot be called from the host element.\n  // =======================================================\n\n  private get isDisabled(): boolean {\n    return this.status === 'disabled';\n  }\n\n  private get isCurrent(): boolean {\n    return this.status === 'current';\n  }\n\n  private handleIconPrefix = () => {\n    const iconElem = this.el.querySelector('[slot=\"prefix\"]');\n    if (!iconElem || !isHTMLElement(iconElem, 'bq-icon')) return;\n\n    iconElem.size = this.size === 'small' ? 24 : 32;\n    iconElem.weight = this.isCurrent ? 'fill' : 'regular';\n  };\n\n  // render() function\n  // Always the last one in the class.\n  // ===================================\n\n  render() {\n    return (\n      <div\n        class={{\n          'bq-step-item flex gap-s': true,\n          [`bq-step-item--${this.status}`]: true,\n          'pointer-events-none opacity-60': this.isDisabled,\n        }}\n        part=\"base\"\n      >\n        <div class={`bq-step-item__prefix relative ${this.type} ${this.size} ${this.status}`}>\n          <slot name=\"prefix\" onSlotchange={this.handleIconPrefix} />\n        </div>\n        <div class=\"bq-step-item__content\">\n          {/* TITLE */}\n          <div\n            class={{\n              'bq-step-item__content--title pe-xs3 text-m leading-regular text-primary': true,\n              'pointer-events-none': this.isDisabled,\n              'text-brand': this.isCurrent,\n            }}\n            part=\"title\"\n          >\n            <slot />\n          </div>\n          {/* DESCRIPTION */}\n          <div\n            class={{\n              'bq-step-item__content--description text-s leading-regular opacity-60': true,\n              'opacity-60': this.isDisabled,\n            }}\n            part=\"description\"\n          >\n            <slot name=\"description\" />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n"],"mappings":";;;;qKAAO,MAAMA,EAAmB,CAAC,UAAW,UAAW,YAAa,QAAS,YCA7E,MAAMC,EAAgB,q4/BACtB,MAAAC,EAAeD,E,MC+CFE,EAAU,M,kFAgBIC,KAAoB,SAGpBC,OAA2B,UAG3BC,KAOzB,eAAAC,GACEC,EAAkBC,EAAY,SAAUC,KAAKC,GAAI,QACjDH,EAAkBR,EAAkB,UAAWU,KAAKC,GAAI,UAExDD,KAAKE,kB,CAQEC,QAMT,iBAAAC,GACEJ,KAAKH,iB,CAGP,iBAAAQ,GACEL,KAAKH,iB,CAGP,gBAAAS,GACEN,KAAKE,kB,CAkBP,cAAYK,GACV,OAAOP,KAAKL,SAAW,U,CAGzB,aAAYa,GACV,OAAOR,KAAKL,SAAW,S,CAGjBO,iBAAmB,KACzB,MAAMO,EAAWT,KAAKC,GAAGS,cAAc,mBACvC,IAAKD,IAAaE,EAAcF,EAAU,WAAY,OAEtDA,EAASf,KAAOM,KAAKN,OAAS,QAAU,GAAK,GAC7Ce,EAASG,OAASZ,KAAKQ,UAAY,OAAS,SAAS,EAOvD,MAAAK,GACE,OACEC,EAAA,OAAAC,IAAA,2CACEC,MAAO,CACL,0BAA2B,KAC3B,CAAC,iBAAiBhB,KAAKL,UAAW,KAClC,iCAAkCK,KAAKO,YAEzCU,KAAK,QAELH,EAAA,OAAAC,IAAA,2CAAKC,MAAO,iCAAiChB,KAAKJ,QAAQI,KAAKN,QAAQM,KAAKL,UAC1EmB,EAAA,QAAAC,IAAA,2CAAMG,KAAK,SAASC,aAAcnB,KAAKE,oBAEzCY,EAAA,OAAAC,IAAA,2CAAKC,MAAM,yBAETF,EAAA,OAAAC,IAAA,2CACEC,MAAO,CACL,0EAA2E,KAC3E,sBAAuBhB,KAAKO,WAC5B,aAAcP,KAAKQ,WAErBS,KAAK,SAELH,EAAA,QAAAC,IAAA,8CAGFD,EAAA,OAAAC,IAAA,2CACEC,MAAO,CACL,uEAAwE,KACxE,aAAchB,KAAKO,YAErBU,KAAK,eAELH,EAAA,QAAAC,IAAA,2CAAMG,KAAK,kB","ignoreList":[]}